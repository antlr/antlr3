/** \file
 *  This C++ source file was generated by $ANTLR version 3.5
 *
 *     -  From the grammar source file : predicates_test/C.g
 *     -                            On : 2013-06-03 21:39:58
 *     -                 for the lexer : CLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "CLexer.hpp"
/* ----------------------------------------- */




/** String literals used by CLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR_UCHAR	lit_1[]  = { 0x2E, 0x2E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_2[]  = { 0x69, 0x6D, 0x70, 0x6F, 0x72, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_3[]  = { 0x79, 0x65, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_4[]  = { 0x6E, 0x6F,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_5[]  = { 0x30, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_6[]  = { 0x30, 0x62,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_7[]  = { 0x30, 0x63,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_8[]  = { 0x30, 0x78,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_9[]  = { 0x2F, 0x2F,  antlr3::ANTLR_STRING_TERMINATOR};



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;


/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */




static bool isValidCharAfterFloatDot(ANTLR_UCHAR c)
{
    return (c >= '0' && c <= '9') || (c == 'E') || (c == 'e');
}



CLexer::~CLexer()
{
}

void
CLexer::reset()
{
    this->get_rec()->reset();
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "predicates_test/C.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* CLexer::getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called CLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pCLexer initialized for the lex start
 *     - Fail NULL
 */
CLexer::CLexer(StreamType* instream)
:CLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	// See if we can create a new lexer with the standard constructor
	//
	this->init(instream );
}

/** \brief Create a new lexer called CLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pCLexer initialized for the lex start
 *     - Fail NULL
 */
CLexer::CLexer(StreamType* instream, RecognizerSharedStateType* state)
:CLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void CLexer::init(StreamType* instream)
{
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in CLexer.h here so you can get a sense
     * of what goes where.
     */

}


/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( DOT | RANGE | IMPORT | AT | PACKAGE_REVISION | BOOL | INT | FLOAT | COMMENT | NEWLINE | WS | STRING | ID | LPAREN | RPAREN | LBRACK | RBRACK | LCURLY | RCURLY | UNUSED );
 */
static const ANTLR_INT32 dfa23_eot[36] =
    {
	-1, 21, 12, 23, 12, 12, 27, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 12, -1, -1, 12, 31, -1, -1, 12, 31, -1, 12, 12, 35, -1
    };
static const ANTLR_INT32 dfa23_eof[36] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa23_min[36] =
    {
	9, 46, 109, 48, 101, 111, 46, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 112, -1, -1, 115, 48, -1, -1, 111, 48, -1, 114, 116, 48, 
	-1
    };
static const ANTLR_INT32 dfa23_max[36] =
    {
	125, 46, 109, 102, 101, 111, 101, 101, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 112, -1, -1, 115, 122, -1, -1, 111, 122, -1, 114, 
	116, 122, -1
    };
static const ANTLR_INT32 dfa23_accept[36] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
	19, 20, 2, 1, -1, 4, 5, -1, -1, 7, 8, -1, -1, 6, -1, -1, -1, 3
    };
static const ANTLR_INT32 dfa23_special[36] =
    {
	0, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa23_T_empty	 =   NULL;

static const ANTLR_INT32 dfa23_T0[] =
    {
	20
    };

static const ANTLR_INT32 dfa23_T1[] =
    {
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, -1, -1, -1, -1, -1, -1, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, -1, -1, -1, -1, 12, -1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12
    };

static const ANTLR_INT32 dfa23_T2[] =
    {
	10, 9, -1, 9, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 10, -1, 11, 19, -1, -1, -1, 19, 13, 14, -1, -1, -1, -1, 
	1, 8, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 19, -1, -1, -1, -1, 3, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 15, -1, 16, -1, 12, 19, 12, 12, 12, 12, 12, 12, 
	12, 12, 2, 12, 12, 12, 12, 5, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 
	12, 17, -1, 18
    };

static const ANTLR_INT32 dfa23_T3[] =
    {
	22
    };

static const ANTLR_INT32 dfa23_T4[] =
    {
	32
    };

static const ANTLR_INT32 dfa23_T5[] =
    {
	33
    };

static const ANTLR_INT32 dfa23_T6[] =
    {
	34
    };

static const ANTLR_INT32 dfa23_T7[] =
    {
	29
    };

static const ANTLR_INT32 dfa23_T8[] =
    {
	28, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28
    };

static const ANTLR_INT32 dfa23_T9[] =
    {
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24, -1, -1, -1, -1, -1, -1, -1, 24, 
	24, 24, 24, 24, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 24, 24, 24, 24, 
	24
    };

static const ANTLR_INT32 dfa23_T10[] =
    {
	25
    };

static const ANTLR_INT32 dfa23_T11[] =
    {
	26
    };

static const ANTLR_INT32 dfa23_T12[] =
    {
	30
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa23_transitions[] =
{
    dfa23_T2, dfa23_T0, dfa23_T3, dfa23_T9, dfa23_T10, dfa23_T11, dfa23_T8, 
    dfa23_T8, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, dfa23_T7, NULL, NULL, dfa23_T12, dfa23_T1, NULL, 
    NULL, dfa23_T4, dfa23_T1, NULL, dfa23_T5, dfa23_T6, dfa23_T1, NULL
};


/* Declare tracking structure for Cyclic DFA 23
 */
class CLexerCyclicDFA23 : public CyclicDFA< CLexerImplTraits, CLexer >, public CLexerTokens
{
public:
	typedef CyclicDFA< CLexerImplTraits, CLexer >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	CLexerCyclicDFA23( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

        ANTLR_UINT32 LA(ANTLR_INT32 i)
        {
        	return m_ctx->LA(i);
        }

        template<typename PredType>
        bool msynpred( PredType pred )
        {
        	return m_ctx->msynpred(pred);
        }


	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA23_0;

	    		    ANTLR_MARKER index23_0;


	    		    LA23_0 = ctx->LA(1);

	    		     
	    		        index23_0 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA23_0 == '.') )
	    		    {
	    		        s = 1;
	    		    }

	    		    else if ( (LA23_0 == 'i') )
	    		    {
	    		        s = 2;
	    		    }

	    		    else if ( ((((!insideImport_))||((insideImport_)))) && (LA23_0 == '@') )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA23_0 == 'y') )
	    		    {
	    		        s = 4;
	    		    }

	    		    else if ( (LA23_0 == 'n') )
	    		    {
	    		        s = 5;
	    		    }

	    		    else if ( (LA23_0 == '0') )
	    		    {
	    		        s = 6;
	    		    }

	    		    else if ( (((LA23_0 >= '1') && (LA23_0 <= '9'))) )
	    		    {
	    		        s = 7;
	    		    }

	    		    else if ( (LA23_0 == '/') )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA23_0 == '\n' || ((LA23_0 >= '\f') && (LA23_0 <= '\r'))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA23_0 == '\t' || LA23_0 == ' ') )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA23_0 == '"') )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (((LA23_0 >= 'A') && (LA23_0 <= 'Z')) || LA23_0 == '_' || ((LA23_0 >= 'a') && (LA23_0 <= 'h')) || ((LA23_0 >= 'j') && (LA23_0 <= 'm')) || ((LA23_0 >= 'o') && (LA23_0 <= 'x')) || LA23_0 == 'z') )
	    		    {
	    		        s = 12;
	    		    }

	    		    else if ( (LA23_0 == '(') )
	    		    {
	    		        s = 13;
	    		    }

	    		    else if ( (LA23_0 == ')') )
	    		    {
	    		        s = 14;
	    		    }

	    		    else if ( (LA23_0 == '[') )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA23_0 == ']') )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA23_0 == '{') )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA23_0 == '}') )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA23_0 == '#' || LA23_0 == '\'' || LA23_0 == ';' || LA23_0 == '`') )
	    		    {
	    		        s = 19;
	    		    }

	    			 
	    				ctx->seek(index23_0);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA23_3;

	    		    ANTLR_MARKER index23_3;


	    		    LA23_3 = ctx->LA(1);

	    		     
	    		        index23_3 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( ((insideImport_)) && (((LA23_3 >= '0') && (LA23_3 <= '9')) || ((LA23_3 >= 'A') && (LA23_3 <= 'F')) || ((LA23_3 >= 'a') && (LA23_3 <= 'f'))) )
	    		    {
	    		        s = 24;
	    		    }

	    		    else s = 23;

	    			 
	    				ctx->seek(index23_3);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< CLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "1:1: Tokens : ( DOT | RANGE | IMPORT | AT | PACKAGE_REVISION | BOOL | INT | FLOAT | COMMENT | NEWLINE | WS | STRING | ID | LPAREN | RPAREN | LBRACK | RBRACK | LCURLY | RCURLY | UNUSED );" );
	    ex->set_decisionNum( 23 );
	    ex->set_state(_s);
	    return -1;
	}
};

static CLexerCyclicDFA23  cdfa23(
	    23,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"1:1: Tokens : ( DOT | RANGE | IMPORT | AT | PACKAGE_REVISION | BOOL | INT | FLOAT | COMMENT | NEWLINE | WS | STRING | ID | LPAREN | RPAREN | LBRACK | RBRACK | LCURLY | RCURLY | UNUSED );",
	    dfa23_eot,	    /* EOT table			    */
	    dfa23_eof,	    /* EOF table			    */
	    dfa23_min,	    /* Minimum tokens for each state    */
	    dfa23_max,	    /* Maximum tokens for each state    */
	    dfa23_accept,	/* Accept table			    */
	    dfa23_special,	/* Special transition states	    */
	    dfa23_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 23
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 44:5: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOT
 *
 * Looks to match the characters the constitute the token DOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mDOT()
{
    ANTLR_UINT32	_type;
      


    _type	    = DOT;


    // predicates_test/C.g:44:5: ( '.' )
    // predicates_test/C.g:44:7: '.'
    {
         this->matchc('.');
        if  (this->hasException())
        {
            goto ruleDOTEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDOTEx; /* Prevent compiler warnings */
    ruleDOTEx: ;

}
// $ANTLR end DOT

//   Comes from: 48:5: ( '..' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RANGE
 *
 * Looks to match the characters the constitute the token RANGE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mRANGE()
{
    ANTLR_UINT32	_type;
      


    _type	    = RANGE;


    // predicates_test/C.g:48:5: ( '..' )
    // predicates_test/C.g:48:7: '..'
    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleRANGEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleRANGEEx; /* Prevent compiler warnings */
    ruleRANGEEx: ;

}
// $ANTLR end RANGE

//   Comes from: 52:2: ( 'import' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IMPORT
 *
 * Looks to match the characters the constitute the token IMPORT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mIMPORT()
{
    ANTLR_UINT32	_type;
      


    _type	    = IMPORT;


    // predicates_test/C.g:52:2: ( 'import' )
    // predicates_test/C.g:52:4: 'import'
    {
        this->matchs(lit_2);
        if  (this->hasException())
        {
            goto ruleIMPORTEx;
        }




        {
             insideImport_ = true; 
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIMPORTEx; /* Prevent compiler warnings */
    ruleIMPORTEx: ;

}
// $ANTLR end IMPORT

//   Comes from: 56:2: ({...}? => '@' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start AT
 *
 * Looks to match the characters the constitute the token AT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mAT()
{
    ANTLR_UINT32	_type;
      


    _type	    = AT;


    // predicates_test/C.g:56:2: ({...}? => '@' )
    // predicates_test/C.g:56:4: {...}? => '@'
    {
        if ( !((!insideImport_)) )
        {
            	ExceptionBaseType* ex = new ANTLR_Exception< CLexerImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "!insideImport_" );
                ex->set_ruleName( "AT" );


        }

         this->matchc('@');
        if  (this->hasException())
        {
            goto ruleATEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleATEx; /* Prevent compiler warnings */
    ruleATEx: ;

}
// $ANTLR end AT

//   Comes from: 60:2: ({...}? => '@' ( HEX_DIGIT )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PACKAGE_REVISION
 *
 * Looks to match the characters the constitute the token PACKAGE_REVISION
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mPACKAGE_REVISION()
{
    ANTLR_UINT32	_type;
      


    _type	    = PACKAGE_REVISION;


    // predicates_test/C.g:60:2: ({...}? => '@' ( HEX_DIGIT )+ )
    // predicates_test/C.g:60:4: {...}? => '@' ( HEX_DIGIT )+
    {
        if ( !((insideImport_)) )
        {
            	ExceptionBaseType* ex = new ANTLR_Exception< CLexerImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "insideImport_" );
                ex->set_ruleName( "PACKAGE_REVISION" );


        }

         this->matchc('@');
        if  (this->hasException())
        {
            goto rulePACKAGE_REVISIONEx;
        }


        // predicates_test/C.g:60:28: ( HEX_DIGIT )+
        {
            int cnt1=0;

            for (;;)
            {
                int alt1=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        	case 'A':
        	case 'B':
        	case 'C':
        	case 'D':
        	case 'E':
        	case 'F':
        	case 'a':
        	case 'b':
        	case 'c':
        	case 'd':
        	case 'e':
        	case 'f':
        		{
        			alt1=1;
        		}
        	    break;

        	}

        	switch (alt1)
        	{
        	    case 1:
        	        // predicates_test/C.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'F')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'f')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto rulePACKAGE_REVISIONEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt1 >= 1 )
        		{
        		    goto loop1;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto rulePACKAGE_REVISIONEx;
        	}
        	cnt1++;
            }
            loop1: ;	/* Jump to here if this rule does not match */
        }

        {
             insideImport_ = false; 
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto rulePACKAGE_REVISIONEx; /* Prevent compiler warnings */
    rulePACKAGE_REVISIONEx: ;

}
// $ANTLR end PACKAGE_REVISION

//   Comes from: 64:5: ( 'yes' | 'no' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BOOL
 *
 * Looks to match the characters the constitute the token BOOL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mBOOL()
{
    ANTLR_UINT32	_type;
      


    _type	    = BOOL;


    {
        //  predicates_test/C.g:64:5: ( 'yes' | 'no' )

        ANTLR_UINT32 alt2;

        alt2=2;

        switch ( this->LA(1) )
        {
        case 'y':
        	{
        		alt2=1;
        	}
            break;
        case 'n':
        	{
        		alt2=2;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< CLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 2 );
            ex->set_state( 0 );


            goto ruleBOOLEx;

        }

        switch (alt2)
        {
    	case 1:
    	    // predicates_test/C.g:64:7: 'yes'
    	    {
    	        this->matchs(lit_3);
    	        if  (this->hasException())
    	        {
    	            goto ruleBOOLEx;
    	        }




    	    }
    	    break;
    	case 2:
    	    // predicates_test/C.g:65:7: 'no'
    	    {
    	        this->matchs(lit_4);
    	        if  (this->hasException())
    	        {
    	            goto ruleBOOLEx;
    	        }




    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleBOOLEx; /* Prevent compiler warnings */
    ruleBOOLEx: ;

}
// $ANTLR end BOOL

//   Comes from: 69:5: ( ( '0d' )? ( '0' .. '9' )+ | '0b' ( '0' .. '1' )+ | '0c' ( '0' .. '7' )+ | '0x' ( HEX_DIGIT )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INT
 *
 * Looks to match the characters the constitute the token INT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mINT()
{
    ANTLR_UINT32	_type;
      


    _type	    = INT;


    {
        //  predicates_test/C.g:69:5: ( ( '0d' )? ( '0' .. '9' )+ | '0b' ( '0' .. '1' )+ | '0c' ( '0' .. '7' )+ | '0x' ( HEX_DIGIT )+ )

        ANTLR_UINT32 alt8;

        alt8=4;

        switch ( this->LA(1) )
        {
        case '0':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'b':
        			{
        				alt8=2;
        			}
        		    break;
        		case 'c':
        			{
        				alt8=3;
        			}
        		    break;
        		case 'x':
        			{
        				alt8=4;
        			}
        		    break;

        		default:
        		    alt8=1;
        		}

        	}
            break;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	{
        		alt8=1;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< CLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 8 );
            ex->set_state( 0 );


            goto ruleINTEx;

        }

        switch (alt8)
        {
    	case 1:
    	    // predicates_test/C.g:69:7: ( '0d' )? ( '0' .. '9' )+
    	    {
    	        // predicates_test/C.g:69:7: ( '0d' )?
    	        {
    	            int alt3=2;
    	            switch ( this->LA(1) )
    	            {
    	                case '0':
    	                	{
    	                		switch ( this->LA(2) )
    	                		{
    	                		    case 'd':
    	                		    	{
    	                		    		alt3=1;
    	                		    	}
    	                		        break;
    	                		}

    	                	}
    	                    break;
    	            }

    	            switch (alt3)
    	            {
    	        	case 1:
    	        	    // predicates_test/C.g:69:8: '0d'
    	        	    {
    	        	        this->matchs(lit_5);
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleINTEx;
    	        	        }




    	        	    }
    	        	    break;

    	            }
    	        }

    	        // predicates_test/C.g:69:15: ( '0' .. '9' )+
    	        {
    	            int cnt4=0;

    	            for (;;)
    	            {
    	                int alt4=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt4=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt4)
    	        	{
    	        	    case 1:
    	        	        // predicates_test/C.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleINTEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt4 >= 1 )
    	        		{
    	        		    goto loop4;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleINTEx;
    	        	}
    	        	cnt4++;
    	            }
    	            loop4: ;	/* Jump to here if this rule does not match */
    	        }

    	    }
    	    break;
    	case 2:
    	    // predicates_test/C.g:70:7: '0b' ( '0' .. '1' )+
    	    {
    	        this->matchs(lit_6);
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }




    	        // predicates_test/C.g:70:12: ( '0' .. '1' )+
    	        {
    	            int cnt5=0;

    	            for (;;)
    	            {
    	                int alt5=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        		{
    	        			alt5=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt5)
    	        	{
    	        	    case 1:
    	        	        // predicates_test/C.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '1')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleINTEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt5 >= 1 )
    	        		{
    	        		    goto loop5;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleINTEx;
    	        	}
    	        	cnt5++;
    	            }
    	            loop5: ;	/* Jump to here if this rule does not match */
    	        }

    	    }
    	    break;
    	case 3:
    	    // predicates_test/C.g:71:7: '0c' ( '0' .. '7' )+
    	    {
    	        this->matchs(lit_7);
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }




    	        // predicates_test/C.g:71:12: ( '0' .. '7' )+
    	        {
    	            int cnt6=0;

    	            for (;;)
    	            {
    	                int alt6=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        		{
    	        			alt6=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt6)
    	        	{
    	        	    case 1:
    	        	        // predicates_test/C.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleINTEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt6 >= 1 )
    	        		{
    	        		    goto loop6;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleINTEx;
    	        	}
    	        	cnt6++;
    	            }
    	            loop6: ;	/* Jump to here if this rule does not match */
    	        }

    	    }
    	    break;
    	case 4:
    	    // predicates_test/C.g:72:7: '0x' ( HEX_DIGIT )+
    	    {
    	        this->matchs(lit_8);
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }




    	        // predicates_test/C.g:72:12: ( HEX_DIGIT )+
    	        {
    	            int cnt7=0;

    	            for (;;)
    	            {
    	                int alt7=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        	case 'A':
    	        	case 'B':
    	        	case 'C':
    	        	case 'D':
    	        	case 'E':
    	        	case 'F':
    	        	case 'a':
    	        	case 'b':
    	        	case 'c':
    	        	case 'd':
    	        	case 'e':
    	        	case 'f':
    	        		{
    	        			alt7=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt7)
    	        	{
    	        	    case 1:
    	        	        // predicates_test/C.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'F')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'f')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleINTEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt7 >= 1 )
    	        		{
    	        		    goto loop7;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleINTEx;
    	        	}
    	        	cnt7++;
    	            }
    	            loop7: ;	/* Jump to here if this rule does not match */
    	        }

    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleINTEx; /* Prevent compiler warnings */
    ruleINTEx: ;

}
// $ANTLR end INT

//   Comes from: 76:5: ( ( DIGIT )+ ({...}? => '.' ( DIGIT )+ ( EXPONENT )? | EXPONENT |) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLOAT
 *
 * Looks to match the characters the constitute the token FLOAT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mFLOAT()
{
    ANTLR_UINT32	_type;
      


    _type	    = FLOAT;


    // predicates_test/C.g:76:5: ( ( DIGIT )+ ({...}? => '.' ( DIGIT )+ ( EXPONENT )? | EXPONENT |) )
    // predicates_test/C.g:76:7: ( DIGIT )+ ({...}? => '.' ( DIGIT )+ ( EXPONENT )? | EXPONENT |)
    {
        // predicates_test/C.g:76:7: ( DIGIT )+
        {
            int cnt9=0;

            for (;;)
            {
                int alt9=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt9=1;
        		}
        	    break;

        	}

        	switch (alt9)
        	{
        	    case 1:
        	        // predicates_test/C.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleFLOATEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt9 >= 1 )
        		{
        		    goto loop9;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleFLOATEx;
        	}
        	cnt9++;
            }
            loop9: ;	/* Jump to here if this rule does not match */
        }

        // predicates_test/C.g:77:7: ({...}? => '.' ( DIGIT )+ ( EXPONENT )? | EXPONENT |)
        {
            int alt12=3;
            {
                int LA12_0 = this->LA(1);
                if ( (( isValidCharAfterFloatDot(LA(2)) )) && (LA12_0 == '.'))
                {
                    alt12=1;
                }
                else if ( (LA12_0 == 'E' || LA12_0 == 'e'))
                {
                    alt12=2;
                }
                else
                {
                    alt12=3;
                }
            }
            switch (alt12)
            {
        	case 1:
        	    // predicates_test/C.g:77:9: {...}? => '.' ( DIGIT )+ ( EXPONENT )?
        	    {
        	        if ( !(( isValidCharAfterFloatDot(LA(2)) )) )
        	        {
        	            	ExceptionBaseType* ex = new ANTLR_Exception< CLexerImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), " isValidCharAfterFloatDot(LA(2)) " );
        	                ex->set_ruleName( "FLOAT" );


        	        }

        	         this->matchc('.');
        	        if  (this->hasException())
        	        {
        	            goto ruleFLOATEx;
        	        }


        	        // predicates_test/C.g:77:52: ( DIGIT )+
        	        {
        	            int cnt10=0;

        	            for (;;)
        	            {
        	                int alt10=2;
        	        	switch ( this->LA(1) )
        	        	{
        	        	case '0':
        	        	case '1':
        	        	case '2':
        	        	case '3':
        	        	case '4':
        	        	case '5':
        	        	case '6':
        	        	case '7':
        	        	case '8':
        	        	case '9':
        	        		{
        	        			alt10=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt10)
        	        	{
        	        	    case 1:
        	        	        // predicates_test/C.g:
        	        	        {
        	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	        	            {
        	        	                this->consume();
        	        	            }
        	        	            else
        	        	            {
        	        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	        	                this->recover();
        	        	                goto ruleFLOATEx;
        	        	            }


        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt10 >= 1 )
        	        		{
        	        		    goto loop10;
        	        		}
        	        		/* mismatchedSetEx()
        	        		 */
        	        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        	        		goto ruleFLOATEx;
        	        	}
        	        	cnt10++;
        	            }
        	            loop10: ;	/* Jump to here if this rule does not match */
        	        }

        	        // predicates_test/C.g:77:59: ( EXPONENT )?
        	        {
        	            int alt11=2;
        	            switch ( this->LA(1) )
        	            {
        	                case 'E':
        	                case 'e':
        	                	{
        	                		alt11=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt11)
        	            {
        	        	case 1:
        	        	    // predicates_test/C.g:77:59: EXPONENT
        	        	    {
        	        	        /* 77:59: EXPONENT */
        	        	        mEXPONENT();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleFLOATEx;
        	        	        }



        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // predicates_test/C.g:78:9: EXPONENT
        	    {
        	        /* 78:9: EXPONENT */
        	        mEXPONENT();
        	        if  (this->hasException())
        	        {
        	            goto ruleFLOATEx;
        	        }



        	    }
        	    break;
        	case 3:
        	    // predicates_test/C.g:79:9: 
        	    {
        	        {
        	             _type = INT; 
        	        }


        	    }
        	    break;

            }
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleFLOATEx; /* Prevent compiler warnings */
    ruleFLOATEx: ;

}
// $ANTLR end FLOAT

//   Comes from: 84:5: ( '//' (~ ( '\\n' | '\\r' ) )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mCOMMENT()
{
    ANTLR_UINT32	_type;
      


    _type	    = COMMENT;


    // predicates_test/C.g:84:5: ( '//' (~ ( '\\n' | '\\r' ) )* )
    // predicates_test/C.g:84:7: '//' (~ ( '\\n' | '\\r' ) )*
    {
        this->matchs(lit_9);
        if  (this->hasException())
        {
            goto ruleCOMMENTEx;
        }




        // predicates_test/C.g:84:12: (~ ( '\\n' | '\\r' ) )*

        for (;;)
        {
            int alt13=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA13_0 = this->LA(1);
                if ( (((LA13_0 >= 0x0000) && (LA13_0 <= '\t')) || ((LA13_0 >= 0x000B) && (LA13_0 <= '\f')) || ((LA13_0 >= 0x000E) && (LA13_0 <= 0xFFFF))))
                {
                    alt13=1;
                }

            }
            switch (alt13)
            {
        	case 1:
        	    // predicates_test/C.g:
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '\t')) || ((this->LA(1) >= 0x000B) && (this->LA(1) <= '\f')) || ((this->LA(1) >= 0x000E) && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleCOMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop13;	/* break out of the loop */
        	    break;
            }
        }
        loop13: ; /* Jump out to here if this rule does not match */


        {
            this->get_state()->get_channel()=HIDDEN;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

//   Comes from: 88:5: ( ( '\\u000C' )? ( '\\r' )? '\\n' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NEWLINE
 *
 * Looks to match the characters the constitute the token NEWLINE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mNEWLINE()
{
    ANTLR_UINT32	_type;
      


    _type	    = NEWLINE;


    // predicates_test/C.g:88:5: ( ( '\\u000C' )? ( '\\r' )? '\\n' )
    // predicates_test/C.g:88:7: ( '\\u000C' )? ( '\\r' )? '\\n'
    {
        // predicates_test/C.g:88:7: ( '\\u000C' )?
        {
            int alt14=2;
            switch ( this->LA(1) )
            {
                case '\f':
                	{
                		alt14=1;
                	}
                    break;
            }

            switch (alt14)
            {
        	case 1:
        	    // predicates_test/C.g:88:8: '\\u000C'
        	    {
        	         this->matchc(0x000C);
        	        if  (this->hasException())
        	        {
        	            goto ruleNEWLINEEx;
        	        }


        	    }
        	    break;

            }
        }

        // predicates_test/C.g:88:19: ( '\\r' )?
        {
            int alt15=2;
            switch ( this->LA(1) )
            {
                case '\r':
                	{
                		alt15=1;
                	}
                    break;
            }

            switch (alt15)
            {
        	case 1:
        	    // predicates_test/C.g:88:19: '\\r'
        	    {
        	         this->matchc('\r');
        	        if  (this->hasException())
        	        {
        	            goto ruleNEWLINEEx;
        	        }


        	    }
        	    break;

            }
        }

         this->matchc('\n');
        if  (this->hasException())
        {
            goto ruleNEWLINEEx;
        }


        {
             insideImport_ = false; 
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleNEWLINEEx; /* Prevent compiler warnings */
    ruleNEWLINEEx: ;

}
// $ANTLR end NEWLINE

//   Comes from: 92:5: ( ( ' ' | '\\t' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mWS()
{
    ANTLR_UINT32	_type;
      


    _type	    = WS;


    // predicates_test/C.g:92:5: ( ( ' ' | '\\t' )+ )
    // predicates_test/C.g:92:7: ( ' ' | '\\t' )+
    {
        // predicates_test/C.g:92:7: ( ' ' | '\\t' )+
        {
            int cnt16=0;

            for (;;)
            {
                int alt16=2;
        	switch ( this->LA(1) )
        	{
        	case '\t':
        	case ' ':
        		{
        			alt16=1;
        		}
        	    break;

        	}

        	switch (alt16)
        	{
        	    case 1:
        	        // predicates_test/C.g:
        	        {
        	            if ( this->LA(1) == '\t' || this->LA(1) == ' ' )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleWSEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt16 >= 1 )
        		{
        		    goto loop16;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleWSEx;
        	}
        	cnt16++;
            }
            loop16: ;	/* Jump to here if this rule does not match */
        }

        {
            this->get_state()->get_channel()=HIDDEN;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

//   Comes from: 96:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING
 *
 * Looks to match the characters the constitute the token STRING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mSTRING()
{
    ANTLR_UINT32	_type;
      


    _type	    = STRING;


    // predicates_test/C.g:96:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
    // predicates_test/C.g:96:7: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
    {
         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleSTRINGEx;
        }


        // predicates_test/C.g:96:11: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*

        for (;;)
        {
            int alt17=3;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA17_0 = this->LA(1);
                if ( (LA17_0 == '\\'))
                {
                    alt17=1;
                }
                else if ( (((LA17_0 >= 0x0000) && (LA17_0 <= '!')) || ((LA17_0 >= '#') && (LA17_0 <= '[')) || ((LA17_0 >= ']') && (LA17_0 <= 0xFFFF))))
                {
                    alt17=2;
                }

            }
            switch (alt17)
            {
        	case 1:
        	    // predicates_test/C.g:96:13: ESC_SEQ
        	    {
        	        /* 96:13: ESC_SEQ */
        	        mESC_SEQ();
        	        if  (this->hasException())
        	        {
        	            goto ruleSTRINGEx;
        	        }



        	    }
        	    break;
        	case 2:
        	    // predicates_test/C.g:96:23: ~ ( '\\\\' | '\"' )
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '!')) || ((this->LA(1) >= '#') && (this->LA(1) <= '[')) || ((this->LA(1) >= ']') && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleSTRINGEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop17;	/* break out of the loop */
        	    break;
            }
        }
        loop17: ; /* Jump out to here if this rule does not match */


         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleSTRINGEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSTRINGEx; /* Prevent compiler warnings */
    ruleSTRINGEx: ;

}
// $ANTLR end STRING

//   Comes from: 100:5: ( ID_LETTER ( ID_LETTER | DIGIT )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ID
 *
 * Looks to match the characters the constitute the token ID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mID()
{
    ANTLR_UINT32	_type;
      


    _type	    = ID;


    // predicates_test/C.g:100:5: ( ID_LETTER ( ID_LETTER | DIGIT )* )
    // predicates_test/C.g:100:7: ID_LETTER ( ID_LETTER | DIGIT )*
    {
        /* 100:7: ID_LETTER ( ID_LETTER | DIGIT )* */
        mID_LETTER();
        if  (this->hasException())
        {
            goto ruleIDEx;
        }



        // predicates_test/C.g:100:17: ( ID_LETTER | DIGIT )*

        for (;;)
        {
            int alt18=2;
            switch ( this->LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt18=1;
            	}
                break;

            }

            switch (alt18)
            {
        	case 1:
        	    // predicates_test/C.g:
        	    {
        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleIDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop18;	/* break out of the loop */
        	    break;
            }
        }
        loop18: ; /* Jump out to here if this rule does not match */


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIDEx; /* Prevent compiler warnings */
    ruleIDEx: ;

}
// $ANTLR end ID

//   Comes from: 106:5: ( 'a' .. 'z' | 'A' .. 'Z' | '_' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ID_LETTER
 *
 * Looks to match the characters the constitute the token ID_LETTER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mID_LETTER()
{
    ANTLR_UINT32	_type;
      



    // predicates_test/C.g:106:5: ( 'a' .. 'z' | 'A' .. 'Z' | '_' )
    // predicates_test/C.g:
    {
        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleID_LETTEREx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleID_LETTEREx; /* Prevent compiler warnings */
    ruleID_LETTEREx: ;

}
// $ANTLR end ID_LETTER

//   Comes from: 111:5: ( '0' .. '9' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DIGIT
 *
 * Looks to match the characters the constitute the token DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mDIGIT()
{
    ANTLR_UINT32	_type;
      



    // predicates_test/C.g:111:5: ( '0' .. '9' )
    // predicates_test/C.g:
    {
        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleDIGITEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleDIGITEx; /* Prevent compiler warnings */
    ruleDIGITEx: ;

}
// $ANTLR end DIGIT

//   Comes from: 116:5: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXPONENT
 *
 * Looks to match the characters the constitute the token EXPONENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mEXPONENT()
{
    ANTLR_UINT32	_type;
      



    // predicates_test/C.g:116:5: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
    // predicates_test/C.g:116:7: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    {
        if ( this->LA(1) == 'E' || this->LA(1) == 'e' )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleEXPONENTEx;
        }


        // predicates_test/C.g:116:17: ( '+' | '-' )?
        {
            int alt19=2;
            switch ( this->LA(1) )
            {
                case '+':
                case '-':
                	{
                		alt19=1;
                	}
                    break;
            }

            switch (alt19)
            {
        	case 1:
        	    // predicates_test/C.g:
        	    {
        	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleEXPONENTEx;
        	        }


        	    }
        	    break;

            }
        }

        // predicates_test/C.g:116:28: ( '0' .. '9' )+
        {
            int cnt20=0;

            for (;;)
            {
                int alt20=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt20=1;
        		}
        	    break;

        	}

        	switch (alt20)
        	{
        	    case 1:
        	        // predicates_test/C.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleEXPONENTEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt20 >= 1 )
        		{
        		    goto loop20;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleEXPONENTEx;
        	}
        	cnt20++;
            }
            loop20: ;	/* Jump to here if this rule does not match */
        }

    }


    // This is where rules clean up and exit
    //
    goto ruleEXPONENTEx; /* Prevent compiler warnings */
    ruleEXPONENTEx: ;

}
// $ANTLR end EXPONENT

//   Comes from: 121:5: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HEX_DIGIT
 *
 * Looks to match the characters the constitute the token HEX_DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mHEX_DIGIT()
{
    ANTLR_UINT32	_type;
      



    // predicates_test/C.g:121:5: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    // predicates_test/C.g:
    {
        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'F')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'f')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleHEX_DIGITEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleHEX_DIGITEx; /* Prevent compiler warnings */
    ruleHEX_DIGITEx: ;

}
// $ANTLR end HEX_DIGIT

//   Comes from: 126:5: ( '\\\\' ( 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '\\'' | '\\\"' | '\\\\' ) | UNICODE_ESC )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ESC_SEQ
 *
 * Looks to match the characters the constitute the token ESC_SEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mESC_SEQ()
{
    ANTLR_UINT32	_type;
      



    {
        //  predicates_test/C.g:126:5: ( '\\\\' ( 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '\\'' | '\\\"' | '\\\\' ) | UNICODE_ESC )

        ANTLR_UINT32 alt21;

        alt21=2;

        switch ( this->LA(1) )
        {
        case '\\':
        	{
        		switch ( this->LA(2) )
        		{
        		case '"':
        		case '\'':
        		case '\\':
        		case 'a':
        		case 'b':
        		case 'f':
        		case 'n':
        		case 'r':
        		case 't':
        		case 'v':
        			{
        				alt21=1;
        			}
        		    break;
        		case 'u':
        			{
        				alt21=2;
        			}
        		    break;

        		default:
        		    ExceptionBaseType* ex = new ANTLR_Exception< CLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        		    ex->set_decisionNum( 21 );
        		    ex->set_state( 1 );


        		    goto ruleESC_SEQEx;

        		}

        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< CLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 21 );
            ex->set_state( 0 );


            goto ruleESC_SEQEx;

        }

        switch (alt21)
        {
    	case 1:
    	    // predicates_test/C.g:126:9: '\\\\' ( 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '\\'' | '\\\"' | '\\\\' )
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleESC_SEQEx;
    	        }


    	        if ( this->LA(1) == '"' || this->LA(1) == '\'' || this->LA(1) == '\\' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'b')) || this->LA(1) == 'f' || this->LA(1) == 'n' || this->LA(1) == 'r' || this->LA(1) == 't' || this->LA(1) == 'v' )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleESC_SEQEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // predicates_test/C.g:127:9: UNICODE_ESC
    	    {
    	        /* 127:9: UNICODE_ESC */
    	        mUNICODE_ESC();
    	        if  (this->hasException())
    	        {
    	            goto ruleESC_SEQEx;
    	        }



    	    }
    	    break;

        }
    }

    // This is where rules clean up and exit
    //
    goto ruleESC_SEQEx; /* Prevent compiler warnings */
    ruleESC_SEQEx: ;

}
// $ANTLR end ESC_SEQ

//   Comes from: 132:5: ( '\\\\' 'u' ( HEX_DIGIT )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UNICODE_ESC
 *
 * Looks to match the characters the constitute the token UNICODE_ESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mUNICODE_ESC()
{
    ANTLR_UINT32	_type;
      



    // predicates_test/C.g:132:5: ( '\\\\' 'u' ( HEX_DIGIT )+ )
    // predicates_test/C.g:132:9: '\\\\' 'u' ( HEX_DIGIT )+
    {
         this->matchc('\\');
        if  (this->hasException())
        {
            goto ruleUNICODE_ESCEx;
        }


         this->matchc('u');
        if  (this->hasException())
        {
            goto ruleUNICODE_ESCEx;
        }


        // predicates_test/C.g:132:18: ( HEX_DIGIT )+
        {
            int cnt22=0;

            for (;;)
            {
                int alt22=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        	case 'A':
        	case 'B':
        	case 'C':
        	case 'D':
        	case 'E':
        	case 'F':
        	case 'a':
        	case 'b':
        	case 'c':
        	case 'd':
        	case 'e':
        	case 'f':
        		{
        			alt22=1;
        		}
        	    break;

        	}

        	switch (alt22)
        	{
        	    case 1:
        	        // predicates_test/C.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'F')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'f')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleUNICODE_ESCEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt22 >= 1 )
        		{
        		    goto loop22;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleUNICODE_ESCEx;
        	}
        	cnt22++;
            }
            loop22: ;	/* Jump to here if this rule does not match */
        }

    }


    // This is where rules clean up and exit
    //
    goto ruleUNICODE_ESCEx; /* Prevent compiler warnings */
    ruleUNICODE_ESCEx: ;

}
// $ANTLR end UNICODE_ESC

//   Comes from: 135:5: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LPAREN
 *
 * Looks to match the characters the constitute the token LPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mLPAREN()
{
    ANTLR_UINT32	_type;
      


    _type	    = LPAREN;


    // predicates_test/C.g:135:5: ( '(' )
    // predicates_test/C.g:135:7: '('
    {
         this->matchc('(');
        if  (this->hasException())
        {
            goto ruleLPARENEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLPARENEx; /* Prevent compiler warnings */
    ruleLPARENEx: ;

}
// $ANTLR end LPAREN

//   Comes from: 138:5: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RPAREN
 *
 * Looks to match the characters the constitute the token RPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mRPAREN()
{
    ANTLR_UINT32	_type;
      


    _type	    = RPAREN;


    // predicates_test/C.g:138:5: ( ')' )
    // predicates_test/C.g:138:7: ')'
    {
         this->matchc(')');
        if  (this->hasException())
        {
            goto ruleRPARENEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleRPARENEx; /* Prevent compiler warnings */
    ruleRPARENEx: ;

}
// $ANTLR end RPAREN

//   Comes from: 141:5: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LBRACK
 *
 * Looks to match the characters the constitute the token LBRACK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mLBRACK()
{
    ANTLR_UINT32	_type;
      


    _type	    = LBRACK;


    // predicates_test/C.g:141:5: ( '[' )
    // predicates_test/C.g:141:7: '['
    {
         this->matchc('[');
        if  (this->hasException())
        {
            goto ruleLBRACKEx;
        }


        {
             insideImport_ = false; 
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLBRACKEx; /* Prevent compiler warnings */
    ruleLBRACKEx: ;

}
// $ANTLR end LBRACK

//   Comes from: 144:5: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RBRACK
 *
 * Looks to match the characters the constitute the token RBRACK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mRBRACK()
{
    ANTLR_UINT32	_type;
      


    _type	    = RBRACK;


    // predicates_test/C.g:144:5: ( ']' )
    // predicates_test/C.g:144:7: ']'
    {
         this->matchc(']');
        if  (this->hasException())
        {
            goto ruleRBRACKEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleRBRACKEx; /* Prevent compiler warnings */
    ruleRBRACKEx: ;

}
// $ANTLR end RBRACK

//   Comes from: 147:5: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LCURLY
 *
 * Looks to match the characters the constitute the token LCURLY
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mLCURLY()
{
    ANTLR_UINT32	_type;
      


    _type	    = LCURLY;


    // predicates_test/C.g:147:5: ( '{' )
    // predicates_test/C.g:147:7: '{'
    {
         this->matchc('{');
        if  (this->hasException())
        {
            goto ruleLCURLYEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLCURLYEx; /* Prevent compiler warnings */
    ruleLCURLYEx: ;

}
// $ANTLR end LCURLY

//   Comes from: 150:5: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RCURLY
 *
 * Looks to match the characters the constitute the token RCURLY
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mRCURLY()
{
    ANTLR_UINT32	_type;
      


    _type	    = RCURLY;


    // predicates_test/C.g:150:5: ( '}' )
    // predicates_test/C.g:150:7: '}'
    {
         this->matchc('}');
        if  (this->hasException())
        {
            goto ruleRCURLYEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleRCURLYEx; /* Prevent compiler warnings */
    ruleRCURLYEx: ;

}
// $ANTLR end RCURLY

//   Comes from: 154:5: ( '`' | '#' | ';' | '\\'' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UNUSED
 *
 * Looks to match the characters the constitute the token UNUSED
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mUNUSED()
{
    ANTLR_UINT32	_type;
      


    _type	    = UNUSED;


    // predicates_test/C.g:154:5: ( '`' | '#' | ';' | '\\'' )
    // predicates_test/C.g:
    {
        if ( this->LA(1) == '#' || this->LA(1) == '\'' || this->LA(1) == ';' || this->LA(1) == '`' )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleUNUSEDEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleUNUSEDEx; /* Prevent compiler warnings */
    ruleUNUSEDEx: ;

}
// $ANTLR end UNUSED

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
void
CLexer::mTokens()
{
    {
        //  predicates_test/C.g:1:8: ( DOT | RANGE | IMPORT | AT | PACKAGE_REVISION | BOOL | INT | FLOAT | COMMENT | NEWLINE | WS | STRING | ID | LPAREN | RPAREN | LBRACK | RBRACK | LCURLY | RCURLY | UNUSED )

        ANTLR_UINT32 alt23;

        alt23=20;

        alt23 = cdfa23.predict(this, this->get_rec(), this->get_istream(), cdfa23 );
        if  (this->hasException())
        {
            goto ruleTokensEx;
        }

        switch (alt23)
        {
    	case 1:
    	    // predicates_test/C.g:1:10: DOT
    	    {
    	        /* 1:10: DOT */
    	        mDOT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // predicates_test/C.g:1:14: RANGE
    	    {
    	        /* 1:14: RANGE */
    	        mRANGE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // predicates_test/C.g:1:20: IMPORT
    	    {
    	        /* 1:20: IMPORT */
    	        mIMPORT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // predicates_test/C.g:1:27: AT
    	    {
    	        /* 1:27: AT */
    	        mAT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // predicates_test/C.g:1:30: PACKAGE_REVISION
    	    {
    	        /* 1:30: PACKAGE_REVISION */
    	        mPACKAGE_REVISION();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // predicates_test/C.g:1:47: BOOL
    	    {
    	        /* 1:47: BOOL */
    	        mBOOL();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // predicates_test/C.g:1:52: INT
    	    {
    	        /* 1:52: INT */
    	        mINT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // predicates_test/C.g:1:56: FLOAT
    	    {
    	        /* 1:56: FLOAT */
    	        mFLOAT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // predicates_test/C.g:1:62: COMMENT
    	    {
    	        /* 1:62: COMMENT */
    	        mCOMMENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // predicates_test/C.g:1:70: NEWLINE
    	    {
    	        /* 1:70: NEWLINE */
    	        mNEWLINE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // predicates_test/C.g:1:78: WS
    	    {
    	        /* 1:78: WS */
    	        mWS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // predicates_test/C.g:1:81: STRING
    	    {
    	        /* 1:81: STRING */
    	        mSTRING();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // predicates_test/C.g:1:88: ID
    	    {
    	        /* 1:88: ID */
    	        mID();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // predicates_test/C.g:1:91: LPAREN
    	    {
    	        /* 1:91: LPAREN */
    	        mLPAREN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // predicates_test/C.g:1:98: RPAREN
    	    {
    	        /* 1:98: RPAREN */
    	        mRPAREN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // predicates_test/C.g:1:105: LBRACK
    	    {
    	        /* 1:105: LBRACK */
    	        mLBRACK();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // predicates_test/C.g:1:112: RBRACK
    	    {
    	        /* 1:112: RBRACK */
    	        mRBRACK();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // predicates_test/C.g:1:119: LCURLY
    	    {
    	        /* 1:119: LCURLY */
    	        mLCURLY();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // predicates_test/C.g:1:126: RCURLY
    	    {
    	        /* 1:126: RCURLY */
    	        mRCURLY();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // predicates_test/C.g:1:133: UNUSED
    	    {
    	        /* 1:133: UNUSED */
    	        mUNUSED();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */



/* End of code
 * =============================================================================
 */
