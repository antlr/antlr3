/** \file
 *  This C++ source file was generated by $ANTLR version 3.5
 *
 *     -  From the grammar source file : predicates_test/C.g
 *     -                            On : 2013-06-03 19:31:14
 *     -                 for the lexer : CLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "CLexer.hpp"
/* ----------------------------------------- */




/** String literals used by CLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR_UCHAR	lit_1[]  = { 0x21, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_2[]  = { 0x25, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_3[]  = { 0x26, 0x26,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_4[]  = { 0x26, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_5[]  = { 0x2A, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_6[]  = { 0x2B, 0x2B,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_7[]  = { 0x2B, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_8[]  = { 0x2D, 0x2D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_9[]  = { 0x2D, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_10[]  = { 0x2D, 0x3E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_11[]  = { 0x2E, 0x2E, 0x2E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_12[]  = { 0x2F, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_13[]  = { 0x3C, 0x3C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_14[]  = { 0x3C, 0x3C, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_15[]  = { 0x3C, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_16[]  = { 0x3D, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_17[]  = { 0x3E, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_18[]  = { 0x3E, 0x3E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_19[]  = { 0x3E, 0x3E, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_20[]  = { 0x5E, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_21[]  = { 0x61, 0x75, 0x74, 0x6F,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_22[]  = { 0x62, 0x72, 0x65, 0x61, 0x6B,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_23[]  = { 0x63, 0x61, 0x73, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_24[]  = { 0x63, 0x68, 0x61, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_25[]  = { 0x63, 0x6F, 0x6E, 0x73, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_26[]  = { 0x63, 0x6F, 0x6E, 0x74, 0x69, 0x6E, 0x75, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_27[]  = { 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_28[]  = { 0x64, 0x6F,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_29[]  = { 0x64, 0x6F, 0x75, 0x62, 0x6C, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_30[]  = { 0x65, 0x6C, 0x73, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_31[]  = { 0x65, 0x6E, 0x75, 0x6D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_32[]  = { 0x65, 0x78, 0x74, 0x65, 0x72, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_33[]  = { 0x66, 0x6C, 0x6F, 0x61, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_34[]  = { 0x66, 0x6F, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_35[]  = { 0x67, 0x6F, 0x74, 0x6F,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_36[]  = { 0x69, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_37[]  = { 0x69, 0x6E, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_38[]  = { 0x6C, 0x6F, 0x6E, 0x67,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_39[]  = { 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_40[]  = { 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_41[]  = { 0x73, 0x68, 0x6F, 0x72, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_42[]  = { 0x73, 0x69, 0x67, 0x6E, 0x65, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_43[]  = { 0x73, 0x69, 0x7A, 0x65, 0x6F, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_44[]  = { 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_45[]  = { 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_46[]  = { 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_47[]  = { 0x74, 0x79, 0x70, 0x65, 0x64, 0x65, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_48[]  = { 0x75, 0x6E, 0x69, 0x6F, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_49[]  = { 0x75, 0x6E, 0x73, 0x69, 0x67, 0x6E, 0x65, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_50[]  = { 0x76, 0x6F, 0x69, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_51[]  = { 0x76, 0x6F, 0x6C, 0x61, 0x74, 0x69, 0x6C, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_52[]  = { 0x77, 0x68, 0x69, 0x6C, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_53[]  = { 0x7C, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_54[]  = { 0x7C, 0x7C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_55[]  = { 0x2F, 0x2A,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_56[]  = { 0x2A, 0x2F,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_57[]  = { 0x2F, 0x2F,  antlr3::ANTLR_STRING_TERMINATOR};



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;


/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



CLexer::~CLexer()
{
}

void
CLexer::reset()
{
    this->get_rec()->reset();
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "predicates_test/C.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* CLexer::getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called CLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pCLexer initialized for the lex start
 *     - Fail NULL
 */
CLexer::CLexer(StreamType* instream)
:CLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	// See if we can create a new lexer with the standard constructor
	//
	this->init(instream );
}

/** \brief Create a new lexer called CLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pCLexer initialized for the lex start
 *     - Fail NULL
 */
CLexer::CLexer(StreamType* instream, RecognizerSharedStateType* state)
:CLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void CLexer::init(StreamType* instream)
{
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in CLexer.h here so you can get a sense
     * of what goes where.
     */

}


/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    518:1: FLOATING_POINT_LITERAL : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( Exponent )? ( FloatTypeSuffix )? | '.' ( '0' .. '9' )+ ( Exponent )? ( FloatTypeSuffix )? | ( '0' .. '9' )+ Exponent ( FloatTypeSuffix )? | ( '0' .. '9' )+ ( Exponent )? FloatTypeSuffix );
 */
static const ANTLR_INT32 dfa25_eot[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, 8, -1, -1
    };
static const ANTLR_INT32 dfa25_eof[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa25_min[10] =
    {
	46, 46, -1, -1, 43, -1, 48, 48, -1, -1
    };
static const ANTLR_INT32 dfa25_max[10] =
    {
	57, 102, -1, -1, 57, -1, 57, 102, -1, -1
    };
static const ANTLR_INT32 dfa25_accept[10] =
    {
	-1, -1, 2, 1, -1, 4, -1, -1, 3, 3
    };
static const ANTLR_INT32 dfa25_special[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa25_T_empty	 =   NULL;

static const ANTLR_INT32 dfa25_T0[] =
    {
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 
	-1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, 9
    };
static const ANTLR_INT32 dfa25_T1[] =
    {
	6, -1, 6, -1, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
    };
static const ANTLR_INT32 dfa25_T2[] =
    {
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7
    };
static const ANTLR_INT32 dfa25_T3[] =
    {
	3, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 4, 5
    };
static const ANTLR_INT32 dfa25_T4[] =
    {
	2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa25_transitions[] =
{
    dfa25_T4, dfa25_T3, NULL, NULL, dfa25_T1, NULL, dfa25_T2, dfa25_T0, 
    NULL, NULL
};


/* Declare tracking structure for Cyclic DFA 25
 */
class CLexerCyclicDFA25 : public CyclicDFA< CLexerImplTraits, CLexer >, public CLexerTokens
{
public:
	typedef CyclicDFA< CLexerImplTraits, CLexer >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	CLexerCyclicDFA25( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static CLexerCyclicDFA25  cdfa25(
	    25,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"518:1: FLOATING_POINT_LITERAL : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( Exponent )? ( FloatTypeSuffix )? | '.' ( '0' .. '9' )+ ( Exponent )? ( FloatTypeSuffix )? | ( '0' .. '9' )+ Exponent ( FloatTypeSuffix )? | ( '0' .. '9' )+ ( Exponent )? FloatTypeSuffix );",
	    dfa25_eot,	    /* EOT table			    */
	    dfa25_eof,	    /* EOF table			    */
	    dfa25_min,	    /* Minimum tokens for each state    */
	    dfa25_max,	    /* Maximum tokens for each state    */
	    dfa25_accept,	/* Accept table			    */
	    dfa25_special,	/* Special transition states	    */
	    dfa25_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 25
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | IDENTIFIER | CHARACTER_LITERAL | STRING_LITERAL | HEX_LITERAL | DECIMAL_LITERAL | OCTAL_LITERAL | FLOATING_POINT_LITERAL | WS | COMMENT | LINE_COMMENT | LINE_COMMAND );
 */
static const ANTLR_INT32 dfa35_eot[250] =
    {
	-1, 48, 50, 53, -1, -1, 55, 58, -1, 62, 64, 69, -1, -1, 72, 74, 77, -1, 
	-1, -1, 79, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
	-1, 107, -1, -1, -1, -1, -1, 109, 109, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 113, 
	-1, -1, -1, -1, -1, 115, -1, -1, -1, 40, 40, 40, 40, 40, 40, 123, 40, 40, 
	40, 40, 40, 40, 130, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, -1, -1, 
	-1, -1, -1, 147, 109, -1, -1, -1, -1, 40, 40, 40, 40, 40, 40, 40, -1, 40, 
	40, 40, 40, 160, 40, -1, 162, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, -1, 178, 40, 180, 181, 40, 40, 40, 40, 186, 187, 40, 40, 
	-1, 190, -1, 191, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 203, 40, 
	40, -1, 206, -1, -1, 207, 40, 40, 40, -1, -1, 40, 212, -1, -1, 40, 40, 
	215, 40, 40, 40, 40, 40, 40, 222, 40, -1, 40, 225, -1, -1, 40, 40, 228, 
	229, -1, 40, 231, -1, 232, 233, 234, 235, 236, 40, -1, 40, 40, -1, 40, 
	241, -1, -1, 40, -1, -1, -1, -1, -1, -1, 243, 40, 40, 246, -1, 247, -1, 
	248, 249, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa35_eof[250] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa35_min[250] =
    {
	9, 61, 61, 38, -1, -1, 61, 43, -1, 45, 46, 42, -1, -1, 60, 61, 61, -1, 
	-1, -1, 61, 117, 114, 97, 101, 108, 108, 111, 102, 111, 101, 104, 121, 
	110, 111, 104, -1, 61, -1, -1, -1, -1, -1, 46, 46, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 61, -1, -1, -1, -1, -1, 61, -1, -1, -1, 116, 101, 115, 97, 110, 
	102, 36, 115, 117, 116, 111, 114, 116, 36, 116, 110, 103, 111, 103, 97, 
	105, 112, 105, 105, 105, -1, -1, -1, -1, -1, 46, 46, -1, -1, -1, -1, 111, 
	97, 101, 114, 115, 97, 98, -1, 101, 109, 101, 97, 36, 111, -1, 36, 103, 
	105, 117, 114, 110, 101, 116, 117, 116, 101, 111, 105, 100, 97, 108, -1, 
	36, 107, 36, 36, 116, 105, 117, 108, 36, 36, 114, 116, -1, 36, -1, 36, 
	115, 114, 116, 101, 111, 105, 99, 99, 100, 110, 103, 36, 116, 101, -1, 
	36, -1, -1, 36, 110, 108, 101, -1, -1, 110, 36, -1, -1, 116, 110, 36, 100, 
	102, 99, 116, 104, 101, 36, 110, -1, 105, 36, -1, -1, 117, 116, 36, 36, 
	-1, 101, 36, -1, 36, 36, 36, 36, 36, 102, -1, 101, 108, -1, 101, 36, -1, 
	-1, 114, -1, -1, -1, -1, -1, -1, 36, 100, 101, 36, -1, 36, -1, 36, 36, 
	-1, -1, -1, -1
    };
static const ANTLR_INT32 dfa35_max[250] =
    {
	126, 61, 61, 61, -1, -1, 61, 61, -1, 62, 57, 61, -1, -1, 61, 61, 62, -1, 
	-1, -1, 61, 117, 114, 111, 111, 120, 111, 111, 110, 111, 101, 119, 121, 
	110, 111, 104, -1, 124, -1, -1, -1, -1, -1, 120, 102, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 61, -1, -1, -1, -1, -1, 61, -1, -1, -1, 116, 101, 115, 97, 110, 
	102, 122, 115, 117, 116, 111, 114, 116, 122, 116, 110, 116, 111, 122, 114, 
	105, 112, 115, 108, 105, -1, -1, -1, -1, -1, 102, 102, -1, -1, -1, -1, 
	111, 97, 101, 114, 116, 97, 98, -1, 101, 109, 101, 97, 122, 111, -1, 122, 
	103, 105, 117, 114, 110, 101, 116, 117, 116, 101, 111, 105, 100, 97, 108, 
	-1, 122, 107, 122, 122, 116, 105, 117, 108, 122, 122, 114, 116, -1, 122, 
	-1, 122, 115, 114, 116, 101, 111, 105, 99, 99, 100, 110, 103, 122, 116, 
	101, -1, 122, -1, -1, 122, 110, 108, 101, -1, -1, 110, 122, -1, -1, 116, 
	110, 122, 100, 102, 99, 116, 104, 101, 122, 110, -1, 105, 122, -1, -1, 
	117, 116, 122, 122, -1, 101, 122, -1, 122, 122, 122, 122, 122, 102, -1, 
	101, 108, -1, 101, 122, -1, -1, 114, -1, -1, -1, -1, -1, -1, 122, 100, 
	101, 122, -1, 122, -1, 122, 122, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa35_accept[250] =
    {
	-1, -1, -1, -1, 8, 9, -1, -1, 15, -1, -1, -1, 24, 25, -1, -1, -1, 36, 37, 
	38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, 
	-1, 77, 78, 79, 80, 81, -1, -1, 86, 89, 2, 1, 4, 3, 5, 7, 6, 11, 10, 13, 
	14, 12, 17, 18, 19, 16, 21, 20, 85, 23, 87, 88, 22, -1, 29, 26, 31, 30, 
	33, -1, 32, 40, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 76, 74, 82, 83, -1, 
	-1, 28, 27, 35, 34, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, 
	-1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, 57, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, 43, 44, -1, 
	-1, -1, -1, 50, 51, -1, -1, 55, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 70, -1, -1, 42, 45, -1, -1, -1, -1, 53, -1, -1, 61, -1, -1, -1, 
	-1, -1, -1, 68, -1, -1, 72, -1, -1, 49, 52, -1, 60, 62, 63, 64, 65, 66, 
	-1, -1, -1, -1, 47, -1, 67, -1, -1, 46, 59, 69, 71
    };
static const ANTLR_INT32 dfa35_special[250] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa35_T_empty	 =   NULL;

static const ANTLR_INT32 dfa35_T0[] =
    {
	128
    };
static const ANTLR_INT32 dfa35_T1[] =
    {
	95
    };
static const ANTLR_INT32 dfa35_T2[] =
    {
	80
    };
static const ANTLR_INT32 dfa35_T3[] =
    {
	127
    };
static const ANTLR_INT32 dfa35_T4[] =
    {
	159
    };
static const ANTLR_INT32 dfa35_T5[] =
    {
	40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, -1, -1, -1, -1, -1, -1, -1, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
	40, -1, -1, -1, -1, 40, -1, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40
    };
static const ANTLR_INT32 dfa35_T6[] =
    {
	81
    };
static const ANTLR_INT32 dfa35_T7[] =
    {
	189
    };
static const ANTLR_INT32 dfa35_T8[] =
    {
	188
    };
static const ANTLR_INT32 dfa35_T9[] =
    {
	158
    };
static const ANTLR_INT32 dfa35_T10[] =
    {
	126
    };
static const ANTLR_INT32 dfa35_T11[] =
    {
	54
    };
static const ANTLR_INT32 dfa35_T12[] =
    {
	136, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 137
    };
static const ANTLR_INT32 dfa35_T13[] =
    {
	211
    };
static const ANTLR_INT32 dfa35_T14[] =
    {
	157
    };
static const ANTLR_INT32 dfa35_T15[] =
    {
	125
    };
static const ANTLR_INT32 dfa35_T16[] =
    {
	75, 76
    };
static const ANTLR_INT32 dfa35_T17[] =
    {
	133, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 134
    };
static const ANTLR_INT32 dfa35_T18[] =
    {
	164
    };
static const ANTLR_INT32 dfa35_T19[] =
    {
	192
    };
static const ANTLR_INT32 dfa35_T20[] =
    {
	213
    };
static const ANTLR_INT32 dfa35_T21[] =
    {
	230
    };
static const ANTLR_INT32 dfa35_T22[] =
    {
	242
    };
static const ANTLR_INT32 dfa35_T23[] =
    {
	132
    };
static const ANTLR_INT32 dfa35_T24[] =
    {
	163
    };
static const ANTLR_INT32 dfa35_T25[] =
    {
	131
    };
static const ANTLR_INT32 dfa35_T26[] =
    {
	96
    };
static const ANTLR_INT32 dfa35_T27[] =
    {
	161
    };
static const ANTLR_INT32 dfa35_T28[] =
    {
	129
    };
static const ANTLR_INT32 dfa35_T29[] =
    {
	226
    };
static const ANTLR_INT32 dfa35_T30[] =
    {
	240
    };
static const ANTLR_INT32 dfa35_T31[] =
    {
	183
    };
static const ANTLR_INT32 dfa35_T32[] =
    {
	208
    };
static const ANTLR_INT32 dfa35_T33[] =
    {
	182
    };
static const ANTLR_INT32 dfa35_T34[] =
    {
	138, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139
    };
static const ANTLR_INT32 dfa35_T35[] =
    {
	93, -1, -1, -1, -1, -1, -1, -1, 94
    };
static const ANTLR_INT32 dfa35_T36[] =
    {
	65, -1, 110, 110, 110, 110, 110, 110, 110, 110, 65, 65, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 65, 65, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 65, 65, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 108
    };
static const ANTLR_INT32 dfa35_T37[] =
    {
	151
    };
static const ANTLR_INT32 dfa35_T38[] =
    {
	119
    };
static const ANTLR_INT32 dfa35_T39[] =
    {
	150
    };
static const ANTLR_INT32 dfa35_T40[] =
    {
	118
    };
static const ANTLR_INT32 dfa35_T41[] =
    {
	156
    };
static const ANTLR_INT32 dfa35_T42[] =
    {
	124
    };
static const ANTLR_INT32 dfa35_T43[] =
    {
	185
    };
static const ANTLR_INT32 dfa35_T44[] =
    {
	210
    };
static const ANTLR_INT32 dfa35_T45[] =
    {
	90, -1, -1, 91
    };
static const ANTLR_INT32 dfa35_T46[] =
    {
	155
    };
static const ANTLR_INT32 dfa35_T47[] =
    {
	78
    };
static const ANTLR_INT32 dfa35_T48[] =
    {
	92
    };
static const ANTLR_INT32 dfa35_T49[] =
    {
	184
    };
static const ANTLR_INT32 dfa35_T50[] =
    {
	154
    };
static const ANTLR_INT32 dfa35_T51[] =
    {
	227
    };
static const ANTLR_INT32 dfa35_T52[] =
    {
	209
    };
static const ANTLR_INT32 dfa35_T53[] =
    {
	121
    };
static const ANTLR_INT32 dfa35_T54[] =
    {
	49
    };
static const ANTLR_INT32 dfa35_T55[] =
    {
	223
    };
static const ANTLR_INT32 dfa35_T56[] =
    {
	202
    };
static const ANTLR_INT32 dfa35_T57[] =
    {
	174
    };
static const ANTLR_INT32 dfa35_T58[] =
    {
	244
    };
static const ANTLR_INT32 dfa35_T59[] =
    {
	104
    };
static const ANTLR_INT32 dfa35_T60[] =
    {
	238
    };
static const ANTLR_INT32 dfa35_T61[] =
    {
	40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, -1, -1, -1, -1, -1, -1, -1, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
	40, -1, -1, -1, -1, 40, -1, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 40, 122, 40, 40, 40, 40, 40
    };
static const ANTLR_INT32 dfa35_T62[] =
    {
	141
    };
static const ANTLR_INT32 dfa35_T63[] =
    {
	172
    };
static const ANTLR_INT32 dfa35_T64[] =
    {
	114
    };
static const ANTLR_INT32 dfa35_T65[] =
    {
	237
    };
static const ANTLR_INT32 dfa35_T66[] =
    {
	102
    };
static const ANTLR_INT32 dfa35_T67[] =
    {
	200
    };
static const ANTLR_INT32 dfa35_T68[] =
    {
	221
    };
static const ANTLR_INT32 dfa35_T69[] =
    {
	201
    };
static const ANTLR_INT32 dfa35_T70[] =
    {
	173
    };
static const ANTLR_INT32 dfa35_T71[] =
    {
	47
    };
static const ANTLR_INT32 dfa35_T72[] =
    {
	146
    };
static const ANTLR_INT32 dfa35_T73[] =
    {
	205
    };
static const ANTLR_INT32 dfa35_T74[] =
    {
	177
    };
static const ANTLR_INT32 dfa35_T75[] =
    {
	82, -1, -1, -1, -1, -1, -1, 83, -1, -1, -1, -1, -1, -1, 84
    };
static const ANTLR_INT32 dfa35_T76[] =
    {
	175
    };
static const ANTLR_INT32 dfa35_T77[] =
    {
	176
    };
static const ANTLR_INT32 dfa35_T78[] =
    {
	204
    };
static const ANTLR_INT32 dfa35_T79[] =
    {
	224
    };
static const ANTLR_INT32 dfa35_T80[] =
    {
	239
    };
static const ANTLR_INT32 dfa35_T81[] =
    {
	245
    };
static const ANTLR_INT32 dfa35_T82[] =
    {
	70, 71
    };
static const ANTLR_INT32 dfa35_T83[] =
    {
	195
    };
static const ANTLR_INT32 dfa35_T84[] =
    {
	167
    };
static const ANTLR_INT32 dfa35_T85[] =
    {
	168
    };
static const ANTLR_INT32 dfa35_T86[] =
    {
	216
    };
static const ANTLR_INT32 dfa35_T87[] =
    {
	193
    };
static const ANTLR_INT32 dfa35_T88[] =
    {
	214
    };
static const ANTLR_INT32 dfa35_T89[] =
    {
	165
    };
static const ANTLR_INT32 dfa35_T90[] =
    {
	166
    };
static const ANTLR_INT32 dfa35_T91[] =
    {
	194
    };
static const ANTLR_INT32 dfa35_T92[] =
    {
	135
    };
static const ANTLR_INT32 dfa35_T93[] =
    {
	101
    };
static const ANTLR_INT32 dfa35_T94[] =
    {
	73
    };
static const ANTLR_INT32 dfa35_T95[] =
    {
	45, 45, -1, 45, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 45, 1, 42, 46, 40, 2, 3, 41, 4, 5, 6, 7, 8, 9, 10, 
	11, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 12, 13, 14, 15, 16, 17, -1, 
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 18, -1, 19, 20, 40, -1, 21, 22, 23, 24, 
	25, 26, 27, 40, 28, 40, 40, 29, 40, 40, 40, 40, 40, 30, 31, 32, 33, 34, 
	35, 40, 40, 40, 36, 37, 38, 39
    };
static const ANTLR_INT32 dfa35_T96[] =
    {
	170
    };
static const ANTLR_INT32 dfa35_T97[] =
    {
	219
    };
static const ANTLR_INT32 dfa35_T98[] =
    {
	198
    };
static const ANTLR_INT32 dfa35_T99[] =
    {
	220
    };
static const ANTLR_INT32 dfa35_T100[] =
    {
	140
    };
static const ANTLR_INT32 dfa35_T101[] =
    {
	199
    };
static const ANTLR_INT32 dfa35_T102[] =
    {
	171
    };
static const ANTLR_INT32 dfa35_T103[] =
    {
	196
    };
static const ANTLR_INT32 dfa35_T104[] =
    {
	217
    };
static const ANTLR_INT32 dfa35_T105[] =
    {
	169
    };
static const ANTLR_INT32 dfa35_T106[] =
    {
	197
    };
static const ANTLR_INT32 dfa35_T107[] =
    {
	218
    };
static const ANTLR_INT32 dfa35_T108[] =
    {
	120
    };
static const ANTLR_INT32 dfa35_T109[] =
    {
	152, 153
    };
static const ANTLR_INT32 dfa35_T110[] =
    {
	85, -1, -1, -1, -1, -1, -1, -1, -1, -1, 86
    };
static const ANTLR_INT32 dfa35_T111[] =
    {
	103
    };
static const ANTLR_INT32 dfa35_T112[] =
    {
	56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	57
    };
static const ANTLR_INT32 dfa35_T113[] =
    {
	105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 106
    };
static const ANTLR_INT32 dfa35_T114[] =
    {
	112
    };
static const ANTLR_INT32 dfa35_T115[] =
    {
	65, -1, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 65, 65, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 65, 65, 65
    };
static const ANTLR_INT32 dfa35_T116[] =
    {
	63, -1, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65
    };
static const ANTLR_INT32 dfa35_T117[] =
    {
	116
    };
static const ANTLR_INT32 dfa35_T118[] =
    {
	97, 98, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 99, -1, -1, 100
    };
static const ANTLR_INT32 dfa35_T119[] =
    {
	148
    };
static const ANTLR_INT32 dfa35_T120[] =
    {
	149
    };
static const ANTLR_INT32 dfa35_T121[] =
    {
	117
    };
static const ANTLR_INT32 dfa35_T122[] =
    {
	142, -1, -1, -1, -1, -1, -1, -1, -1, -1, 143
    };
static const ANTLR_INT32 dfa35_T123[] =
    {
	179
    };
static const ANTLR_INT32 dfa35_T124[] =
    {
	144, -1, -1, 145
    };
static const ANTLR_INT32 dfa35_T125[] =
    {
	65, -1, 110, 110, 110, 110, 110, 110, 110, 110, 65, 65, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 65, 65, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 65, 65, 65
    };
static const ANTLR_INT32 dfa35_T126[] =
    {
	87, -1, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1, 89
    };
static const ANTLR_INT32 dfa35_T127[] =
    {
	67, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 66
    };
static const ANTLR_INT32 dfa35_T128[] =
    {
	51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 52
    };
static const ANTLR_INT32 dfa35_T129[] =
    {
	59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 61
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa35_transitions[] =
{
    dfa35_T95, dfa35_T71, dfa35_T54, dfa35_T128, NULL, NULL, dfa35_T11, 
    dfa35_T112, NULL, dfa35_T129, dfa35_T116, dfa35_T127, NULL, NULL, dfa35_T82, 
    dfa35_T94, dfa35_T16, NULL, NULL, NULL, dfa35_T47, dfa35_T2, dfa35_T6, 
    dfa35_T75, dfa35_T110, dfa35_T126, dfa35_T45, dfa35_T48, dfa35_T35, 
    dfa35_T1, dfa35_T26, dfa35_T118, dfa35_T93, dfa35_T66, dfa35_T111, dfa35_T59, 
    NULL, dfa35_T113, NULL, NULL, NULL, NULL, NULL, dfa35_T36, dfa35_T115, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, dfa35_T114, NULL, NULL, NULL, NULL, NULL, dfa35_T64, NULL, NULL, 
    NULL, dfa35_T117, dfa35_T121, dfa35_T40, dfa35_T38, dfa35_T108, dfa35_T53, 
    dfa35_T61, dfa35_T42, dfa35_T15, dfa35_T10, dfa35_T3, dfa35_T0, dfa35_T28, 
    dfa35_T5, dfa35_T25, dfa35_T23, dfa35_T17, dfa35_T92, dfa35_T12, dfa35_T34, 
    dfa35_T100, dfa35_T62, dfa35_T122, dfa35_T124, dfa35_T72, NULL, NULL, 
    NULL, NULL, NULL, dfa35_T125, dfa35_T115, NULL, NULL, NULL, NULL, dfa35_T119, 
    dfa35_T120, dfa35_T39, dfa35_T37, dfa35_T109, dfa35_T50, dfa35_T46, 
    NULL, dfa35_T41, dfa35_T14, dfa35_T9, dfa35_T4, dfa35_T5, dfa35_T27, 
    NULL, dfa35_T5, dfa35_T24, dfa35_T18, dfa35_T89, dfa35_T90, dfa35_T84, 
    dfa35_T85, dfa35_T105, dfa35_T96, dfa35_T102, dfa35_T63, dfa35_T70, 
    dfa35_T57, dfa35_T76, dfa35_T77, dfa35_T74, NULL, dfa35_T5, dfa35_T123, 
    dfa35_T5, dfa35_T5, dfa35_T33, dfa35_T31, dfa35_T49, dfa35_T43, dfa35_T5, 
    dfa35_T5, dfa35_T8, dfa35_T7, NULL, dfa35_T5, NULL, dfa35_T5, dfa35_T19, 
    dfa35_T87, dfa35_T91, dfa35_T83, dfa35_T103, dfa35_T106, dfa35_T98, 
    dfa35_T101, dfa35_T67, dfa35_T69, dfa35_T56, dfa35_T5, dfa35_T78, dfa35_T73, 
    NULL, dfa35_T5, NULL, NULL, dfa35_T5, dfa35_T32, dfa35_T52, dfa35_T44, 
    NULL, NULL, dfa35_T13, dfa35_T5, NULL, NULL, dfa35_T20, dfa35_T88, dfa35_T5, 
    dfa35_T86, dfa35_T104, dfa35_T107, dfa35_T97, dfa35_T99, dfa35_T68, 
    dfa35_T5, dfa35_T55, NULL, dfa35_T79, dfa35_T5, NULL, NULL, dfa35_T29, 
    dfa35_T51, dfa35_T5, dfa35_T5, NULL, dfa35_T21, dfa35_T5, NULL, dfa35_T5, 
    dfa35_T5, dfa35_T5, dfa35_T5, dfa35_T5, dfa35_T65, NULL, dfa35_T60, 
    dfa35_T80, NULL, dfa35_T30, dfa35_T5, NULL, NULL, dfa35_T22, NULL, NULL, 
    NULL, NULL, NULL, NULL, dfa35_T5, dfa35_T58, dfa35_T81, dfa35_T5, NULL, 
    dfa35_T5, NULL, dfa35_T5, dfa35_T5, NULL, NULL, NULL, NULL
};


/* Declare tracking structure for Cyclic DFA 35
 */
class CLexerCyclicDFA35 : public CyclicDFA< CLexerImplTraits, CLexer >, public CLexerTokens
{
public:
	typedef CyclicDFA< CLexerImplTraits, CLexer >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	CLexerCyclicDFA35( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static CLexerCyclicDFA35  cdfa35(
	    35,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"1:1: Tokens : ( T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | IDENTIFIER | CHARACTER_LITERAL | STRING_LITERAL | HEX_LITERAL | DECIMAL_LITERAL | OCTAL_LITERAL | FLOATING_POINT_LITERAL | WS | COMMENT | LINE_COMMENT | LINE_COMMAND );",
	    dfa35_eot,	    /* EOT table			    */
	    dfa35_eof,	    /* EOF table			    */
	    dfa35_min,	    /* Minimum tokens for each state    */
	    dfa35_max,	    /* Maximum tokens for each state    */
	    dfa35_accept,	/* Accept table			    */
	    dfa35_special,	/* Special transition states	    */
	    dfa35_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 35
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 19:7: ( '!' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__23
 *
 * Looks to match the characters the constitute the token T__23
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__23()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__23;


    // predicates_test/C.g:19:7: ( '!' )
    // predicates_test/C.g:19:9: '!'
    {
         this->matchc('!');
        if  (this->hasException())
        {
            goto ruleT__23Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__23Ex; /* Prevent compiler warnings */
    ruleT__23Ex: ;

}
// $ANTLR end T__23

//   Comes from: 20:7: ( '!=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__24
 *
 * Looks to match the characters the constitute the token T__24
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__24()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__24;


    // predicates_test/C.g:20:7: ( '!=' )
    // predicates_test/C.g:20:9: '!='
    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleT__24Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__24Ex; /* Prevent compiler warnings */
    ruleT__24Ex: ;

}
// $ANTLR end T__24

//   Comes from: 21:7: ( '%' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__25
 *
 * Looks to match the characters the constitute the token T__25
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__25()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__25;


    // predicates_test/C.g:21:7: ( '%' )
    // predicates_test/C.g:21:9: '%'
    {
         this->matchc('%');
        if  (this->hasException())
        {
            goto ruleT__25Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__25Ex; /* Prevent compiler warnings */
    ruleT__25Ex: ;

}
// $ANTLR end T__25

//   Comes from: 22:7: ( '%=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__26
 *
 * Looks to match the characters the constitute the token T__26
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__26()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__26;


    // predicates_test/C.g:22:7: ( '%=' )
    // predicates_test/C.g:22:9: '%='
    {
        this->matchs(lit_2);
        if  (this->hasException())
        {
            goto ruleT__26Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__26Ex; /* Prevent compiler warnings */
    ruleT__26Ex: ;

}
// $ANTLR end T__26

//   Comes from: 23:7: ( '&&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__27
 *
 * Looks to match the characters the constitute the token T__27
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__27()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__27;


    // predicates_test/C.g:23:7: ( '&&' )
    // predicates_test/C.g:23:9: '&&'
    {
        this->matchs(lit_3);
        if  (this->hasException())
        {
            goto ruleT__27Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__27Ex; /* Prevent compiler warnings */
    ruleT__27Ex: ;

}
// $ANTLR end T__27

//   Comes from: 24:7: ( '&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__28
 *
 * Looks to match the characters the constitute the token T__28
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__28()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__28;


    // predicates_test/C.g:24:7: ( '&' )
    // predicates_test/C.g:24:9: '&'
    {
         this->matchc('&');
        if  (this->hasException())
        {
            goto ruleT__28Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__28Ex; /* Prevent compiler warnings */
    ruleT__28Ex: ;

}
// $ANTLR end T__28

//   Comes from: 25:7: ( '&=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__29
 *
 * Looks to match the characters the constitute the token T__29
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__29()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__29;


    // predicates_test/C.g:25:7: ( '&=' )
    // predicates_test/C.g:25:9: '&='
    {
        this->matchs(lit_4);
        if  (this->hasException())
        {
            goto ruleT__29Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__29Ex; /* Prevent compiler warnings */
    ruleT__29Ex: ;

}
// $ANTLR end T__29

//   Comes from: 26:7: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__30
 *
 * Looks to match the characters the constitute the token T__30
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__30()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__30;


    // predicates_test/C.g:26:7: ( '(' )
    // predicates_test/C.g:26:9: '('
    {
         this->matchc('(');
        if  (this->hasException())
        {
            goto ruleT__30Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__30Ex; /* Prevent compiler warnings */
    ruleT__30Ex: ;

}
// $ANTLR end T__30

//   Comes from: 27:7: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__31
 *
 * Looks to match the characters the constitute the token T__31
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__31()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__31;


    // predicates_test/C.g:27:7: ( ')' )
    // predicates_test/C.g:27:9: ')'
    {
         this->matchc(')');
        if  (this->hasException())
        {
            goto ruleT__31Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__31Ex; /* Prevent compiler warnings */
    ruleT__31Ex: ;

}
// $ANTLR end T__31

//   Comes from: 28:7: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__32
 *
 * Looks to match the characters the constitute the token T__32
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__32()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__32;


    // predicates_test/C.g:28:7: ( '*' )
    // predicates_test/C.g:28:9: '*'
    {
         this->matchc('*');
        if  (this->hasException())
        {
            goto ruleT__32Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__32Ex; /* Prevent compiler warnings */
    ruleT__32Ex: ;

}
// $ANTLR end T__32

//   Comes from: 29:7: ( '*=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__33
 *
 * Looks to match the characters the constitute the token T__33
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__33()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__33;


    // predicates_test/C.g:29:7: ( '*=' )
    // predicates_test/C.g:29:9: '*='
    {
        this->matchs(lit_5);
        if  (this->hasException())
        {
            goto ruleT__33Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__33Ex; /* Prevent compiler warnings */
    ruleT__33Ex: ;

}
// $ANTLR end T__33

//   Comes from: 30:7: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__34
 *
 * Looks to match the characters the constitute the token T__34
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__34()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__34;


    // predicates_test/C.g:30:7: ( '+' )
    // predicates_test/C.g:30:9: '+'
    {
         this->matchc('+');
        if  (this->hasException())
        {
            goto ruleT__34Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__34Ex; /* Prevent compiler warnings */
    ruleT__34Ex: ;

}
// $ANTLR end T__34

//   Comes from: 31:7: ( '++' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__35
 *
 * Looks to match the characters the constitute the token T__35
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__35()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__35;


    // predicates_test/C.g:31:7: ( '++' )
    // predicates_test/C.g:31:9: '++'
    {
        this->matchs(lit_6);
        if  (this->hasException())
        {
            goto ruleT__35Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__35Ex; /* Prevent compiler warnings */
    ruleT__35Ex: ;

}
// $ANTLR end T__35

//   Comes from: 32:7: ( '+=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__36
 *
 * Looks to match the characters the constitute the token T__36
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__36()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__36;


    // predicates_test/C.g:32:7: ( '+=' )
    // predicates_test/C.g:32:9: '+='
    {
        this->matchs(lit_7);
        if  (this->hasException())
        {
            goto ruleT__36Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__36Ex; /* Prevent compiler warnings */
    ruleT__36Ex: ;

}
// $ANTLR end T__36

//   Comes from: 33:7: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__37
 *
 * Looks to match the characters the constitute the token T__37
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__37()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__37;


    // predicates_test/C.g:33:7: ( ',' )
    // predicates_test/C.g:33:9: ','
    {
         this->matchc(',');
        if  (this->hasException())
        {
            goto ruleT__37Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__37Ex; /* Prevent compiler warnings */
    ruleT__37Ex: ;

}
// $ANTLR end T__37

//   Comes from: 34:7: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__38
 *
 * Looks to match the characters the constitute the token T__38
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__38()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__38;


    // predicates_test/C.g:34:7: ( '-' )
    // predicates_test/C.g:34:9: '-'
    {
         this->matchc('-');
        if  (this->hasException())
        {
            goto ruleT__38Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__38Ex; /* Prevent compiler warnings */
    ruleT__38Ex: ;

}
// $ANTLR end T__38

//   Comes from: 35:7: ( '--' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__39
 *
 * Looks to match the characters the constitute the token T__39
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__39()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__39;


    // predicates_test/C.g:35:7: ( '--' )
    // predicates_test/C.g:35:9: '--'
    {
        this->matchs(lit_8);
        if  (this->hasException())
        {
            goto ruleT__39Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__39Ex; /* Prevent compiler warnings */
    ruleT__39Ex: ;

}
// $ANTLR end T__39

//   Comes from: 36:7: ( '-=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__40
 *
 * Looks to match the characters the constitute the token T__40
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__40()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__40;


    // predicates_test/C.g:36:7: ( '-=' )
    // predicates_test/C.g:36:9: '-='
    {
        this->matchs(lit_9);
        if  (this->hasException())
        {
            goto ruleT__40Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__40Ex; /* Prevent compiler warnings */
    ruleT__40Ex: ;

}
// $ANTLR end T__40

//   Comes from: 37:7: ( '->' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__41
 *
 * Looks to match the characters the constitute the token T__41
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__41()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__41;


    // predicates_test/C.g:37:7: ( '->' )
    // predicates_test/C.g:37:9: '->'
    {
        this->matchs(lit_10);
        if  (this->hasException())
        {
            goto ruleT__41Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__41Ex; /* Prevent compiler warnings */
    ruleT__41Ex: ;

}
// $ANTLR end T__41

//   Comes from: 38:7: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__42
 *
 * Looks to match the characters the constitute the token T__42
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__42()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__42;


    // predicates_test/C.g:38:7: ( '.' )
    // predicates_test/C.g:38:9: '.'
    {
         this->matchc('.');
        if  (this->hasException())
        {
            goto ruleT__42Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__42Ex; /* Prevent compiler warnings */
    ruleT__42Ex: ;

}
// $ANTLR end T__42

//   Comes from: 39:7: ( '...' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__43
 *
 * Looks to match the characters the constitute the token T__43
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__43()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__43;


    // predicates_test/C.g:39:7: ( '...' )
    // predicates_test/C.g:39:9: '...'
    {
        this->matchs(lit_11);
        if  (this->hasException())
        {
            goto ruleT__43Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__43Ex; /* Prevent compiler warnings */
    ruleT__43Ex: ;

}
// $ANTLR end T__43

//   Comes from: 40:7: ( '/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__44
 *
 * Looks to match the characters the constitute the token T__44
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__44()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__44;


    // predicates_test/C.g:40:7: ( '/' )
    // predicates_test/C.g:40:9: '/'
    {
         this->matchc('/');
        if  (this->hasException())
        {
            goto ruleT__44Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__44Ex; /* Prevent compiler warnings */
    ruleT__44Ex: ;

}
// $ANTLR end T__44

//   Comes from: 41:7: ( '/=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__45
 *
 * Looks to match the characters the constitute the token T__45
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__45()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__45;


    // predicates_test/C.g:41:7: ( '/=' )
    // predicates_test/C.g:41:9: '/='
    {
        this->matchs(lit_12);
        if  (this->hasException())
        {
            goto ruleT__45Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__45Ex; /* Prevent compiler warnings */
    ruleT__45Ex: ;

}
// $ANTLR end T__45

//   Comes from: 42:7: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__46
 *
 * Looks to match the characters the constitute the token T__46
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__46()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__46;


    // predicates_test/C.g:42:7: ( ':' )
    // predicates_test/C.g:42:9: ':'
    {
         this->matchc(':');
        if  (this->hasException())
        {
            goto ruleT__46Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__46Ex; /* Prevent compiler warnings */
    ruleT__46Ex: ;

}
// $ANTLR end T__46

//   Comes from: 43:7: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__47
 *
 * Looks to match the characters the constitute the token T__47
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__47()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__47;


    // predicates_test/C.g:43:7: ( ';' )
    // predicates_test/C.g:43:9: ';'
    {
         this->matchc(';');
        if  (this->hasException())
        {
            goto ruleT__47Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__47Ex; /* Prevent compiler warnings */
    ruleT__47Ex: ;

}
// $ANTLR end T__47

//   Comes from: 44:7: ( '<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__48
 *
 * Looks to match the characters the constitute the token T__48
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__48()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__48;


    // predicates_test/C.g:44:7: ( '<' )
    // predicates_test/C.g:44:9: '<'
    {
         this->matchc('<');
        if  (this->hasException())
        {
            goto ruleT__48Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__48Ex; /* Prevent compiler warnings */
    ruleT__48Ex: ;

}
// $ANTLR end T__48

//   Comes from: 45:7: ( '<<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__49
 *
 * Looks to match the characters the constitute the token T__49
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__49()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__49;


    // predicates_test/C.g:45:7: ( '<<' )
    // predicates_test/C.g:45:9: '<<'
    {
        this->matchs(lit_13);
        if  (this->hasException())
        {
            goto ruleT__49Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__49Ex; /* Prevent compiler warnings */
    ruleT__49Ex: ;

}
// $ANTLR end T__49

//   Comes from: 46:7: ( '<<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__50
 *
 * Looks to match the characters the constitute the token T__50
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__50()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__50;


    // predicates_test/C.g:46:7: ( '<<=' )
    // predicates_test/C.g:46:9: '<<='
    {
        this->matchs(lit_14);
        if  (this->hasException())
        {
            goto ruleT__50Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__50Ex; /* Prevent compiler warnings */
    ruleT__50Ex: ;

}
// $ANTLR end T__50

//   Comes from: 47:7: ( '<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__51
 *
 * Looks to match the characters the constitute the token T__51
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__51()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__51;


    // predicates_test/C.g:47:7: ( '<=' )
    // predicates_test/C.g:47:9: '<='
    {
        this->matchs(lit_15);
        if  (this->hasException())
        {
            goto ruleT__51Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__51Ex; /* Prevent compiler warnings */
    ruleT__51Ex: ;

}
// $ANTLR end T__51

//   Comes from: 48:7: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__52
 *
 * Looks to match the characters the constitute the token T__52
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__52()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__52;


    // predicates_test/C.g:48:7: ( '=' )
    // predicates_test/C.g:48:9: '='
    {
         this->matchc('=');
        if  (this->hasException())
        {
            goto ruleT__52Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__52Ex; /* Prevent compiler warnings */
    ruleT__52Ex: ;

}
// $ANTLR end T__52

//   Comes from: 49:7: ( '==' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__53
 *
 * Looks to match the characters the constitute the token T__53
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__53()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__53;


    // predicates_test/C.g:49:7: ( '==' )
    // predicates_test/C.g:49:9: '=='
    {
        this->matchs(lit_16);
        if  (this->hasException())
        {
            goto ruleT__53Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__53Ex; /* Prevent compiler warnings */
    ruleT__53Ex: ;

}
// $ANTLR end T__53

//   Comes from: 50:7: ( '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__54
 *
 * Looks to match the characters the constitute the token T__54
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__54()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__54;


    // predicates_test/C.g:50:7: ( '>' )
    // predicates_test/C.g:50:9: '>'
    {
         this->matchc('>');
        if  (this->hasException())
        {
            goto ruleT__54Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__54Ex; /* Prevent compiler warnings */
    ruleT__54Ex: ;

}
// $ANTLR end T__54

//   Comes from: 51:7: ( '>=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__55
 *
 * Looks to match the characters the constitute the token T__55
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__55()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__55;


    // predicates_test/C.g:51:7: ( '>=' )
    // predicates_test/C.g:51:9: '>='
    {
        this->matchs(lit_17);
        if  (this->hasException())
        {
            goto ruleT__55Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__55Ex; /* Prevent compiler warnings */
    ruleT__55Ex: ;

}
// $ANTLR end T__55

//   Comes from: 52:7: ( '>>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__56
 *
 * Looks to match the characters the constitute the token T__56
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__56()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__56;


    // predicates_test/C.g:52:7: ( '>>' )
    // predicates_test/C.g:52:9: '>>'
    {
        this->matchs(lit_18);
        if  (this->hasException())
        {
            goto ruleT__56Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__56Ex; /* Prevent compiler warnings */
    ruleT__56Ex: ;

}
// $ANTLR end T__56

//   Comes from: 53:7: ( '>>=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__57
 *
 * Looks to match the characters the constitute the token T__57
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__57()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__57;


    // predicates_test/C.g:53:7: ( '>>=' )
    // predicates_test/C.g:53:9: '>>='
    {
        this->matchs(lit_19);
        if  (this->hasException())
        {
            goto ruleT__57Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__57Ex; /* Prevent compiler warnings */
    ruleT__57Ex: ;

}
// $ANTLR end T__57

//   Comes from: 54:7: ( '?' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__58
 *
 * Looks to match the characters the constitute the token T__58
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__58()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__58;


    // predicates_test/C.g:54:7: ( '?' )
    // predicates_test/C.g:54:9: '?'
    {
         this->matchc('?');
        if  (this->hasException())
        {
            goto ruleT__58Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__58Ex; /* Prevent compiler warnings */
    ruleT__58Ex: ;

}
// $ANTLR end T__58

//   Comes from: 55:7: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__59
 *
 * Looks to match the characters the constitute the token T__59
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__59()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__59;


    // predicates_test/C.g:55:7: ( '[' )
    // predicates_test/C.g:55:9: '['
    {
         this->matchc('[');
        if  (this->hasException())
        {
            goto ruleT__59Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__59Ex; /* Prevent compiler warnings */
    ruleT__59Ex: ;

}
// $ANTLR end T__59

//   Comes from: 56:7: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__60
 *
 * Looks to match the characters the constitute the token T__60
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__60()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__60;


    // predicates_test/C.g:56:7: ( ']' )
    // predicates_test/C.g:56:9: ']'
    {
         this->matchc(']');
        if  (this->hasException())
        {
            goto ruleT__60Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__60Ex; /* Prevent compiler warnings */
    ruleT__60Ex: ;

}
// $ANTLR end T__60

//   Comes from: 57:7: ( '^' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__61
 *
 * Looks to match the characters the constitute the token T__61
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__61()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__61;


    // predicates_test/C.g:57:7: ( '^' )
    // predicates_test/C.g:57:9: '^'
    {
         this->matchc('^');
        if  (this->hasException())
        {
            goto ruleT__61Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__61Ex; /* Prevent compiler warnings */
    ruleT__61Ex: ;

}
// $ANTLR end T__61

//   Comes from: 58:7: ( '^=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__62
 *
 * Looks to match the characters the constitute the token T__62
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__62()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__62;


    // predicates_test/C.g:58:7: ( '^=' )
    // predicates_test/C.g:58:9: '^='
    {
        this->matchs(lit_20);
        if  (this->hasException())
        {
            goto ruleT__62Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__62Ex; /* Prevent compiler warnings */
    ruleT__62Ex: ;

}
// $ANTLR end T__62

//   Comes from: 59:7: ( 'auto' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__63
 *
 * Looks to match the characters the constitute the token T__63
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__63()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__63;


    // predicates_test/C.g:59:7: ( 'auto' )
    // predicates_test/C.g:59:9: 'auto'
    {
        this->matchs(lit_21);
        if  (this->hasException())
        {
            goto ruleT__63Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__63Ex; /* Prevent compiler warnings */
    ruleT__63Ex: ;

}
// $ANTLR end T__63

//   Comes from: 60:7: ( 'break' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__64
 *
 * Looks to match the characters the constitute the token T__64
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__64()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__64;


    // predicates_test/C.g:60:7: ( 'break' )
    // predicates_test/C.g:60:9: 'break'
    {
        this->matchs(lit_22);
        if  (this->hasException())
        {
            goto ruleT__64Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__64Ex; /* Prevent compiler warnings */
    ruleT__64Ex: ;

}
// $ANTLR end T__64

//   Comes from: 61:7: ( 'case' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__65
 *
 * Looks to match the characters the constitute the token T__65
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__65()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__65;


    // predicates_test/C.g:61:7: ( 'case' )
    // predicates_test/C.g:61:9: 'case'
    {
        this->matchs(lit_23);
        if  (this->hasException())
        {
            goto ruleT__65Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__65Ex; /* Prevent compiler warnings */
    ruleT__65Ex: ;

}
// $ANTLR end T__65

//   Comes from: 62:7: ( 'char' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__66
 *
 * Looks to match the characters the constitute the token T__66
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__66()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__66;


    // predicates_test/C.g:62:7: ( 'char' )
    // predicates_test/C.g:62:9: 'char'
    {
        this->matchs(lit_24);
        if  (this->hasException())
        {
            goto ruleT__66Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__66Ex; /* Prevent compiler warnings */
    ruleT__66Ex: ;

}
// $ANTLR end T__66

//   Comes from: 63:7: ( 'const' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__67
 *
 * Looks to match the characters the constitute the token T__67
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__67()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__67;


    // predicates_test/C.g:63:7: ( 'const' )
    // predicates_test/C.g:63:9: 'const'
    {
        this->matchs(lit_25);
        if  (this->hasException())
        {
            goto ruleT__67Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__67Ex; /* Prevent compiler warnings */
    ruleT__67Ex: ;

}
// $ANTLR end T__67

//   Comes from: 64:7: ( 'continue' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__68
 *
 * Looks to match the characters the constitute the token T__68
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__68()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__68;


    // predicates_test/C.g:64:7: ( 'continue' )
    // predicates_test/C.g:64:9: 'continue'
    {
        this->matchs(lit_26);
        if  (this->hasException())
        {
            goto ruleT__68Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__68Ex; /* Prevent compiler warnings */
    ruleT__68Ex: ;

}
// $ANTLR end T__68

//   Comes from: 65:7: ( 'default' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__69
 *
 * Looks to match the characters the constitute the token T__69
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__69()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__69;


    // predicates_test/C.g:65:7: ( 'default' )
    // predicates_test/C.g:65:9: 'default'
    {
        this->matchs(lit_27);
        if  (this->hasException())
        {
            goto ruleT__69Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__69Ex; /* Prevent compiler warnings */
    ruleT__69Ex: ;

}
// $ANTLR end T__69

//   Comes from: 66:7: ( 'do' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__70
 *
 * Looks to match the characters the constitute the token T__70
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__70()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__70;


    // predicates_test/C.g:66:7: ( 'do' )
    // predicates_test/C.g:66:9: 'do'
    {
        this->matchs(lit_28);
        if  (this->hasException())
        {
            goto ruleT__70Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__70Ex; /* Prevent compiler warnings */
    ruleT__70Ex: ;

}
// $ANTLR end T__70

//   Comes from: 67:7: ( 'double' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__71
 *
 * Looks to match the characters the constitute the token T__71
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__71()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__71;


    // predicates_test/C.g:67:7: ( 'double' )
    // predicates_test/C.g:67:9: 'double'
    {
        this->matchs(lit_29);
        if  (this->hasException())
        {
            goto ruleT__71Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__71Ex; /* Prevent compiler warnings */
    ruleT__71Ex: ;

}
// $ANTLR end T__71

//   Comes from: 68:7: ( 'else' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__72
 *
 * Looks to match the characters the constitute the token T__72
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__72()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__72;


    // predicates_test/C.g:68:7: ( 'else' )
    // predicates_test/C.g:68:9: 'else'
    {
        this->matchs(lit_30);
        if  (this->hasException())
        {
            goto ruleT__72Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__72Ex; /* Prevent compiler warnings */
    ruleT__72Ex: ;

}
// $ANTLR end T__72

//   Comes from: 69:7: ( 'enum' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__73
 *
 * Looks to match the characters the constitute the token T__73
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__73()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__73;


    // predicates_test/C.g:69:7: ( 'enum' )
    // predicates_test/C.g:69:9: 'enum'
    {
        this->matchs(lit_31);
        if  (this->hasException())
        {
            goto ruleT__73Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__73Ex; /* Prevent compiler warnings */
    ruleT__73Ex: ;

}
// $ANTLR end T__73

//   Comes from: 70:7: ( 'extern' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__74
 *
 * Looks to match the characters the constitute the token T__74
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__74()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__74;


    // predicates_test/C.g:70:7: ( 'extern' )
    // predicates_test/C.g:70:9: 'extern'
    {
        this->matchs(lit_32);
        if  (this->hasException())
        {
            goto ruleT__74Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__74Ex; /* Prevent compiler warnings */
    ruleT__74Ex: ;

}
// $ANTLR end T__74

//   Comes from: 71:7: ( 'float' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__75
 *
 * Looks to match the characters the constitute the token T__75
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__75()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__75;


    // predicates_test/C.g:71:7: ( 'float' )
    // predicates_test/C.g:71:9: 'float'
    {
        this->matchs(lit_33);
        if  (this->hasException())
        {
            goto ruleT__75Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__75Ex; /* Prevent compiler warnings */
    ruleT__75Ex: ;

}
// $ANTLR end T__75

//   Comes from: 72:7: ( 'for' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__76
 *
 * Looks to match the characters the constitute the token T__76
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__76()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__76;


    // predicates_test/C.g:72:7: ( 'for' )
    // predicates_test/C.g:72:9: 'for'
    {
        this->matchs(lit_34);
        if  (this->hasException())
        {
            goto ruleT__76Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__76Ex; /* Prevent compiler warnings */
    ruleT__76Ex: ;

}
// $ANTLR end T__76

//   Comes from: 73:7: ( 'goto' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__77
 *
 * Looks to match the characters the constitute the token T__77
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__77()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__77;


    // predicates_test/C.g:73:7: ( 'goto' )
    // predicates_test/C.g:73:9: 'goto'
    {
        this->matchs(lit_35);
        if  (this->hasException())
        {
            goto ruleT__77Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__77Ex; /* Prevent compiler warnings */
    ruleT__77Ex: ;

}
// $ANTLR end T__77

//   Comes from: 74:7: ( 'if' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__78
 *
 * Looks to match the characters the constitute the token T__78
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__78()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__78;


    // predicates_test/C.g:74:7: ( 'if' )
    // predicates_test/C.g:74:9: 'if'
    {
        this->matchs(lit_36);
        if  (this->hasException())
        {
            goto ruleT__78Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__78Ex; /* Prevent compiler warnings */
    ruleT__78Ex: ;

}
// $ANTLR end T__78

//   Comes from: 75:7: ( 'int' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__79
 *
 * Looks to match the characters the constitute the token T__79
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__79()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__79;


    // predicates_test/C.g:75:7: ( 'int' )
    // predicates_test/C.g:75:9: 'int'
    {
        this->matchs(lit_37);
        if  (this->hasException())
        {
            goto ruleT__79Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__79Ex; /* Prevent compiler warnings */
    ruleT__79Ex: ;

}
// $ANTLR end T__79

//   Comes from: 76:7: ( 'long' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__80
 *
 * Looks to match the characters the constitute the token T__80
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__80()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__80;


    // predicates_test/C.g:76:7: ( 'long' )
    // predicates_test/C.g:76:9: 'long'
    {
        this->matchs(lit_38);
        if  (this->hasException())
        {
            goto ruleT__80Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__80Ex; /* Prevent compiler warnings */
    ruleT__80Ex: ;

}
// $ANTLR end T__80

//   Comes from: 77:7: ( 'register' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__81
 *
 * Looks to match the characters the constitute the token T__81
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__81()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__81;


    // predicates_test/C.g:77:7: ( 'register' )
    // predicates_test/C.g:77:9: 'register'
    {
        this->matchs(lit_39);
        if  (this->hasException())
        {
            goto ruleT__81Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__81Ex; /* Prevent compiler warnings */
    ruleT__81Ex: ;

}
// $ANTLR end T__81

//   Comes from: 78:7: ( 'return' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__82
 *
 * Looks to match the characters the constitute the token T__82
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__82()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__82;


    // predicates_test/C.g:78:7: ( 'return' )
    // predicates_test/C.g:78:9: 'return'
    {
        this->matchs(lit_40);
        if  (this->hasException())
        {
            goto ruleT__82Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__82Ex; /* Prevent compiler warnings */
    ruleT__82Ex: ;

}
// $ANTLR end T__82

//   Comes from: 79:7: ( 'short' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__83
 *
 * Looks to match the characters the constitute the token T__83
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__83()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__83;


    // predicates_test/C.g:79:7: ( 'short' )
    // predicates_test/C.g:79:9: 'short'
    {
        this->matchs(lit_41);
        if  (this->hasException())
        {
            goto ruleT__83Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__83Ex; /* Prevent compiler warnings */
    ruleT__83Ex: ;

}
// $ANTLR end T__83

//   Comes from: 80:7: ( 'signed' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__84
 *
 * Looks to match the characters the constitute the token T__84
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__84()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__84;


    // predicates_test/C.g:80:7: ( 'signed' )
    // predicates_test/C.g:80:9: 'signed'
    {
        this->matchs(lit_42);
        if  (this->hasException())
        {
            goto ruleT__84Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__84Ex; /* Prevent compiler warnings */
    ruleT__84Ex: ;

}
// $ANTLR end T__84

//   Comes from: 81:7: ( 'sizeof' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__85
 *
 * Looks to match the characters the constitute the token T__85
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__85()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__85;


    // predicates_test/C.g:81:7: ( 'sizeof' )
    // predicates_test/C.g:81:9: 'sizeof'
    {
        this->matchs(lit_43);
        if  (this->hasException())
        {
            goto ruleT__85Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__85Ex; /* Prevent compiler warnings */
    ruleT__85Ex: ;

}
// $ANTLR end T__85

//   Comes from: 82:7: ( 'static' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__86
 *
 * Looks to match the characters the constitute the token T__86
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__86()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__86;


    // predicates_test/C.g:82:7: ( 'static' )
    // predicates_test/C.g:82:9: 'static'
    {
        this->matchs(lit_44);
        if  (this->hasException())
        {
            goto ruleT__86Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__86Ex; /* Prevent compiler warnings */
    ruleT__86Ex: ;

}
// $ANTLR end T__86

//   Comes from: 83:7: ( 'struct' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__87
 *
 * Looks to match the characters the constitute the token T__87
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__87()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__87;


    // predicates_test/C.g:83:7: ( 'struct' )
    // predicates_test/C.g:83:9: 'struct'
    {
        this->matchs(lit_45);
        if  (this->hasException())
        {
            goto ruleT__87Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__87Ex; /* Prevent compiler warnings */
    ruleT__87Ex: ;

}
// $ANTLR end T__87

//   Comes from: 84:7: ( 'switch' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__88
 *
 * Looks to match the characters the constitute the token T__88
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__88()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__88;


    // predicates_test/C.g:84:7: ( 'switch' )
    // predicates_test/C.g:84:9: 'switch'
    {
        this->matchs(lit_46);
        if  (this->hasException())
        {
            goto ruleT__88Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__88Ex; /* Prevent compiler warnings */
    ruleT__88Ex: ;

}
// $ANTLR end T__88

//   Comes from: 85:7: ( 'typedef' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__89
 *
 * Looks to match the characters the constitute the token T__89
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__89()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__89;


    // predicates_test/C.g:85:7: ( 'typedef' )
    // predicates_test/C.g:85:9: 'typedef'
    {
        this->matchs(lit_47);
        if  (this->hasException())
        {
            goto ruleT__89Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__89Ex; /* Prevent compiler warnings */
    ruleT__89Ex: ;

}
// $ANTLR end T__89

//   Comes from: 86:7: ( 'union' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__90
 *
 * Looks to match the characters the constitute the token T__90
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__90()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__90;


    // predicates_test/C.g:86:7: ( 'union' )
    // predicates_test/C.g:86:9: 'union'
    {
        this->matchs(lit_48);
        if  (this->hasException())
        {
            goto ruleT__90Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__90Ex; /* Prevent compiler warnings */
    ruleT__90Ex: ;

}
// $ANTLR end T__90

//   Comes from: 87:7: ( 'unsigned' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__91
 *
 * Looks to match the characters the constitute the token T__91
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__91()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__91;


    // predicates_test/C.g:87:7: ( 'unsigned' )
    // predicates_test/C.g:87:9: 'unsigned'
    {
        this->matchs(lit_49);
        if  (this->hasException())
        {
            goto ruleT__91Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__91Ex; /* Prevent compiler warnings */
    ruleT__91Ex: ;

}
// $ANTLR end T__91

//   Comes from: 88:7: ( 'void' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__92
 *
 * Looks to match the characters the constitute the token T__92
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__92()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__92;


    // predicates_test/C.g:88:7: ( 'void' )
    // predicates_test/C.g:88:9: 'void'
    {
        this->matchs(lit_50);
        if  (this->hasException())
        {
            goto ruleT__92Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__92Ex; /* Prevent compiler warnings */
    ruleT__92Ex: ;

}
// $ANTLR end T__92

//   Comes from: 89:7: ( 'volatile' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__93
 *
 * Looks to match the characters the constitute the token T__93
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__93()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__93;


    // predicates_test/C.g:89:7: ( 'volatile' )
    // predicates_test/C.g:89:9: 'volatile'
    {
        this->matchs(lit_51);
        if  (this->hasException())
        {
            goto ruleT__93Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__93Ex; /* Prevent compiler warnings */
    ruleT__93Ex: ;

}
// $ANTLR end T__93

//   Comes from: 90:7: ( 'while' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__94
 *
 * Looks to match the characters the constitute the token T__94
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__94()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__94;


    // predicates_test/C.g:90:7: ( 'while' )
    // predicates_test/C.g:90:9: 'while'
    {
        this->matchs(lit_52);
        if  (this->hasException())
        {
            goto ruleT__94Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__94Ex; /* Prevent compiler warnings */
    ruleT__94Ex: ;

}
// $ANTLR end T__94

//   Comes from: 91:7: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__95
 *
 * Looks to match the characters the constitute the token T__95
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__95()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__95;


    // predicates_test/C.g:91:7: ( '{' )
    // predicates_test/C.g:91:9: '{'
    {
         this->matchc('{');
        if  (this->hasException())
        {
            goto ruleT__95Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__95Ex; /* Prevent compiler warnings */
    ruleT__95Ex: ;

}
// $ANTLR end T__95

//   Comes from: 92:7: ( '|' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__96
 *
 * Looks to match the characters the constitute the token T__96
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__96()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__96;


    // predicates_test/C.g:92:7: ( '|' )
    // predicates_test/C.g:92:9: '|'
    {
         this->matchc('|');
        if  (this->hasException())
        {
            goto ruleT__96Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__96Ex; /* Prevent compiler warnings */
    ruleT__96Ex: ;

}
// $ANTLR end T__96

//   Comes from: 93:7: ( '|=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__97
 *
 * Looks to match the characters the constitute the token T__97
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__97()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__97;


    // predicates_test/C.g:93:7: ( '|=' )
    // predicates_test/C.g:93:9: '|='
    {
        this->matchs(lit_53);
        if  (this->hasException())
        {
            goto ruleT__97Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__97Ex; /* Prevent compiler warnings */
    ruleT__97Ex: ;

}
// $ANTLR end T__97

//   Comes from: 94:7: ( '||' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__98
 *
 * Looks to match the characters the constitute the token T__98
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__98()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__98;


    // predicates_test/C.g:94:7: ( '||' )
    // predicates_test/C.g:94:9: '||'
    {
        this->matchs(lit_54);
        if  (this->hasException())
        {
            goto ruleT__98Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__98Ex; /* Prevent compiler warnings */
    ruleT__98Ex: ;

}
// $ANTLR end T__98

//   Comes from: 95:7: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__99
 *
 * Looks to match the characters the constitute the token T__99
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__99()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__99;


    // predicates_test/C.g:95:7: ( '}' )
    // predicates_test/C.g:95:9: '}'
    {
         this->matchc('}');
        if  (this->hasException())
        {
            goto ruleT__99Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__99Ex; /* Prevent compiler warnings */
    ruleT__99Ex: ;

}
// $ANTLR end T__99

//   Comes from: 96:8: ( '~' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__100
 *
 * Looks to match the characters the constitute the token T__100
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mT__100()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__100;


    // predicates_test/C.g:96:8: ( '~' )
    // predicates_test/C.g:96:10: '~'
    {
         this->matchc('~');
        if  (this->hasException())
        {
            goto ruleT__100Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__100Ex; /* Prevent compiler warnings */
    ruleT__100Ex: ;

}
// $ANTLR end T__100

//   Comes from: 484:2: ( LETTER ( LETTER | '0' .. '9' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IDENTIFIER
 *
 * Looks to match the characters the constitute the token IDENTIFIER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mIDENTIFIER()
{
    ANTLR_UINT32	_type;
      


    _type	    = IDENTIFIER;


    // predicates_test/C.g:484:2: ( LETTER ( LETTER | '0' .. '9' )* )
    // predicates_test/C.g:484:4: LETTER ( LETTER | '0' .. '9' )*
    {
        /* 484:4: LETTER ( LETTER | '0' .. '9' )* */
        mLETTER();
        if  (this->hasException())
        {
            goto ruleIDENTIFIEREx;
        }



        // predicates_test/C.g:484:11: ( LETTER | '0' .. '9' )*

        for (;;)
        {
            int alt1=2;
            switch ( this->LA(1) )
            {
            case '$':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt1=1;
            	}
                break;

            }

            switch (alt1)
            {
        	case 1:
        	    // predicates_test/C.g:
        	    {
        	        if ( this->LA(1) == '$' || ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleIDENTIFIEREx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop1;	/* break out of the loop */
        	    break;
            }
        }
        loop1: ; /* Jump out to here if this rule does not match */


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIDENTIFIEREx; /* Prevent compiler warnings */
    ruleIDENTIFIEREx: ;

}
// $ANTLR end IDENTIFIER

//   Comes from: 490:2: ( '$' | 'A' .. 'Z' | 'a' .. 'z' | '_' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LETTER
 *
 * Looks to match the characters the constitute the token LETTER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mLETTER()
{
    ANTLR_UINT32	_type;
      



    // predicates_test/C.g:490:2: ( '$' | 'A' .. 'Z' | 'a' .. 'z' | '_' )
    // predicates_test/C.g:
    {
        if ( this->LA(1) == '$' || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleLETTEREx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleLETTEREx; /* Prevent compiler warnings */
    ruleLETTEREx: ;

}
// $ANTLR end LETTER

//   Comes from: 496:5: ( '\\'' ( EscapeSequence |~ ( '\\'' | '\\\\' ) ) '\\'' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CHARACTER_LITERAL
 *
 * Looks to match the characters the constitute the token CHARACTER_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mCHARACTER_LITERAL()
{
    ANTLR_UINT32	_type;
      


    _type	    = CHARACTER_LITERAL;


    // predicates_test/C.g:496:5: ( '\\'' ( EscapeSequence |~ ( '\\'' | '\\\\' ) ) '\\'' )
    // predicates_test/C.g:496:9: '\\'' ( EscapeSequence |~ ( '\\'' | '\\\\' ) ) '\\''
    {
         this->matchc('\'');
        if  (this->hasException())
        {
            goto ruleCHARACTER_LITERALEx;
        }


        // predicates_test/C.g:496:14: ( EscapeSequence |~ ( '\\'' | '\\\\' ) )
        {
            int alt2=2;
            {
                int LA2_0 = this->LA(1);
                if ( (LA2_0 == '\\'))
                {
                    alt2=1;
                }
                else if ( (((LA2_0 >= 0x0000) && (LA2_0 <= '&')) || ((LA2_0 >= '(') && (LA2_0 <= '[')) || ((LA2_0 >= ']') && (LA2_0 <= 0xFFFF))))
                {
                    alt2=2;
                }
                else
                {

                    ExceptionBaseType* ex = new ANTLR_Exception< CLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 2 );
                    ex->set_state( 0 );


                    goto ruleCHARACTER_LITERALEx;

                }
            }
            switch (alt2)
            {
        	case 1:
        	    // predicates_test/C.g:496:16: EscapeSequence
        	    {
        	        /* 496:16: EscapeSequence */
        	        mEscapeSequence();
        	        if  (this->hasException())
        	        {
        	            goto ruleCHARACTER_LITERALEx;
        	        }



        	    }
        	    break;
        	case 2:
        	    // predicates_test/C.g:496:33: ~ ( '\\'' | '\\\\' )
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '&')) || ((this->LA(1) >= '(') && (this->LA(1) <= '[')) || ((this->LA(1) >= ']') && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleCHARACTER_LITERALEx;
        	        }


        	    }
        	    break;

            }
        }

         this->matchc('\'');
        if  (this->hasException())
        {
            goto ruleCHARACTER_LITERALEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCHARACTER_LITERALEx; /* Prevent compiler warnings */
    ruleCHARACTER_LITERALEx: ;

}
// $ANTLR end CHARACTER_LITERAL

//   Comes from: 500:5: ( '\"' ( EscapeSequence |~ ( '\\\\' | '\"' ) )* '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING_LITERAL
 *
 * Looks to match the characters the constitute the token STRING_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mSTRING_LITERAL()
{
    ANTLR_UINT32	_type;
      


    _type	    = STRING_LITERAL;


    // predicates_test/C.g:500:5: ( '\"' ( EscapeSequence |~ ( '\\\\' | '\"' ) )* '\"' )
    // predicates_test/C.g:500:8: '\"' ( EscapeSequence |~ ( '\\\\' | '\"' ) )* '\"'
    {
         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleSTRING_LITERALEx;
        }


        // predicates_test/C.g:500:12: ( EscapeSequence |~ ( '\\\\' | '\"' ) )*

        for (;;)
        {
            int alt3=3;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA3_0 = this->LA(1);
                if ( (LA3_0 == '\\'))
                {
                    alt3=1;
                }
                else if ( (((LA3_0 >= 0x0000) && (LA3_0 <= '!')) || ((LA3_0 >= '#') && (LA3_0 <= '[')) || ((LA3_0 >= ']') && (LA3_0 <= 0xFFFF))))
                {
                    alt3=2;
                }

            }
            switch (alt3)
            {
        	case 1:
        	    // predicates_test/C.g:500:14: EscapeSequence
        	    {
        	        /* 500:14: EscapeSequence */
        	        mEscapeSequence();
        	        if  (this->hasException())
        	        {
        	            goto ruleSTRING_LITERALEx;
        	        }



        	    }
        	    break;
        	case 2:
        	    // predicates_test/C.g:500:31: ~ ( '\\\\' | '\"' )
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '!')) || ((this->LA(1) >= '#') && (this->LA(1) <= '[')) || ((this->LA(1) >= ']') && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleSTRING_LITERALEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop3;	/* break out of the loop */
        	    break;
            }
        }
        loop3: ; /* Jump out to here if this rule does not match */


         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleSTRING_LITERALEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSTRING_LITERALEx; /* Prevent compiler warnings */
    ruleSTRING_LITERALEx: ;

}
// $ANTLR end STRING_LITERAL

//   Comes from: 503:13: ( '0' ( 'x' | 'X' ) ( HexDigit )+ ( IntegerTypeSuffix )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HEX_LITERAL
 *
 * Looks to match the characters the constitute the token HEX_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mHEX_LITERAL()
{
    ANTLR_UINT32	_type;
      


    _type	    = HEX_LITERAL;


    // predicates_test/C.g:503:13: ( '0' ( 'x' | 'X' ) ( HexDigit )+ ( IntegerTypeSuffix )? )
    // predicates_test/C.g:503:15: '0' ( 'x' | 'X' ) ( HexDigit )+ ( IntegerTypeSuffix )?
    {
         this->matchc('0');
        if  (this->hasException())
        {
            goto ruleHEX_LITERALEx;
        }


        if ( this->LA(1) == 'X' || this->LA(1) == 'x' )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleHEX_LITERALEx;
        }


        // predicates_test/C.g:503:29: ( HexDigit )+
        {
            int cnt4=0;

            for (;;)
            {
                int alt4=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        	case 'A':
        	case 'B':
        	case 'C':
        	case 'D':
        	case 'E':
        	case 'F':
        	case 'a':
        	case 'b':
        	case 'c':
        	case 'd':
        	case 'e':
        	case 'f':
        		{
        			alt4=1;
        		}
        	    break;

        	}

        	switch (alt4)
        	{
        	    case 1:
        	        // predicates_test/C.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'F')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'f')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleHEX_LITERALEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt4 >= 1 )
        		{
        		    goto loop4;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleHEX_LITERALEx;
        	}
        	cnt4++;
            }
            loop4: ;	/* Jump to here if this rule does not match */
        }

        // predicates_test/C.g:503:39: ( IntegerTypeSuffix )?
        {
            int alt5=2;
            switch ( this->LA(1) )
            {
                case 'L':
                case 'U':
                case 'l':
                case 'u':
                	{
                		alt5=1;
                	}
                    break;
            }

            switch (alt5)
            {
        	case 1:
        	    // predicates_test/C.g:503:39: IntegerTypeSuffix
        	    {
        	        /* 503:39: IntegerTypeSuffix */
        	        mIntegerTypeSuffix();
        	        if  (this->hasException())
        	        {
        	            goto ruleHEX_LITERALEx;
        	        }



        	    }
        	    break;

            }
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleHEX_LITERALEx; /* Prevent compiler warnings */
    ruleHEX_LITERALEx: ;

}
// $ANTLR end HEX_LITERAL

//   Comes from: 505:17: ( ( '0' | '1' .. '9' ( '0' .. '9' )* ) ( IntegerTypeSuffix )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DECIMAL_LITERAL
 *
 * Looks to match the characters the constitute the token DECIMAL_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mDECIMAL_LITERAL()
{
    ANTLR_UINT32	_type;
      


    _type	    = DECIMAL_LITERAL;


    // predicates_test/C.g:505:17: ( ( '0' | '1' .. '9' ( '0' .. '9' )* ) ( IntegerTypeSuffix )? )
    // predicates_test/C.g:505:19: ( '0' | '1' .. '9' ( '0' .. '9' )* ) ( IntegerTypeSuffix )?
    {
        // predicates_test/C.g:505:19: ( '0' | '1' .. '9' ( '0' .. '9' )* )
        {
            int alt7=2;
            switch ( this->LA(1) )
            {
            case '0':
            	{
            		alt7=1;
            	}
                break;
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            	{
            		alt7=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< CLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 7 );
                ex->set_state( 0 );


                goto ruleDECIMAL_LITERALEx;

            }

            switch (alt7)
            {
        	case 1:
        	    // predicates_test/C.g:505:20: '0'
        	    {
        	         this->matchc('0');
        	        if  (this->hasException())
        	        {
        	            goto ruleDECIMAL_LITERALEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // predicates_test/C.g:505:26: '1' .. '9' ( '0' .. '9' )*
        	    {
        	        this->matchRange('1', '9');
        	        if  (this->hasException())
        	        {
        	            goto ruleDECIMAL_LITERALEx;
        	        }


        	        // predicates_test/C.g:505:35: ( '0' .. '9' )*

        	        for (;;)
        	        {
        	            int alt6=2;
        	            switch ( this->LA(1) )
        	            {
        	            case '0':
        	            case '1':
        	            case '2':
        	            case '3':
        	            case '4':
        	            case '5':
        	            case '6':
        	            case '7':
        	            case '8':
        	            case '9':
        	            	{
        	            		alt6=1;
        	            	}
        	                break;

        	            }

        	            switch (alt6)
        	            {
        	        	case 1:
        	        	    // predicates_test/C.g:
        	        	    {
        	        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	        	        {
        	        	            this->consume();
        	        	        }
        	        	        else
        	        	        {
        	        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	        	            this->recover();
        	        	            goto ruleDECIMAL_LITERALEx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop6;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop6: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }

        // predicates_test/C.g:505:46: ( IntegerTypeSuffix )?
        {
            int alt8=2;
            switch ( this->LA(1) )
            {
                case 'L':
                case 'U':
                case 'l':
                case 'u':
                	{
                		alt8=1;
                	}
                    break;
            }

            switch (alt8)
            {
        	case 1:
        	    // predicates_test/C.g:505:46: IntegerTypeSuffix
        	    {
        	        /* 505:46: IntegerTypeSuffix */
        	        mIntegerTypeSuffix();
        	        if  (this->hasException())
        	        {
        	            goto ruleDECIMAL_LITERALEx;
        	        }



        	    }
        	    break;

            }
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDECIMAL_LITERALEx; /* Prevent compiler warnings */
    ruleDECIMAL_LITERALEx: ;

}
// $ANTLR end DECIMAL_LITERAL

//   Comes from: 507:15: ( '0' ( '0' .. '7' )+ ( IntegerTypeSuffix )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OCTAL_LITERAL
 *
 * Looks to match the characters the constitute the token OCTAL_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mOCTAL_LITERAL()
{
    ANTLR_UINT32	_type;
      


    _type	    = OCTAL_LITERAL;


    // predicates_test/C.g:507:15: ( '0' ( '0' .. '7' )+ ( IntegerTypeSuffix )? )
    // predicates_test/C.g:507:17: '0' ( '0' .. '7' )+ ( IntegerTypeSuffix )?
    {
         this->matchc('0');
        if  (this->hasException())
        {
            goto ruleOCTAL_LITERALEx;
        }


        // predicates_test/C.g:507:21: ( '0' .. '7' )+
        {
            int cnt9=0;

            for (;;)
            {
                int alt9=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        		{
        			alt9=1;
        		}
        	    break;

        	}

        	switch (alt9)
        	{
        	    case 1:
        	        // predicates_test/C.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleOCTAL_LITERALEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt9 >= 1 )
        		{
        		    goto loop9;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleOCTAL_LITERALEx;
        	}
        	cnt9++;
            }
            loop9: ;	/* Jump to here if this rule does not match */
        }

        // predicates_test/C.g:507:33: ( IntegerTypeSuffix )?
        {
            int alt10=2;
            switch ( this->LA(1) )
            {
                case 'L':
                case 'U':
                case 'l':
                case 'u':
                	{
                		alt10=1;
                	}
                    break;
            }

            switch (alt10)
            {
        	case 1:
        	    // predicates_test/C.g:507:33: IntegerTypeSuffix
        	    {
        	        /* 507:33: IntegerTypeSuffix */
        	        mIntegerTypeSuffix();
        	        if  (this->hasException())
        	        {
        	            goto ruleOCTAL_LITERALEx;
        	        }



        	    }
        	    break;

            }
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOCTAL_LITERALEx; /* Prevent compiler warnings */
    ruleOCTAL_LITERALEx: ;

}
// $ANTLR end OCTAL_LITERAL

//   Comes from: 511:10: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HexDigit
 *
 * Looks to match the characters the constitute the token HexDigit
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mHexDigit()
{
    ANTLR_UINT32	_type;
      



    // predicates_test/C.g:511:10: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    // predicates_test/C.g:
    {
        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'F')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'f')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleHexDigitEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleHexDigitEx; /* Prevent compiler warnings */
    ruleHexDigitEx: ;

}
// $ANTLR end HexDigit

//   Comes from: 515:2: ( ( 'u' | 'U' )? ( 'l' | 'L' ) | ( 'u' | 'U' ) ( 'l' | 'L' )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IntegerTypeSuffix
 *
 * Looks to match the characters the constitute the token IntegerTypeSuffix
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mIntegerTypeSuffix()
{
    ANTLR_UINT32	_type;
      



    {
        //  predicates_test/C.g:515:2: ( ( 'u' | 'U' )? ( 'l' | 'L' ) | ( 'u' | 'U' ) ( 'l' | 'L' )? )

        ANTLR_UINT32 alt13;

        alt13=2;

        switch ( this->LA(1) )
        {
        case 'U':
        case 'u':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'L':
        		case 'l':
        			{
        				alt13=1;
        			}
        		    break;

        		default:
        		    alt13=2;
        		}

        	}
            break;
        case 'L':
        case 'l':
        	{
        		alt13=1;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< CLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 13 );
            ex->set_state( 0 );


            goto ruleIntegerTypeSuffixEx;

        }

        switch (alt13)
        {
    	case 1:
    	    // predicates_test/C.g:515:4: ( 'u' | 'U' )? ( 'l' | 'L' )
    	    {
    	        // predicates_test/C.g:515:4: ( 'u' | 'U' )?
    	        {
    	            int alt11=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'U':
    	                case 'u':
    	                	{
    	                		alt11=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt11)
    	            {
    	        	case 1:
    	        	    // predicates_test/C.g:
    	        	    {
    	        	        if ( this->LA(1) == 'U' || this->LA(1) == 'u' )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleIntegerTypeSuffixEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	        if ( this->LA(1) == 'L' || this->LA(1) == 'l' )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleIntegerTypeSuffixEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // predicates_test/C.g:516:4: ( 'u' | 'U' ) ( 'l' | 'L' )?
    	    {
    	        if ( this->LA(1) == 'U' || this->LA(1) == 'u' )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleIntegerTypeSuffixEx;
    	        }


    	        // predicates_test/C.g:516:15: ( 'l' | 'L' )?
    	        {
    	            int alt12=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'L':
    	                case 'l':
    	                	{
    	                		alt12=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt12)
    	            {
    	        	case 1:
    	        	    // predicates_test/C.g:
    	        	    {
    	        	        if ( this->LA(1) == 'L' || this->LA(1) == 'l' )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleIntegerTypeSuffixEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;

        }
    }

    // This is where rules clean up and exit
    //
    goto ruleIntegerTypeSuffixEx; /* Prevent compiler warnings */
    ruleIntegerTypeSuffixEx: ;

}
// $ANTLR end IntegerTypeSuffix

//   Comes from: 519:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( Exponent )? ( FloatTypeSuffix )? | '.' ( '0' .. '9' )+ ( Exponent )? ( FloatTypeSuffix )? | ( '0' .. '9' )+ Exponent ( FloatTypeSuffix )? | ( '0' .. '9' )+ ( Exponent )? FloatTypeSuffix )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLOATING_POINT_LITERAL
 *
 * Looks to match the characters the constitute the token FLOATING_POINT_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mFLOATING_POINT_LITERAL()
{
    ANTLR_UINT32	_type;
      


    _type	    = FLOATING_POINT_LITERAL;


    {
        //  predicates_test/C.g:519:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( Exponent )? ( FloatTypeSuffix )? | '.' ( '0' .. '9' )+ ( Exponent )? ( FloatTypeSuffix )? | ( '0' .. '9' )+ Exponent ( FloatTypeSuffix )? | ( '0' .. '9' )+ ( Exponent )? FloatTypeSuffix )

        ANTLR_UINT32 alt25;

        alt25=4;

        alt25 = cdfa25.predict(this, this->get_rec(), this->get_istream(), cdfa25 );
        if  (this->hasException())
        {
            goto ruleFLOATING_POINT_LITERALEx;
        }

        switch (alt25)
        {
    	case 1:
    	    // predicates_test/C.g:519:9: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( Exponent )? ( FloatTypeSuffix )?
    	    {
    	        // predicates_test/C.g:519:9: ( '0' .. '9' )+
    	        {
    	            int cnt14=0;

    	            for (;;)
    	            {
    	                int alt14=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt14=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt14)
    	        	{
    	        	    case 1:
    	        	        // predicates_test/C.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleFLOATING_POINT_LITERALEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt14 >= 1 )
    	        		{
    	        		    goto loop14;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleFLOATING_POINT_LITERALEx;
    	        	}
    	        	cnt14++;
    	            }
    	            loop14: ;	/* Jump to here if this rule does not match */
    	        }

    	         this->matchc('.');
    	        if  (this->hasException())
    	        {
    	            goto ruleFLOATING_POINT_LITERALEx;
    	        }


    	        // predicates_test/C.g:519:25: ( '0' .. '9' )*

    	        for (;;)
    	        {
    	            int alt15=2;
    	            switch ( this->LA(1) )
    	            {
    	            case '0':
    	            case '1':
    	            case '2':
    	            case '3':
    	            case '4':
    	            case '5':
    	            case '6':
    	            case '7':
    	            case '8':
    	            case '9':
    	            	{
    	            		alt15=1;
    	            	}
    	                break;

    	            }

    	            switch (alt15)
    	            {
    	        	case 1:
    	        	    // predicates_test/C.g:
    	        	    {
    	        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleFLOATING_POINT_LITERALEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop15;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop15: ; /* Jump out to here if this rule does not match */


    	        // predicates_test/C.g:519:37: ( Exponent )?
    	        {
    	            int alt16=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt16=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt16)
    	            {
    	        	case 1:
    	        	    // predicates_test/C.g:519:37: Exponent
    	        	    {
    	        	        /* 519:37: Exponent */
    	        	        mExponent();
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleFLOATING_POINT_LITERALEx;
    	        	        }



    	        	    }
    	        	    break;

    	            }
    	        }

    	        // predicates_test/C.g:519:47: ( FloatTypeSuffix )?
    	        {
    	            int alt17=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'D':
    	                case 'F':
    	                case 'd':
    	                case 'f':
    	                	{
    	                		alt17=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt17)
    	            {
    	        	case 1:
    	        	    // predicates_test/C.g:
    	        	    {
    	        	        if ( this->LA(1) == 'D' || this->LA(1) == 'F' || this->LA(1) == 'd' || this->LA(1) == 'f' )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleFLOATING_POINT_LITERALEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 2:
    	    // predicates_test/C.g:520:9: '.' ( '0' .. '9' )+ ( Exponent )? ( FloatTypeSuffix )?
    	    {
    	         this->matchc('.');
    	        if  (this->hasException())
    	        {
    	            goto ruleFLOATING_POINT_LITERALEx;
    	        }


    	        // predicates_test/C.g:520:13: ( '0' .. '9' )+
    	        {
    	            int cnt18=0;

    	            for (;;)
    	            {
    	                int alt18=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt18=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt18)
    	        	{
    	        	    case 1:
    	        	        // predicates_test/C.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleFLOATING_POINT_LITERALEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt18 >= 1 )
    	        		{
    	        		    goto loop18;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleFLOATING_POINT_LITERALEx;
    	        	}
    	        	cnt18++;
    	            }
    	            loop18: ;	/* Jump to here if this rule does not match */
    	        }

    	        // predicates_test/C.g:520:25: ( Exponent )?
    	        {
    	            int alt19=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt19=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt19)
    	            {
    	        	case 1:
    	        	    // predicates_test/C.g:520:25: Exponent
    	        	    {
    	        	        /* 520:25: Exponent */
    	        	        mExponent();
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleFLOATING_POINT_LITERALEx;
    	        	        }



    	        	    }
    	        	    break;

    	            }
    	        }

    	        // predicates_test/C.g:520:35: ( FloatTypeSuffix )?
    	        {
    	            int alt20=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'D':
    	                case 'F':
    	                case 'd':
    	                case 'f':
    	                	{
    	                		alt20=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt20)
    	            {
    	        	case 1:
    	        	    // predicates_test/C.g:
    	        	    {
    	        	        if ( this->LA(1) == 'D' || this->LA(1) == 'F' || this->LA(1) == 'd' || this->LA(1) == 'f' )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleFLOATING_POINT_LITERALEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 3:
    	    // predicates_test/C.g:521:9: ( '0' .. '9' )+ Exponent ( FloatTypeSuffix )?
    	    {
    	        // predicates_test/C.g:521:9: ( '0' .. '9' )+
    	        {
    	            int cnt21=0;

    	            for (;;)
    	            {
    	                int alt21=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt21=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt21)
    	        	{
    	        	    case 1:
    	        	        // predicates_test/C.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleFLOATING_POINT_LITERALEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt21 >= 1 )
    	        		{
    	        		    goto loop21;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleFLOATING_POINT_LITERALEx;
    	        	}
    	        	cnt21++;
    	            }
    	            loop21: ;	/* Jump to here if this rule does not match */
    	        }

    	        /* 521:9: ( '0' .. '9' )+ Exponent ( FloatTypeSuffix )? */
    	        mExponent();
    	        if  (this->hasException())
    	        {
    	            goto ruleFLOATING_POINT_LITERALEx;
    	        }



    	        // predicates_test/C.g:521:30: ( FloatTypeSuffix )?
    	        {
    	            int alt22=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'D':
    	                case 'F':
    	                case 'd':
    	                case 'f':
    	                	{
    	                		alt22=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt22)
    	            {
    	        	case 1:
    	        	    // predicates_test/C.g:
    	        	    {
    	        	        if ( this->LA(1) == 'D' || this->LA(1) == 'F' || this->LA(1) == 'd' || this->LA(1) == 'f' )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleFLOATING_POINT_LITERALEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 4:
    	    // predicates_test/C.g:522:9: ( '0' .. '9' )+ ( Exponent )? FloatTypeSuffix
    	    {
    	        // predicates_test/C.g:522:9: ( '0' .. '9' )+
    	        {
    	            int cnt23=0;

    	            for (;;)
    	            {
    	                int alt23=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt23=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt23)
    	        	{
    	        	    case 1:
    	        	        // predicates_test/C.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleFLOATING_POINT_LITERALEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt23 >= 1 )
    	        		{
    	        		    goto loop23;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleFLOATING_POINT_LITERALEx;
    	        	}
    	        	cnt23++;
    	            }
    	            loop23: ;	/* Jump to here if this rule does not match */
    	        }

    	        // predicates_test/C.g:522:21: ( Exponent )?
    	        {
    	            int alt24=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt24=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt24)
    	            {
    	        	case 1:
    	        	    // predicates_test/C.g:522:21: Exponent
    	        	    {
    	        	        /* 522:21: Exponent */
    	        	        mExponent();
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleFLOATING_POINT_LITERALEx;
    	        	        }



    	        	    }
    	        	    break;

    	            }
    	        }

    	        /* 522:9: ( '0' .. '9' )+ ( Exponent )? FloatTypeSuffix */
    	        mFloatTypeSuffix();
    	        if  (this->hasException())
    	        {
    	            goto ruleFLOATING_POINT_LITERALEx;
    	        }



    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleFLOATING_POINT_LITERALEx; /* Prevent compiler warnings */
    ruleFLOATING_POINT_LITERALEx: ;

}
// $ANTLR end FLOATING_POINT_LITERAL

//   Comes from: 527:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Exponent
 *
 * Looks to match the characters the constitute the token Exponent
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mExponent()
{
    ANTLR_UINT32	_type;
      



    // predicates_test/C.g:527:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
    // predicates_test/C.g:527:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    {
        if ( this->LA(1) == 'E' || this->LA(1) == 'e' )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleExponentEx;
        }


        // predicates_test/C.g:527:22: ( '+' | '-' )?
        {
            int alt26=2;
            switch ( this->LA(1) )
            {
                case '+':
                case '-':
                	{
                		alt26=1;
                	}
                    break;
            }

            switch (alt26)
            {
        	case 1:
        	    // predicates_test/C.g:
        	    {
        	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleExponentEx;
        	        }


        	    }
        	    break;

            }
        }

        // predicates_test/C.g:527:33: ( '0' .. '9' )+
        {
            int cnt27=0;

            for (;;)
            {
                int alt27=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt27=1;
        		}
        	    break;

        	}

        	switch (alt27)
        	{
        	    case 1:
        	        // predicates_test/C.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleExponentEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt27 >= 1 )
        		{
        		    goto loop27;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< CLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleExponentEx;
        	}
        	cnt27++;
            }
            loop27: ;	/* Jump to here if this rule does not match */
        }

    }


    // This is where rules clean up and exit
    //
    goto ruleExponentEx; /* Prevent compiler warnings */
    ruleExponentEx: ;

}
// $ANTLR end Exponent

//   Comes from: 530:17: ( ( 'f' | 'F' | 'd' | 'D' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FloatTypeSuffix
 *
 * Looks to match the characters the constitute the token FloatTypeSuffix
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mFloatTypeSuffix()
{
    ANTLR_UINT32	_type;
      



    // predicates_test/C.g:530:17: ( ( 'f' | 'F' | 'd' | 'D' ) )
    // predicates_test/C.g:
    {
        if ( this->LA(1) == 'D' || this->LA(1) == 'F' || this->LA(1) == 'd' || this->LA(1) == 'f' )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleFloatTypeSuffixEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleFloatTypeSuffixEx; /* Prevent compiler warnings */
    ruleFloatTypeSuffixEx: ;

}
// $ANTLR end FloatTypeSuffix

//   Comes from: 534:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | OctalEscape )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EscapeSequence
 *
 * Looks to match the characters the constitute the token EscapeSequence
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mEscapeSequence()
{
    ANTLR_UINT32	_type;
      



    {
        //  predicates_test/C.g:534:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | OctalEscape )

        ANTLR_UINT32 alt28;

        alt28=2;

        switch ( this->LA(1) )
        {
        case '\\':
        	{
        		switch ( this->LA(2) )
        		{
        		case '"':
        		case '\'':
        		case '\\':
        		case 'b':
        		case 'f':
        		case 'n':
        		case 'r':
        		case 't':
        			{
        				alt28=1;
        			}
        		    break;
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				alt28=2;
        			}
        		    break;

        		default:
        		    ExceptionBaseType* ex = new ANTLR_Exception< CLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        		    ex->set_decisionNum( 28 );
        		    ex->set_state( 1 );


        		    goto ruleEscapeSequenceEx;

        		}

        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< CLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 28 );
            ex->set_state( 0 );


            goto ruleEscapeSequenceEx;

        }

        switch (alt28)
        {
    	case 1:
    	    // predicates_test/C.g:534:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleEscapeSequenceEx;
    	        }


    	        if ( this->LA(1) == '"' || this->LA(1) == '\'' || this->LA(1) == '\\' || this->LA(1) == 'b' || this->LA(1) == 'f' || this->LA(1) == 'n' || this->LA(1) == 'r' || this->LA(1) == 't' )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleEscapeSequenceEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // predicates_test/C.g:535:9: OctalEscape
    	    {
    	        /* 535:9: OctalEscape */
    	        mOctalEscape();
    	        if  (this->hasException())
    	        {
    	            goto ruleEscapeSequenceEx;
    	        }



    	    }
    	    break;

        }
    }

    // This is where rules clean up and exit
    //
    goto ruleEscapeSequenceEx; /* Prevent compiler warnings */
    ruleEscapeSequenceEx: ;

}
// $ANTLR end EscapeSequence

//   Comes from: 540:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OctalEscape
 *
 * Looks to match the characters the constitute the token OctalEscape
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mOctalEscape()
{
    ANTLR_UINT32	_type;
      



    {
        //  predicates_test/C.g:540:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )

        ANTLR_UINT32 alt29;

        alt29=3;

        switch ( this->LA(1) )
        {
        case '\\':
        	{
        		switch ( this->LA(2) )
        		{
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        			{
        				switch ( this->LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						switch ( this->LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        							{
        								alt29=1;
        							}
        						    break;

        						default:
        						    alt29=2;
        						}

        					}
        				    break;

        				default:
        				    alt29=3;
        				}

        			}
        		    break;
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				switch ( this->LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						alt29=2;
        					}
        				    break;

        				default:
        				    alt29=3;
        				}

        			}
        		    break;

        		default:
        		    ExceptionBaseType* ex = new ANTLR_Exception< CLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        		    ex->set_decisionNum( 29 );
        		    ex->set_state( 1 );


        		    goto ruleOctalEscapeEx;

        		}

        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< CLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 29 );
            ex->set_state( 0 );


            goto ruleOctalEscapeEx;

        }

        switch (alt29)
        {
    	case 1:
    	    // predicates_test/C.g:540:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleOctalEscapeEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '3')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOctalEscapeEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOctalEscapeEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOctalEscapeEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // predicates_test/C.g:541:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleOctalEscapeEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOctalEscapeEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOctalEscapeEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // predicates_test/C.g:542:9: '\\\\' ( '0' .. '7' )
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleOctalEscapeEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOctalEscapeEx;
    	        }


    	    }
    	    break;

        }
    }

    // This is where rules clean up and exit
    //
    goto ruleOctalEscapeEx; /* Prevent compiler warnings */
    ruleOctalEscapeEx: ;

}
// $ANTLR end OctalEscape

//   Comes from: 547:5: ( '\\\\' 'u' HexDigit HexDigit HexDigit HexDigit )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UnicodeEscape
 *
 * Looks to match the characters the constitute the token UnicodeEscape
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mUnicodeEscape()
{
    ANTLR_UINT32	_type;
      



    // predicates_test/C.g:547:5: ( '\\\\' 'u' HexDigit HexDigit HexDigit HexDigit )
    // predicates_test/C.g:547:9: '\\\\' 'u' HexDigit HexDigit HexDigit HexDigit
    {
         this->matchc('\\');
        if  (this->hasException())
        {
            goto ruleUnicodeEscapeEx;
        }


         this->matchc('u');
        if  (this->hasException())
        {
            goto ruleUnicodeEscapeEx;
        }


        /* 547:9: '\\\\' 'u' HexDigit HexDigit HexDigit HexDigit */
        mHexDigit();
        if  (this->hasException())
        {
            goto ruleUnicodeEscapeEx;
        }



        /* 547:9: '\\\\' 'u' HexDigit HexDigit HexDigit HexDigit */
        mHexDigit();
        if  (this->hasException())
        {
            goto ruleUnicodeEscapeEx;
        }



        /* 547:9: '\\\\' 'u' HexDigit HexDigit HexDigit HexDigit */
        mHexDigit();
        if  (this->hasException())
        {
            goto ruleUnicodeEscapeEx;
        }



        /* 547:9: '\\\\' 'u' HexDigit HexDigit HexDigit HexDigit */
        mHexDigit();
        if  (this->hasException())
        {
            goto ruleUnicodeEscapeEx;
        }



    }


    // This is where rules clean up and exit
    //
    goto ruleUnicodeEscapeEx; /* Prevent compiler warnings */
    ruleUnicodeEscapeEx: ;

}
// $ANTLR end UnicodeEscape

//   Comes from: 549:5: ( ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mWS()
{
    ANTLR_UINT32	_type;
      


    _type	    = WS;


    // predicates_test/C.g:549:5: ( ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' ) )
    // predicates_test/C.g:549:8: ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' )
    {
        if ( ((this->LA(1) >= '\t') && (this->LA(1) <= '\n')) || ((this->LA(1) >= '\f') && (this->LA(1) <= '\r')) || this->LA(1) == ' ' )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleWSEx;
        }


        {
            this->get_state()->get_channel()=HIDDEN;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

//   Comes from: 553:5: ( '/*' ( options {greedy=false; } : . )* '*/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mCOMMENT()
{
    ANTLR_UINT32	_type;
      


    _type	    = COMMENT;


    // predicates_test/C.g:553:5: ( '/*' ( options {greedy=false; } : . )* '*/' )
    // predicates_test/C.g:553:9: '/*' ( options {greedy=false; } : . )* '*/'
    {
        this->matchs(lit_55);
        if  (this->hasException())
        {
            goto ruleCOMMENTEx;
        }




        // predicates_test/C.g:553:14: ( options {greedy=false; } : . )*

        for (;;)
        {
            int alt30=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA30_0 = this->LA(1);
                if ( (LA30_0 == '*'))
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA30_1 = this->LA(2);
                        if ( (LA30_1 == '/'))
                        {
                            alt30=2;
                        }
                        else if ( (((LA30_1 >= 0x0000) && (LA30_1 <= '.')) || ((LA30_1 >= '0') && (LA30_1 <= 0xFFFF))))
                        {
                            alt30=1;
                        }

                    }
                }
                else if ( (((LA30_0 >= 0x0000) && (LA30_0 <= ')')) || ((LA30_0 >= '+') && (LA30_0 <= 0xFFFF))))
                {
                    alt30=1;
                }

            }
            switch (alt30)
            {
        	case 1:
        	    // predicates_test/C.g:553:42: .
        	    {
        	        this->matchAny();
        	        if  (this->hasException())
        	        {
        	            goto ruleCOMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop30;	/* break out of the loop */
        	    break;
            }
        }
        loop30: ; /* Jump out to here if this rule does not match */


        this->matchs(lit_56);
        if  (this->hasException())
        {
            goto ruleCOMMENTEx;
        }




        {
            this->get_state()->get_channel()=HIDDEN;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

//   Comes from: 557:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LINE_COMMENT
 *
 * Looks to match the characters the constitute the token LINE_COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mLINE_COMMENT()
{
    ANTLR_UINT32	_type;
      


    _type	    = LINE_COMMENT;


    // predicates_test/C.g:557:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
    // predicates_test/C.g:557:7: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    {
        this->matchs(lit_57);
        if  (this->hasException())
        {
            goto ruleLINE_COMMENTEx;
        }




        // predicates_test/C.g:557:12: (~ ( '\\n' | '\\r' ) )*

        for (;;)
        {
            int alt31=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA31_0 = this->LA(1);
                if ( (((LA31_0 >= 0x0000) && (LA31_0 <= '\t')) || ((LA31_0 >= 0x000B) && (LA31_0 <= '\f')) || ((LA31_0 >= 0x000E) && (LA31_0 <= 0xFFFF))))
                {
                    alt31=1;
                }

            }
            switch (alt31)
            {
        	case 1:
        	    // predicates_test/C.g:
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '\t')) || ((this->LA(1) >= 0x000B) && (this->LA(1) <= '\f')) || ((this->LA(1) >= 0x000E) && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleLINE_COMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop31;	/* break out of the loop */
        	    break;
            }
        }
        loop31: ; /* Jump out to here if this rule does not match */


        // predicates_test/C.g:557:26: ( '\\r' )?
        {
            int alt32=2;
            switch ( this->LA(1) )
            {
                case '\r':
                	{
                		alt32=1;
                	}
                    break;
            }

            switch (alt32)
            {
        	case 1:
        	    // predicates_test/C.g:557:26: '\\r'
        	    {
        	         this->matchc('\r');
        	        if  (this->hasException())
        	        {
        	            goto ruleLINE_COMMENTEx;
        	        }


        	    }
        	    break;

            }
        }

         this->matchc('\n');
        if  (this->hasException())
        {
            goto ruleLINE_COMMENTEx;
        }


        {
            this->get_state()->get_channel()=HIDDEN;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLINE_COMMENTEx; /* Prevent compiler warnings */
    ruleLINE_COMMENTEx: ;

}
// $ANTLR end LINE_COMMENT

//   Comes from: 562:5: ( '#' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LINE_COMMAND
 *
 * Looks to match the characters the constitute the token LINE_COMMAND
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void CLexer::mLINE_COMMAND()
{
    ANTLR_UINT32	_type;
      


    _type	    = LINE_COMMAND;


    // predicates_test/C.g:562:5: ( '#' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
    // predicates_test/C.g:562:7: '#' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    {
         this->matchc('#');
        if  (this->hasException())
        {
            goto ruleLINE_COMMANDEx;
        }


        // predicates_test/C.g:562:11: (~ ( '\\n' | '\\r' ) )*

        for (;;)
        {
            int alt33=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA33_0 = this->LA(1);
                if ( (((LA33_0 >= 0x0000) && (LA33_0 <= '\t')) || ((LA33_0 >= 0x000B) && (LA33_0 <= '\f')) || ((LA33_0 >= 0x000E) && (LA33_0 <= 0xFFFF))))
                {
                    alt33=1;
                }

            }
            switch (alt33)
            {
        	case 1:
        	    // predicates_test/C.g:
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '\t')) || ((this->LA(1) >= 0x000B) && (this->LA(1) <= '\f')) || ((this->LA(1) >= 0x000E) && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< CLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleLINE_COMMANDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop33;	/* break out of the loop */
        	    break;
            }
        }
        loop33: ; /* Jump out to here if this rule does not match */


        // predicates_test/C.g:562:25: ( '\\r' )?
        {
            int alt34=2;
            switch ( this->LA(1) )
            {
                case '\r':
                	{
                		alt34=1;
                	}
                    break;
            }

            switch (alt34)
            {
        	case 1:
        	    // predicates_test/C.g:562:25: '\\r'
        	    {
        	         this->matchc('\r');
        	        if  (this->hasException())
        	        {
        	            goto ruleLINE_COMMANDEx;
        	        }


        	    }
        	    break;

            }
        }

         this->matchc('\n');
        if  (this->hasException())
        {
            goto ruleLINE_COMMANDEx;
        }


        {
            this->get_state()->get_channel()=HIDDEN;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLINE_COMMANDEx; /* Prevent compiler warnings */
    ruleLINE_COMMANDEx: ;

}
// $ANTLR end LINE_COMMAND

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
void
CLexer::mTokens()
{
    {
        //  predicates_test/C.g:1:8: ( T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | IDENTIFIER | CHARACTER_LITERAL | STRING_LITERAL | HEX_LITERAL | DECIMAL_LITERAL | OCTAL_LITERAL | FLOATING_POINT_LITERAL | WS | COMMENT | LINE_COMMENT | LINE_COMMAND )

        ANTLR_UINT32 alt35;

        alt35=89;

        alt35 = cdfa35.predict(this, this->get_rec(), this->get_istream(), cdfa35 );
        if  (this->hasException())
        {
            goto ruleTokensEx;
        }

        switch (alt35)
        {
    	case 1:
    	    // predicates_test/C.g:1:10: T__23
    	    {
    	        /* 1:10: T__23 */
    	        mT__23();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // predicates_test/C.g:1:16: T__24
    	    {
    	        /* 1:16: T__24 */
    	        mT__24();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // predicates_test/C.g:1:22: T__25
    	    {
    	        /* 1:22: T__25 */
    	        mT__25();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // predicates_test/C.g:1:28: T__26
    	    {
    	        /* 1:28: T__26 */
    	        mT__26();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // predicates_test/C.g:1:34: T__27
    	    {
    	        /* 1:34: T__27 */
    	        mT__27();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // predicates_test/C.g:1:40: T__28
    	    {
    	        /* 1:40: T__28 */
    	        mT__28();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // predicates_test/C.g:1:46: T__29
    	    {
    	        /* 1:46: T__29 */
    	        mT__29();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // predicates_test/C.g:1:52: T__30
    	    {
    	        /* 1:52: T__30 */
    	        mT__30();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // predicates_test/C.g:1:58: T__31
    	    {
    	        /* 1:58: T__31 */
    	        mT__31();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // predicates_test/C.g:1:64: T__32
    	    {
    	        /* 1:64: T__32 */
    	        mT__32();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // predicates_test/C.g:1:70: T__33
    	    {
    	        /* 1:70: T__33 */
    	        mT__33();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // predicates_test/C.g:1:76: T__34
    	    {
    	        /* 1:76: T__34 */
    	        mT__34();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // predicates_test/C.g:1:82: T__35
    	    {
    	        /* 1:82: T__35 */
    	        mT__35();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // predicates_test/C.g:1:88: T__36
    	    {
    	        /* 1:88: T__36 */
    	        mT__36();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // predicates_test/C.g:1:94: T__37
    	    {
    	        /* 1:94: T__37 */
    	        mT__37();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // predicates_test/C.g:1:100: T__38
    	    {
    	        /* 1:100: T__38 */
    	        mT__38();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // predicates_test/C.g:1:106: T__39
    	    {
    	        /* 1:106: T__39 */
    	        mT__39();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // predicates_test/C.g:1:112: T__40
    	    {
    	        /* 1:112: T__40 */
    	        mT__40();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // predicates_test/C.g:1:118: T__41
    	    {
    	        /* 1:118: T__41 */
    	        mT__41();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // predicates_test/C.g:1:124: T__42
    	    {
    	        /* 1:124: T__42 */
    	        mT__42();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 21:
    	    // predicates_test/C.g:1:130: T__43
    	    {
    	        /* 1:130: T__43 */
    	        mT__43();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 22:
    	    // predicates_test/C.g:1:136: T__44
    	    {
    	        /* 1:136: T__44 */
    	        mT__44();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 23:
    	    // predicates_test/C.g:1:142: T__45
    	    {
    	        /* 1:142: T__45 */
    	        mT__45();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 24:
    	    // predicates_test/C.g:1:148: T__46
    	    {
    	        /* 1:148: T__46 */
    	        mT__46();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 25:
    	    // predicates_test/C.g:1:154: T__47
    	    {
    	        /* 1:154: T__47 */
    	        mT__47();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 26:
    	    // predicates_test/C.g:1:160: T__48
    	    {
    	        /* 1:160: T__48 */
    	        mT__48();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 27:
    	    // predicates_test/C.g:1:166: T__49
    	    {
    	        /* 1:166: T__49 */
    	        mT__49();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 28:
    	    // predicates_test/C.g:1:172: T__50
    	    {
    	        /* 1:172: T__50 */
    	        mT__50();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 29:
    	    // predicates_test/C.g:1:178: T__51
    	    {
    	        /* 1:178: T__51 */
    	        mT__51();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 30:
    	    // predicates_test/C.g:1:184: T__52
    	    {
    	        /* 1:184: T__52 */
    	        mT__52();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 31:
    	    // predicates_test/C.g:1:190: T__53
    	    {
    	        /* 1:190: T__53 */
    	        mT__53();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 32:
    	    // predicates_test/C.g:1:196: T__54
    	    {
    	        /* 1:196: T__54 */
    	        mT__54();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 33:
    	    // predicates_test/C.g:1:202: T__55
    	    {
    	        /* 1:202: T__55 */
    	        mT__55();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 34:
    	    // predicates_test/C.g:1:208: T__56
    	    {
    	        /* 1:208: T__56 */
    	        mT__56();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 35:
    	    // predicates_test/C.g:1:214: T__57
    	    {
    	        /* 1:214: T__57 */
    	        mT__57();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 36:
    	    // predicates_test/C.g:1:220: T__58
    	    {
    	        /* 1:220: T__58 */
    	        mT__58();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 37:
    	    // predicates_test/C.g:1:226: T__59
    	    {
    	        /* 1:226: T__59 */
    	        mT__59();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 38:
    	    // predicates_test/C.g:1:232: T__60
    	    {
    	        /* 1:232: T__60 */
    	        mT__60();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 39:
    	    // predicates_test/C.g:1:238: T__61
    	    {
    	        /* 1:238: T__61 */
    	        mT__61();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 40:
    	    // predicates_test/C.g:1:244: T__62
    	    {
    	        /* 1:244: T__62 */
    	        mT__62();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 41:
    	    // predicates_test/C.g:1:250: T__63
    	    {
    	        /* 1:250: T__63 */
    	        mT__63();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 42:
    	    // predicates_test/C.g:1:256: T__64
    	    {
    	        /* 1:256: T__64 */
    	        mT__64();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 43:
    	    // predicates_test/C.g:1:262: T__65
    	    {
    	        /* 1:262: T__65 */
    	        mT__65();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 44:
    	    // predicates_test/C.g:1:268: T__66
    	    {
    	        /* 1:268: T__66 */
    	        mT__66();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 45:
    	    // predicates_test/C.g:1:274: T__67
    	    {
    	        /* 1:274: T__67 */
    	        mT__67();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 46:
    	    // predicates_test/C.g:1:280: T__68
    	    {
    	        /* 1:280: T__68 */
    	        mT__68();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 47:
    	    // predicates_test/C.g:1:286: T__69
    	    {
    	        /* 1:286: T__69 */
    	        mT__69();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 48:
    	    // predicates_test/C.g:1:292: T__70
    	    {
    	        /* 1:292: T__70 */
    	        mT__70();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 49:
    	    // predicates_test/C.g:1:298: T__71
    	    {
    	        /* 1:298: T__71 */
    	        mT__71();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 50:
    	    // predicates_test/C.g:1:304: T__72
    	    {
    	        /* 1:304: T__72 */
    	        mT__72();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 51:
    	    // predicates_test/C.g:1:310: T__73
    	    {
    	        /* 1:310: T__73 */
    	        mT__73();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 52:
    	    // predicates_test/C.g:1:316: T__74
    	    {
    	        /* 1:316: T__74 */
    	        mT__74();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 53:
    	    // predicates_test/C.g:1:322: T__75
    	    {
    	        /* 1:322: T__75 */
    	        mT__75();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 54:
    	    // predicates_test/C.g:1:328: T__76
    	    {
    	        /* 1:328: T__76 */
    	        mT__76();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 55:
    	    // predicates_test/C.g:1:334: T__77
    	    {
    	        /* 1:334: T__77 */
    	        mT__77();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 56:
    	    // predicates_test/C.g:1:340: T__78
    	    {
    	        /* 1:340: T__78 */
    	        mT__78();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 57:
    	    // predicates_test/C.g:1:346: T__79
    	    {
    	        /* 1:346: T__79 */
    	        mT__79();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 58:
    	    // predicates_test/C.g:1:352: T__80
    	    {
    	        /* 1:352: T__80 */
    	        mT__80();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 59:
    	    // predicates_test/C.g:1:358: T__81
    	    {
    	        /* 1:358: T__81 */
    	        mT__81();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 60:
    	    // predicates_test/C.g:1:364: T__82
    	    {
    	        /* 1:364: T__82 */
    	        mT__82();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 61:
    	    // predicates_test/C.g:1:370: T__83
    	    {
    	        /* 1:370: T__83 */
    	        mT__83();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 62:
    	    // predicates_test/C.g:1:376: T__84
    	    {
    	        /* 1:376: T__84 */
    	        mT__84();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 63:
    	    // predicates_test/C.g:1:382: T__85
    	    {
    	        /* 1:382: T__85 */
    	        mT__85();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 64:
    	    // predicates_test/C.g:1:388: T__86
    	    {
    	        /* 1:388: T__86 */
    	        mT__86();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 65:
    	    // predicates_test/C.g:1:394: T__87
    	    {
    	        /* 1:394: T__87 */
    	        mT__87();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 66:
    	    // predicates_test/C.g:1:400: T__88
    	    {
    	        /* 1:400: T__88 */
    	        mT__88();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 67:
    	    // predicates_test/C.g:1:406: T__89
    	    {
    	        /* 1:406: T__89 */
    	        mT__89();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 68:
    	    // predicates_test/C.g:1:412: T__90
    	    {
    	        /* 1:412: T__90 */
    	        mT__90();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 69:
    	    // predicates_test/C.g:1:418: T__91
    	    {
    	        /* 1:418: T__91 */
    	        mT__91();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 70:
    	    // predicates_test/C.g:1:424: T__92
    	    {
    	        /* 1:424: T__92 */
    	        mT__92();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 71:
    	    // predicates_test/C.g:1:430: T__93
    	    {
    	        /* 1:430: T__93 */
    	        mT__93();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 72:
    	    // predicates_test/C.g:1:436: T__94
    	    {
    	        /* 1:436: T__94 */
    	        mT__94();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 73:
    	    // predicates_test/C.g:1:442: T__95
    	    {
    	        /* 1:442: T__95 */
    	        mT__95();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 74:
    	    // predicates_test/C.g:1:448: T__96
    	    {
    	        /* 1:448: T__96 */
    	        mT__96();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 75:
    	    // predicates_test/C.g:1:454: T__97
    	    {
    	        /* 1:454: T__97 */
    	        mT__97();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 76:
    	    // predicates_test/C.g:1:460: T__98
    	    {
    	        /* 1:460: T__98 */
    	        mT__98();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 77:
    	    // predicates_test/C.g:1:466: T__99
    	    {
    	        /* 1:466: T__99 */
    	        mT__99();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 78:
    	    // predicates_test/C.g:1:472: T__100
    	    {
    	        /* 1:472: T__100 */
    	        mT__100();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 79:
    	    // predicates_test/C.g:1:479: IDENTIFIER
    	    {
    	        /* 1:479: IDENTIFIER */
    	        mIDENTIFIER();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 80:
    	    // predicates_test/C.g:1:490: CHARACTER_LITERAL
    	    {
    	        /* 1:490: CHARACTER_LITERAL */
    	        mCHARACTER_LITERAL();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 81:
    	    // predicates_test/C.g:1:508: STRING_LITERAL
    	    {
    	        /* 1:508: STRING_LITERAL */
    	        mSTRING_LITERAL();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 82:
    	    // predicates_test/C.g:1:523: HEX_LITERAL
    	    {
    	        /* 1:523: HEX_LITERAL */
    	        mHEX_LITERAL();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 83:
    	    // predicates_test/C.g:1:535: DECIMAL_LITERAL
    	    {
    	        /* 1:535: DECIMAL_LITERAL */
    	        mDECIMAL_LITERAL();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 84:
    	    // predicates_test/C.g:1:551: OCTAL_LITERAL
    	    {
    	        /* 1:551: OCTAL_LITERAL */
    	        mOCTAL_LITERAL();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 85:
    	    // predicates_test/C.g:1:565: FLOATING_POINT_LITERAL
    	    {
    	        /* 1:565: FLOATING_POINT_LITERAL */
    	        mFLOATING_POINT_LITERAL();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 86:
    	    // predicates_test/C.g:1:588: WS
    	    {
    	        /* 1:588: WS */
    	        mWS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 87:
    	    // predicates_test/C.g:1:591: COMMENT
    	    {
    	        /* 1:591: COMMENT */
    	        mCOMMENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 88:
    	    // predicates_test/C.g:1:599: LINE_COMMENT
    	    {
    	        /* 1:599: LINE_COMMENT */
    	        mLINE_COMMENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 89:
    	    // predicates_test/C.g:1:612: LINE_COMMAND
    	    {
    	        /* 1:612: LINE_COMMAND */
    	        mLINE_COMMAND();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */



/* End of code
 * =============================================================================
 */
