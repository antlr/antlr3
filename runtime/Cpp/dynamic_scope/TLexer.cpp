/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : T.g
 *     -                            On : 2012-02-26 10:26:07
 *     -                 for the lexer : TLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "TLexer.hpp"
/* ----------------------------------------- */



	namespace 	User  {


/** String literals used by TLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR_UCHAR	lit_1[]  = { 0x6D, 0x65, 0x74, 0x68, 0x6F, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};

	}



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;

	namespace 	User  {


/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



TLexer::~TLexer()
{
}

void
TLexer::reset()
{
    this->get_rec()->reset();
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "T.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* TLexer::getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called TLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pTLexer initialized for the lex start
 *     - Fail NULL
 */
TLexer::TLexer(StreamType* instream)
:TLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	// See if we can create a new lexer with the standard constructor
	//
	this->init(instream );
}

/** \brief Create a new lexer called TLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pTLexer initialized for the lex start
 *     - Fail NULL
 */
TLexer::TLexer(StreamType* instream, RecognizerSharedStateType* state)
:TLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void TLexer::init(StreamType* instream)
{
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in TLexer.h here so you can get a sense
     * of what goes where.
     */

}

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 32:6: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__7
 *
 * Looks to match the characters the constitute the token T__7
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mT__7()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__7;


    // T.g:32:6: ( '(' )
    // T.g:32:8: '('
    {
         this->matchc('(');
        if  (this->hasException())
        {
            goto ruleT__7Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__7Ex; /* Prevent compiler warnings */
    ruleT__7Ex: ;

}
// $ANTLR end T__7

//   Comes from: 33:6: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__8
 *
 * Looks to match the characters the constitute the token T__8
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mT__8()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__8;


    // T.g:33:6: ( ')' )
    // T.g:33:8: ')'
    {
         this->matchc(')');
        if  (this->hasException())
        {
            goto ruleT__8Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__8Ex; /* Prevent compiler warnings */
    ruleT__8Ex: ;

}
// $ANTLR end T__8

//   Comes from: 34:6: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__9
 *
 * Looks to match the characters the constitute the token T__9
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mT__9()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__9;


    // T.g:34:6: ( '*' )
    // T.g:34:8: '*'
    {
         this->matchc('*');
        if  (this->hasException())
        {
            goto ruleT__9Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__9Ex; /* Prevent compiler warnings */
    ruleT__9Ex: ;

}
// $ANTLR end T__9

//   Comes from: 35:7: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__10
 *
 * Looks to match the characters the constitute the token T__10
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mT__10()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__10;


    // T.g:35:7: ( '+' )
    // T.g:35:9: '+'
    {
         this->matchc('+');
        if  (this->hasException())
        {
            goto ruleT__10Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__10Ex; /* Prevent compiler warnings */
    ruleT__10Ex: ;

}
// $ANTLR end T__10

//   Comes from: 36:7: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__11
 *
 * Looks to match the characters the constitute the token T__11
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mT__11()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__11;


    // T.g:36:7: ( ';' )
    // T.g:36:9: ';'
    {
         this->matchc(';');
        if  (this->hasException())
        {
            goto ruleT__11Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__11Ex; /* Prevent compiler warnings */
    ruleT__11Ex: ;

}
// $ANTLR end T__11

//   Comes from: 37:7: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__12
 *
 * Looks to match the characters the constitute the token T__12
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mT__12()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__12;


    // T.g:37:7: ( '=' )
    // T.g:37:9: '='
    {
         this->matchc('=');
        if  (this->hasException())
        {
            goto ruleT__12Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__12Ex; /* Prevent compiler warnings */
    ruleT__12Ex: ;

}
// $ANTLR end T__12

//   Comes from: 38:7: ( 'method' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__13
 *
 * Looks to match the characters the constitute the token T__13
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mT__13()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__13;


    // T.g:38:7: ( 'method' )
    // T.g:38:9: 'method'
    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleT__13Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__13Ex; /* Prevent compiler warnings */
    ruleT__13Ex: ;

}
// $ANTLR end T__13

//   Comes from: 39:7: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__14
 *
 * Looks to match the characters the constitute the token T__14
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mT__14()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__14;


    // T.g:39:7: ( '{' )
    // T.g:39:9: '{'
    {
         this->matchc('{');
        if  (this->hasException())
        {
            goto ruleT__14Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__14Ex; /* Prevent compiler warnings */
    ruleT__14Ex: ;

}
// $ANTLR end T__14

//   Comes from: 40:7: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__15
 *
 * Looks to match the characters the constitute the token T__15
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mT__15()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__15;


    // T.g:40:7: ( '}' )
    // T.g:40:9: '}'
    {
         this->matchc('}');
        if  (this->hasException())
        {
            goto ruleT__15Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__15Ex; /* Prevent compiler warnings */
    ruleT__15Ex: ;

}
// $ANTLR end T__15

//   Comes from: 86:5: ( ( 'a' .. 'z' | 'A' .. 'Z' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ID
 *
 * Looks to match the characters the constitute the token ID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mID()
{
    ANTLR_UINT32	_type;
      


    _type	    = ID;


    // T.g:86:5: ( ( 'a' .. 'z' | 'A' .. 'Z' )+ )
    // T.g:86:9: ( 'a' .. 'z' | 'A' .. 'Z' )+
    {
        // T.g:86:9: ( 'a' .. 'z' | 'A' .. 'Z' )+
        {
            int cnt1=0;

            for (;;)
            {
                int alt1=2;
        	switch ( this->LA(1) )
        	{
        	case 'A':
        	case 'B':
        	case 'C':
        	case 'D':
        	case 'E':
        	case 'F':
        	case 'G':
        	case 'H':
        	case 'I':
        	case 'J':
        	case 'K':
        	case 'L':
        	case 'M':
        	case 'N':
        	case 'O':
        	case 'P':
        	case 'Q':
        	case 'R':
        	case 'S':
        	case 'T':
        	case 'U':
        	case 'V':
        	case 'W':
        	case 'X':
        	case 'Y':
        	case 'Z':
        	case 'a':
        	case 'b':
        	case 'c':
        	case 'd':
        	case 'e':
        	case 'f':
        	case 'g':
        	case 'h':
        	case 'i':
        	case 'j':
        	case 'k':
        	case 'l':
        	case 'm':
        	case 'n':
        	case 'o':
        	case 'p':
        	case 'q':
        	case 'r':
        	case 's':
        	case 't':
        	case 'u':
        	case 'v':
        	case 'w':
        	case 'x':
        	case 'y':
        	case 'z':
        		{
        			alt1=1;
        		}
        	    break;

        	}

        	switch (alt1)
        	{
        	    case 1:
        	        // T.g:
        	        {
        	            if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< TLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleIDEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt1 >= 1 )
        		{
        		    goto loop1;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< TLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleIDEx;
        	}
        	cnt1++;
            }
            loop1: ;	/* Jump to here if this rule does not match */
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIDEx; /* Prevent compiler warnings */
    ruleIDEx: ;

}
// $ANTLR end ID

//   Comes from: 88:5: ( ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INT
 *
 * Looks to match the characters the constitute the token INT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mINT()
{
    ANTLR_UINT32	_type;
      


    _type	    = INT;


    // T.g:88:5: ( ( '0' .. '9' )+ )
    // T.g:88:9: ( '0' .. '9' )+
    {
        // T.g:88:9: ( '0' .. '9' )+
        {
            int cnt2=0;

            for (;;)
            {
                int alt2=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt2=1;
        		}
        	    break;

        	}

        	switch (alt2)
        	{
        	    case 1:
        	        // T.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< TLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleINTEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt2 >= 1 )
        		{
        		    goto loop2;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< TLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleINTEx;
        	}
        	cnt2++;
            }
            loop2: ;	/* Jump to here if this rule does not match */
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleINTEx; /* Prevent compiler warnings */
    ruleINTEx: ;

}
// $ANTLR end INT

//   Comes from: 90:5: ( ( ' ' | '\\t' | '\\n' | '\\r' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mWS()
{
    ANTLR_UINT32	_type;
      


    _type	    = WS;


    // T.g:90:5: ( ( ' ' | '\\t' | '\\n' | '\\r' )+ )
    // T.g:90:9: ( ' ' | '\\t' | '\\n' | '\\r' )+
    {
        // T.g:90:9: ( ' ' | '\\t' | '\\n' | '\\r' )+
        {
            int cnt3=0;

            for (;;)
            {
                int alt3=2;
        	switch ( this->LA(1) )
        	{
        	case '\t':
        	case '\n':
        	case '\r':
        	case ' ':
        		{
        			alt3=1;
        		}
        	    break;

        	}

        	switch (alt3)
        	{
        	    case 1:
        	        // T.g:
        	        {
        	            if ( ((this->LA(1) >= '\t') && (this->LA(1) <= '\n')) || this->LA(1) == '\r' || this->LA(1) == ' ' )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< TLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleWSEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt3 >= 1 )
        		{
        		    goto loop3;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< TLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleWSEx;
        	}
        	cnt3++;
            }
            loop3: ;	/* Jump to here if this rule does not match */
        }

        {
            this->get_state()->get_channel()=HIDDEN;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
void
TLexer::mTokens()
{
    {
        //  T.g:1:8: ( T__7 | T__8 | T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | ID | INT | WS )

        ANTLR_UINT32 alt4;

        alt4=12;

        switch ( this->LA(1) )
        {
        case '(':
        	{
        		alt4=1;
        	}
            break;
        case ')':
        	{
        		alt4=2;
        	}
            break;
        case '*':
        	{
        		alt4=3;
        	}
            break;
        case '+':
        	{
        		alt4=4;
        	}
            break;
        case ';':
        	{
        		alt4=5;
        	}
            break;
        case '=':
        	{
        		alt4=6;
        	}
            break;
        case 'm':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'e':
        			{
        				switch ( this->LA(3) )
        				{
        				case 't':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'h':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'o':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'd':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt4=10;
        													}
        												    break;

        												default:
        												    alt4=7;
        												}

        											}
        										    break;

        										default:
        										    alt4=10;
        										}

        									}
        								    break;

        								default:
        								    alt4=10;
        								}

        							}
        						    break;

        						default:
        						    alt4=10;
        						}

        					}
        				    break;

        				default:
        				    alt4=10;
        				}

        			}
        		    break;

        		default:
        		    alt4=10;
        		}

        	}
            break;
        case '{':
        	{
        		alt4=8;
        	}
            break;
        case '}':
        	{
        		alt4=9;
        	}
            break;
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case 'a':
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'n':
        case 'o':
        case 'p':
        case 'q':
        case 'r':
        case 's':
        case 't':
        case 'u':
        case 'v':
        case 'w':
        case 'x':
        case 'y':
        case 'z':
        	{
        		alt4=10;
        	}
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	{
        		alt4=11;
        	}
            break;
        case '\t':
        case '\n':
        case '\r':
        case ' ':
        	{
        		alt4=12;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< TLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 4 );
            ex->set_state( 0 );


            goto ruleTokensEx;

        }

        switch (alt4)
        {
    	case 1:
    	    // T.g:1:10: T__7
    	    {
    	        /* 1:10: T__7 */
    	        mT__7();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // T.g:1:15: T__8
    	    {
    	        /* 1:15: T__8 */
    	        mT__8();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // T.g:1:20: T__9
    	    {
    	        /* 1:20: T__9 */
    	        mT__9();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // T.g:1:25: T__10
    	    {
    	        /* 1:25: T__10 */
    	        mT__10();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // T.g:1:31: T__11
    	    {
    	        /* 1:31: T__11 */
    	        mT__11();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // T.g:1:37: T__12
    	    {
    	        /* 1:37: T__12 */
    	        mT__12();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // T.g:1:43: T__13
    	    {
    	        /* 1:43: T__13 */
    	        mT__13();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // T.g:1:49: T__14
    	    {
    	        /* 1:49: T__14 */
    	        mT__14();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // T.g:1:55: T__15
    	    {
    	        /* 1:55: T__15 */
    	        mT__15();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // T.g:1:61: ID
    	    {
    	        /* 1:61: ID */
    	        mID();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // T.g:1:64: INT
    	    {
    	        /* 1:64: INT */
    	        mINT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // T.g:1:68: WS
    	    {
    	        /* 1:68: WS */
    	        mWS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */

	}



/* End of code
 * =============================================================================
 */
