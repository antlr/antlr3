/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : JavaStat.g
 *     -                            On : 2012-02-26 10:38:17
 *     -                for the parser : Java_JavaStatParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "Java_JavaStat.hpp"
// Include delegator definition header files
//
#include "JavaParser.hpp" 

/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace 
	User
 {

using namespace antlr3;

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "JavaStat.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* Java_JavaStat::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new Java_JavaStat parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
Java_JavaStat::Java_JavaStat( StreamType* instream, JavaParser* gJava)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream, gJava);
}

/** \brief Create a new Java_JavaStat parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
Java_JavaStat::Java_JavaStat( StreamType* instream, RecognizerSharedStateType* state, JavaParser* gJava)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream , gJava);
}

void Java_JavaStat::init(StreamType* instream, JavaParser* gJava)
{
     	// Install the pointers back to lexers that will delegate us to perform certain functions
     	// for them.
     	//
     		m_gJava = gJava;
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( JavaParserTokenNames );


}

void
Java_JavaStat::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
Java_JavaStat::~Java_JavaStat()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return JavaParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_block_in_methodBody28_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_block_in_methodBody28( FOLLOW_block_in_methodBody28_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_108_in_block42_bits[]	= { ANTLR_UINT64_LIT(0x7C218198813068E0), ANTLR_UINT64_LIT(0x00031FDFFEFC766E) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_108_in_block42( FOLLOW_108_in_block42_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_blockStatement_in_block44_bits[]	= { ANTLR_UINT64_LIT(0x7C218198813068E0), ANTLR_UINT64_LIT(0x00031FDFFEFC766E) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_blockStatement_in_block44( FOLLOW_blockStatement_in_block44_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_112_in_block47_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_112_in_block47( FOLLOW_112_in_block47_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_localVariableDeclaration_in_blockStatement59_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_localVariableDeclaration_in_blockStatement59( FOLLOW_localVariableDeclaration_in_blockStatement59_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_classOrInterfaceDeclaration_in_blockStatement64_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_classOrInterfaceDeclaration_in_blockStatement64( FOLLOW_classOrInterfaceDeclaration_in_blockStatement64_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_statement_in_blockStatement73_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_statement_in_blockStatement73( FOLLOW_statement_in_blockStatement73_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_variableModifier_in_localVariableDeclaration85_bits[]	= { ANTLR_UINT64_LIT(0x5020000000004000), ANTLR_UINT64_LIT(0x0000000020141442) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_variableModifier_in_localVariableDeclaration85( FOLLOW_variableModifier_in_localVariableDeclaration85_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_type_in_localVariableDeclaration88_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_type_in_localVariableDeclaration88( FOLLOW_type_in_localVariableDeclaration88_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_variableDeclarators_in_localVariableDeclaration90_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_variableDeclarators_in_localVariableDeclaration90( FOLLOW_variableDeclarators_in_localVariableDeclaration90_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_47_in_localVariableDeclaration92_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_47_in_localVariableDeclaration92( FOLLOW_47_in_localVariableDeclaration92_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_block_in_statement104_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_block_in_statement104( FOLLOW_block_in_statement104_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_59_in_statement112_bits[]	= { ANTLR_UINT64_LIT(0x5001019881306860), ANTLR_UINT64_LIT(0x0002028920D41242) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_59_in_statement112( FOLLOW_59_in_statement112_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_expression_in_statement114_bits[]	= { ANTLR_UINT64_LIT(0x0000C00000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_expression_in_statement114( FOLLOW_expression_in_statement114_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_46_in_statement117_bits[]	= { ANTLR_UINT64_LIT(0x5001019881306860), ANTLR_UINT64_LIT(0x0002028920D41242) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_46_in_statement117( FOLLOW_46_in_statement117_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_expression_in_statement119_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_expression_in_statement119( FOLLOW_expression_in_statement119_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_47_in_statement123_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_47_in_statement123( FOLLOW_47_in_statement123_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_78_in_statement131_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_78_in_statement131( FOLLOW_78_in_statement131_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_parExpression_in_statement133_bits[]	= { ANTLR_UINT64_LIT(0x7801819881306860), ANTLR_UINT64_LIT(0x00021B9F30D4726A) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_parExpression_in_statement133( FOLLOW_parExpression_in_statement133_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_statement_in_statement135_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000080) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_statement_in_statement135( FOLLOW_statement_in_statement135_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_71_in_statement150_bits[]	= { ANTLR_UINT64_LIT(0x7801819881306860), ANTLR_UINT64_LIT(0x00021B9F30D4726A) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_71_in_statement150( FOLLOW_71_in_statement150_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_statement_in_statement152_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_statement_in_statement152( FOLLOW_statement_in_statement152_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_77_in_statement162_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_77_in_statement162( FOLLOW_77_in_statement162_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_31_in_statement164_bits[]	= { ANTLR_UINT64_LIT(0x5021819881306860), ANTLR_UINT64_LIT(0x0002028920D41642) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_31_in_statement164( FOLLOW_31_in_statement164_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_forControl_in_statement166_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_forControl_in_statement166( FOLLOW_forControl_in_statement166_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_32_in_statement168_bits[]	= { ANTLR_UINT64_LIT(0x7801819881306860), ANTLR_UINT64_LIT(0x00021B9F30D4726A) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_32_in_statement168( FOLLOW_32_in_statement168_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_statement_in_statement170_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_statement_in_statement170( FOLLOW_statement_in_statement170_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_107_in_statement178_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_107_in_statement178( FOLLOW_107_in_statement178_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_parExpression_in_statement180_bits[]	= { ANTLR_UINT64_LIT(0x7801819881306860), ANTLR_UINT64_LIT(0x00021B9F30D4726A) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_parExpression_in_statement180( FOLLOW_parExpression_in_statement180_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_statement_in_statement182_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_statement_in_statement182( FOLLOW_statement_in_statement182_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_69_in_statement190_bits[]	= { ANTLR_UINT64_LIT(0x7801819881306860), ANTLR_UINT64_LIT(0x00021B9F30D4726A) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_69_in_statement190( FOLLOW_69_in_statement190_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_statement_in_statement192_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_statement_in_statement192( FOLLOW_statement_in_statement192_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_107_in_statement194_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_107_in_statement194( FOLLOW_107_in_statement194_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_parExpression_in_statement196_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_parExpression_in_statement196( FOLLOW_parExpression_in_statement196_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_47_in_statement198_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_47_in_statement198( FOLLOW_47_in_statement198_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_104_in_statement206_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000100000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_104_in_statement206( FOLLOW_104_in_statement206_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_block_in_statement208_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000801) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_block_in_statement208( FOLLOW_block_in_statement208_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_catches_in_statement218_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_catches_in_statement218( FOLLOW_catches_in_statement218_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_75_in_statement220_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000100000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_75_in_statement220( FOLLOW_75_in_statement220_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_block_in_statement222_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_block_in_statement222( FOLLOW_block_in_statement222_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_catches_in_statement232_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_catches_in_statement232( FOLLOW_catches_in_statement232_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_75_in_statement242_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000100000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_75_in_statement242( FOLLOW_75_in_statement242_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_block_in_statement244_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_block_in_statement244( FOLLOW_block_in_statement244_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_97_in_statement260_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_97_in_statement260( FOLLOW_97_in_statement260_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_parExpression_in_statement262_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000100000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_parExpression_in_statement262( FOLLOW_parExpression_in_statement262_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_108_in_statement264_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0001000000000010) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_108_in_statement264( FOLLOW_108_in_statement264_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_switchBlockStatementGroups_in_statement266_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0001000000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_switchBlockStatementGroups_in_statement266( FOLLOW_switchBlockStatementGroups_in_statement266_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_112_in_statement268_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_112_in_statement268( FOLLOW_112_in_statement268_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_98_in_statement276_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_98_in_statement276( FOLLOW_98_in_statement276_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_parExpression_in_statement278_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000100000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_parExpression_in_statement278( FOLLOW_parExpression_in_statement278_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_block_in_statement280_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_block_in_statement280( FOLLOW_block_in_statement280_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_92_in_statement288_bits[]	= { ANTLR_UINT64_LIT(0x5001819881306860), ANTLR_UINT64_LIT(0x0002028920D41242) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_92_in_statement288( FOLLOW_92_in_statement288_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_expression_in_statement290_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_expression_in_statement290( FOLLOW_expression_in_statement290_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_47_in_statement293_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_47_in_statement293( FOLLOW_47_in_statement293_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_100_in_statement301_bits[]	= { ANTLR_UINT64_LIT(0x5001019881306860), ANTLR_UINT64_LIT(0x0002028920D41242) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_100_in_statement301( FOLLOW_100_in_statement301_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_expression_in_statement303_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_expression_in_statement303( FOLLOW_expression_in_statement303_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_47_in_statement305_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_47_in_statement305( FOLLOW_47_in_statement305_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_61_in_statement313_bits[]	= { ANTLR_UINT64_LIT(0x0000800000004000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_61_in_statement313( FOLLOW_61_in_statement313_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_Identifier_in_statement315_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_Identifier_in_statement315( FOLLOW_Identifier_in_statement315_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_47_in_statement318_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_47_in_statement318( FOLLOW_47_in_statement318_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_67_in_statement326_bits[]	= { ANTLR_UINT64_LIT(0x0000800000004000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_67_in_statement326( FOLLOW_67_in_statement326_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_Identifier_in_statement328_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_Identifier_in_statement328( FOLLOW_Identifier_in_statement328_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_47_in_statement331_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_47_in_statement331( FOLLOW_47_in_statement331_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_47_in_statement339_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_47_in_statement339( FOLLOW_47_in_statement339_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_statementExpression_in_statement347_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_statementExpression_in_statement347( FOLLOW_statementExpression_in_statement347_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_47_in_statement349_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_47_in_statement349( FOLLOW_47_in_statement349_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_Identifier_in_statement357_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_Identifier_in_statement357( FOLLOW_Identifier_in_statement357_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_46_in_statement359_bits[]	= { ANTLR_UINT64_LIT(0x7801819881306860), ANTLR_UINT64_LIT(0x00021B9F30D4726A) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_46_in_statement359( FOLLOW_46_in_statement359_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_statement_in_statement361_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_statement_in_statement361( FOLLOW_statement_in_statement361_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_catchClause_in_catches373_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000001) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_catchClause_in_catches373( FOLLOW_catchClause_in_catches373_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_catchClause_in_catches376_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000001) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_catchClause_in_catches376( FOLLOW_catchClause_in_catches376_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_64_in_catchClause390_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_64_in_catchClause390( FOLLOW_64_in_catchClause390_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_31_in_catchClause392_bits[]	= { ANTLR_UINT64_LIT(0x5020000000004000), ANTLR_UINT64_LIT(0x0000000020141442) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_31_in_catchClause392( FOLLOW_31_in_catchClause392_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_formalParameter_in_catchClause394_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_formalParameter_in_catchClause394( FOLLOW_formalParameter_in_catchClause394_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_32_in_catchClause396_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000100000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_32_in_catchClause396( FOLLOW_32_in_catchClause396_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_block_in_catchClause398_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_block_in_catchClause398( FOLLOW_block_in_catchClause398_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_variableModifier_in_formalParameter409_bits[]	= { ANTLR_UINT64_LIT(0x5020000000004000), ANTLR_UINT64_LIT(0x0000000020141442) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_variableModifier_in_formalParameter409( FOLLOW_variableModifier_in_formalParameter409_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_type_in_formalParameter412_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_type_in_formalParameter412( FOLLOW_type_in_formalParameter412_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_variableDeclaratorId_in_formalParameter414_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_variableDeclaratorId_in_formalParameter414( FOLLOW_variableDeclaratorId_in_formalParameter414_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups428_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups428( FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups428_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_switchLabel_in_switchBlockStatementGroup442_bits[]	= { ANTLR_UINT64_LIT(0x7C218198813068E2), ANTLR_UINT64_LIT(0x00021FDFFEFC766E) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_switchLabel_in_switchBlockStatementGroup442( FOLLOW_switchLabel_in_switchBlockStatementGroup442_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_blockStatement_in_switchBlockStatementGroup444_bits[]	= { ANTLR_UINT64_LIT(0x7C218198813068E2), ANTLR_UINT64_LIT(0x00021FDFFEFC766E) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_blockStatement_in_switchBlockStatementGroup444( FOLLOW_blockStatement_in_switchBlockStatementGroup444_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_63_in_switchLabel457_bits[]	= { ANTLR_UINT64_LIT(0x5001019881306860), ANTLR_UINT64_LIT(0x0002028920D41242) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_63_in_switchLabel457( FOLLOW_63_in_switchLabel457_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_constantExpression_in_switchLabel459_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_constantExpression_in_switchLabel459( FOLLOW_constantExpression_in_switchLabel459_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_46_in_switchLabel461_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_46_in_switchLabel461( FOLLOW_46_in_switchLabel461_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_63_in_switchLabel468_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_63_in_switchLabel468( FOLLOW_63_in_switchLabel468_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_enumConstantName_in_switchLabel470_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_enumConstantName_in_switchLabel470( FOLLOW_enumConstantName_in_switchLabel470_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_46_in_switchLabel472_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_46_in_switchLabel472( FOLLOW_46_in_switchLabel472_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_68_in_switchLabel479_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_68_in_switchLabel479( FOLLOW_68_in_switchLabel479_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_46_in_switchLabel481_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_46_in_switchLabel481( FOLLOW_46_in_switchLabel481_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_38_in_moreStatementExpressions494_bits[]	= { ANTLR_UINT64_LIT(0x5001019881306860), ANTLR_UINT64_LIT(0x0002028920D41242) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_38_in_moreStatementExpressions494( FOLLOW_38_in_moreStatementExpressions494_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_statementExpression_in_moreStatementExpressions496_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_statementExpression_in_moreStatementExpressions496( FOLLOW_statementExpression_in_moreStatementExpressions496_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_forVarControl_in_forControl517_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_forVarControl_in_forControl517( FOLLOW_forVarControl_in_forControl517_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_forInit_in_forControl522_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_forInit_in_forControl522( FOLLOW_forInit_in_forControl522_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_47_in_forControl525_bits[]	= { ANTLR_UINT64_LIT(0x5001819881306860), ANTLR_UINT64_LIT(0x0002028920D41242) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_47_in_forControl525( FOLLOW_47_in_forControl525_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_expression_in_forControl527_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_expression_in_forControl527( FOLLOW_expression_in_forControl527_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_47_in_forControl530_bits[]	= { ANTLR_UINT64_LIT(0x5001019881306862), ANTLR_UINT64_LIT(0x0002028920D41242) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_47_in_forControl530( FOLLOW_47_in_forControl530_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_forUpdate_in_forControl532_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_forUpdate_in_forControl532( FOLLOW_forUpdate_in_forControl532_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_variableModifier_in_forInit544_bits[]	= { ANTLR_UINT64_LIT(0x5020000000004000), ANTLR_UINT64_LIT(0x0000000020141442) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_variableModifier_in_forInit544( FOLLOW_variableModifier_in_forInit544_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_type_in_forInit547_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_type_in_forInit547( FOLLOW_type_in_forInit547_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_variableDeclarators_in_forInit549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_variableDeclarators_in_forInit549( FOLLOW_variableDeclarators_in_forInit549_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_expressionList_in_forInit554_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_expressionList_in_forInit554( FOLLOW_expressionList_in_forInit554_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_variableModifier_in_forVarControl566_bits[]	= { ANTLR_UINT64_LIT(0x5020000000004000), ANTLR_UINT64_LIT(0x0000000020141442) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_variableModifier_in_forVarControl566( FOLLOW_variableModifier_in_forVarControl566_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_type_in_forVarControl569_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_type_in_forVarControl569( FOLLOW_type_in_forVarControl569_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_Identifier_in_forVarControl571_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_Identifier_in_forVarControl571( FOLLOW_Identifier_in_forVarControl571_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_46_in_forVarControl573_bits[]	= { ANTLR_UINT64_LIT(0x5001019881306860), ANTLR_UINT64_LIT(0x0002028920D41242) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_46_in_forVarControl573( FOLLOW_46_in_forVarControl573_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_expression_in_forVarControl575_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_expression_in_forVarControl575( FOLLOW_expression_in_forVarControl575_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_expressionList_in_forUpdate586_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_expressionList_in_forUpdate586( FOLLOW_expressionList_in_forUpdate586_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_localVariableDeclaration_in_synpred2_JavaStat59_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_localVariableDeclaration_in_synpred2_JavaStat59( FOLLOW_localVariableDeclaration_in_synpred2_JavaStat59_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_classOrInterfaceDeclaration_in_synpred3_JavaStat64_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_classOrInterfaceDeclaration_in_synpred3_JavaStat64( FOLLOW_classOrInterfaceDeclaration_in_synpred3_JavaStat64_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_catches_in_synpred12_JavaStat218_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_catches_in_synpred12_JavaStat218( FOLLOW_catches_in_synpred12_JavaStat218_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_75_in_synpred12_JavaStat220_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000100000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_75_in_synpred12_JavaStat220( FOLLOW_75_in_synpred12_JavaStat220_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_block_in_synpred12_JavaStat222_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_block_in_synpred12_JavaStat222( FOLLOW_block_in_synpred12_JavaStat222_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_catches_in_synpred13_JavaStat232_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_catches_in_synpred13_JavaStat232( FOLLOW_catches_in_synpred13_JavaStat232_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_63_in_synpred30_JavaStat457_bits[]	= { ANTLR_UINT64_LIT(0x5001019881306860), ANTLR_UINT64_LIT(0x0002028920D41242) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_63_in_synpred30_JavaStat457( FOLLOW_63_in_synpred30_JavaStat457_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_constantExpression_in_synpred30_JavaStat459_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_constantExpression_in_synpred30_JavaStat459( FOLLOW_constantExpression_in_synpred30_JavaStat459_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_46_in_synpred30_JavaStat461_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_46_in_synpred30_JavaStat461( FOLLOW_46_in_synpred30_JavaStat461_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_63_in_synpred31_JavaStat468_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_63_in_synpred31_JavaStat468( FOLLOW_63_in_synpred31_JavaStat468_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_enumConstantName_in_synpred31_JavaStat470_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_enumConstantName_in_synpred31_JavaStat470( FOLLOW_enumConstantName_in_synpred31_JavaStat470_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_46_in_synpred31_JavaStat472_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_46_in_synpred31_JavaStat472( FOLLOW_46_in_synpred31_JavaStat472_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_forVarControl_in_synpred33_JavaStat517_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_forVarControl_in_synpred33_JavaStat517( FOLLOW_forVarControl_in_synpred33_JavaStat517_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_variableModifier_in_synpred38_JavaStat544_bits[]	= { ANTLR_UINT64_LIT(0x5020000000004000), ANTLR_UINT64_LIT(0x0000000020141442) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_variableModifier_in_synpred38_JavaStat544( FOLLOW_variableModifier_in_synpred38_JavaStat544_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_type_in_synpred38_JavaStat547_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_type_in_synpred38_JavaStat547( FOLLOW_type_in_synpred38_JavaStat547_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: Java_JavaStat  */
static	ANTLR_BITWORD FOLLOW_variableDeclarators_in_synpred38_JavaStat549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  Java_JavaStatImplTraits::BitsetListType FOLLOW_variableDeclarators_in_synpred38_JavaStat549( FOLLOW_variableDeclarators_in_synpred38_JavaStat549_bits, 1 );


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start methodBody
 * JavaStat.g:11:1: methodBody : block ;
 */
void
Java_JavaStat::methodBody()
{
        Java_JavaStatImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ANTLR_MARKER methodBody_StartIndex;

    /* Initialize rule variables
     */
    methodBody_StartIndex = this->index();


    if ( (this->get_backtracking()>0) && (this->haveParsedRule(343)) )
    {
        {
        }



        return ;
    }


 
    {
        // JavaStat.g:12:5: ( block )
        // JavaStat.g:12:9: block
        {
            this->followPush(FOLLOW_block_in_methodBody28);
            block();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemethodBodyEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemethodBodyEx; /* Prevent compiler warnings */
    rulemethodBodyEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(343, methodBody_StartIndex); }

    return ;
}
/* $ANTLR end methodBody */

/**
 * $ANTLR start block
 * JavaStat.g:15:1: block : '{' ( blockStatement )* '}' ;
 */
void
Java_JavaStat::block()
{
        Java_JavaStatImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ANTLR_MARKER block_StartIndex;

    /* Initialize rule variables
     */
    block_StartIndex = this->index();


    if ( (this->get_backtracking()>0) && (this->haveParsedRule(344)) )
    {
        {
        }



        return ;
    }


 
    {
        // JavaStat.g:16:2: ( '{' ( blockStatement )* '}' )
        // JavaStat.g:16:4: '{' ( blockStatement )* '}'
        {
             this->matchToken(108, &FOLLOW_108_in_block42);
            if  (this->hasException())
            {
                goto ruleblockEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // JavaStat.g:16:8: ( blockStatement )*

            for (;;)
            {
                int alt1=2;
                switch ( this->LA(1) )
                {
                case CharacterLiteral:
                case DecimalLiteral:
                case ENUM:
                case FloatingPointLiteral:
                case HexLiteral:
                case Identifier:
                case OctalLiteral:
                case StringLiteral:
                case 24:
                case 31:
                case 35:
                case 36:
                case 39:
                case 40:
                case 47:
                case 48:
                case 53:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 65:
                case 66:
                case 67:
                case 69:
                case 70:
                case 73:
                case 74:
                case 76:
                case 77:
                case 78:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 113:
                	{
                		alt1=1;
                	}
                    break;

                }

                switch (alt1)
                {
            	case 1:
            	    // JavaStat.g:16:8: blockStatement
            	    {
            	        this->followPush(FOLLOW_blockStatement_in_block44);
            	        blockStatement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleblockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


             this->matchToken(112, &FOLLOW_112_in_block47);
            if  (this->hasException())
            {
                goto ruleblockEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleblockEx; /* Prevent compiler warnings */
    ruleblockEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(344, block_StartIndex); }

    return ;
}
/* $ANTLR end block */

/**
 * $ANTLR start blockStatement
 * JavaStat.g:19:1: blockStatement : ( localVariableDeclaration | classOrInterfaceDeclaration | statement );
 */
void
Java_JavaStat::blockStatement()
{
        Java_JavaStatImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ANTLR_MARKER blockStatement_StartIndex;

    /* Initialize rule variables
     */
    blockStatement_StartIndex = this->index();


    if ( (this->get_backtracking()>0) && (this->haveParsedRule(345)) )
    {
        {
        }



        return ;
    }


 
    {
        {
            //  JavaStat.g:20:2: ( localVariableDeclaration | classOrInterfaceDeclaration | statement )

            ANTLR_UINT32 alt2;

            alt2=3;

            switch ( this->LA(1) )
            {
            case 74:
            	{
            		switch ( this->LA(2) )
            		{
            		case Identifier:
            		case 60:
            		case 62:
            		case 65:
            		case 70:
            		case 76:
            		case 82:
            		case 84:
            		case 93:
            			{
            				alt2=1;
            			}
            		    break;
            		case 74:
            			{
            				{
            				    int LA2_51 = this->LA(3);
            				    if ( (this->msynpred( antlr3::ClassForwarder<synpred2_JavaStat>() )))
            				    {
            				        alt2=1;
            				    }
            				    else if ( (this->msynpred( antlr3::ClassForwarder<synpred3_JavaStat>() )))
            				    {
            				        alt2=2;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            return ;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 2 );
            				        ex->set_state( 51 );


            				        goto ruleblockStatementEx;

            				    }
            				}
            			}
            		    break;
            		case 53:
            			{
            				{
            				    int LA2_52 = this->LA(3);
            				    if ( (this->msynpred( antlr3::ClassForwarder<synpred2_JavaStat>() )))
            				    {
            				        alt2=1;
            				    }
            				    else if ( (this->msynpred( antlr3::ClassForwarder<synpred3_JavaStat>() )))
            				    {
            				        alt2=2;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            return ;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 2 );
            				        ex->set_state( 52 );


            				        goto ruleblockStatementEx;

            				    }
            				}
            			}
            		    break;
            		case ENUM:
            		case 58:
            		case 66:
            		case 83:
            		case 85:
            		case 89:
            		case 90:
            		case 91:
            		case 94:
            		case 95:
            		case 98:
            		case 102:
            		case 106:
            			{
            				alt2=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return ;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 2 );
            		    ex->set_state( 1 );


            		    goto ruleblockStatementEx;

            		}

            	}
                break;
            case 53:
            	{
            		switch ( this->LA(2) )
            		{
            		case 83:
            			{
            				alt2=2;
            			}
            		    break;
            		case Identifier:
            			{
            				{
            				    int LA2_67 = this->LA(3);
            				    if ( (this->msynpred( antlr3::ClassForwarder<synpred2_JavaStat>() )))
            				    {
            				        alt2=1;
            				    }
            				    else if ( (this->msynpred( antlr3::ClassForwarder<synpred3_JavaStat>() )))
            				    {
            				        alt2=2;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            return ;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 2 );
            				        ex->set_state( 67 );


            				        goto ruleblockStatementEx;

            				    }
            				}
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return ;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 2 );
            		    ex->set_state( 2 );


            		    goto ruleblockStatementEx;

            		}

            	}
                break;
            case Identifier:
            	{
            		switch ( this->LA(2) )
            		{
            		case 25:
            		case 26:
            		case 27:
            		case 28:
            		case 29:
            		case 30:
            		case 31:
            		case 33:
            		case 34:
            		case 35:
            		case 36:
            		case 37:
            		case 39:
            		case 40:
            		case 41:
            		case 44:
            		case 45:
            		case 46:
            		case 47:
            		case 49:
            		case 50:
            		case 51:
            		case 52:
            		case 56:
            		case 57:
            		case 81:
            		case 109:
            		case 110:
            		case 111:
            			{
            				alt2=3;
            			}
            		    break;
            		case 48:
            			{
            				{
            				    int LA2_69 = this->LA(3);
            				    if ( (this->msynpred( antlr3::ClassForwarder<synpred2_JavaStat>() )))
            				    {
            				        alt2=1;
            				    }
            				    else if ( (true))
            				    {
            				        alt2=3;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            return ;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 2 );
            				        ex->set_state( 69 );


            				        goto ruleblockStatementEx;

            				    }
            				}
            			}
            		    break;
            		case 42:
            			{
            				{
            				    int LA2_70 = this->LA(3);
            				    if ( (this->msynpred( antlr3::ClassForwarder<synpred2_JavaStat>() )))
            				    {
            				        alt2=1;
            				    }
            				    else if ( (true))
            				    {
            				        alt2=3;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            return ;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 2 );
            				        ex->set_state( 70 );


            				        goto ruleblockStatementEx;

            				    }
            				}
            			}
            		    break;
            		case 54:
            			{
            				{
            				    int LA2_71 = this->LA(3);
            				    if ( (this->msynpred( antlr3::ClassForwarder<synpred2_JavaStat>() )))
            				    {
            				        alt2=1;
            				    }
            				    else if ( (true))
            				    {
            				        alt2=3;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            return ;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 2 );
            				        ex->set_state( 71 );


            				        goto ruleblockStatementEx;

            				    }
            				}
            			}
            		    break;
            		case Identifier:
            			{
            				alt2=1;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return ;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 2 );
            		    ex->set_state( 3 );


            		    goto ruleblockStatementEx;

            		}

            	}
                break;
            case 60:
            case 62:
            case 65:
            case 70:
            case 76:
            case 82:
            case 84:
            case 93:
            	{
            		switch ( this->LA(2) )
            		{
            		case 54:
            			{
            				{
            				    int LA2_97 = this->LA(3);
            				    if ( (this->msynpred( antlr3::ClassForwarder<synpred2_JavaStat>() )))
            				    {
            				        alt2=1;
            				    }
            				    else if ( (true))
            				    {
            				        alt2=3;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            return ;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 2 );
            				        ex->set_state( 97 );


            				        goto ruleblockStatementEx;

            				    }
            				}
            			}
            		    break;
            		case Identifier:
            			{
            				alt2=1;
            			}
            		    break;
            		case 42:
            			{
            				alt2=3;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return ;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 2 );
            		    ex->set_state( 4 );


            		    goto ruleblockStatementEx;

            		}

            	}
                break;
            case ENUM:
            case 58:
            case 66:
            case 83:
            case 85:
            case 89:
            case 90:
            case 91:
            case 94:
            case 95:
            case 102:
            case 106:
            	{
            		alt2=2;
            	}
                break;
            case 98:
            	{
            		switch ( this->LA(2) )
            		{
            		case ENUM:
            		case 53:
            		case 58:
            		case 66:
            		case 74:
            		case 83:
            		case 85:
            		case 89:
            		case 90:
            		case 91:
            		case 94:
            		case 95:
            		case 98:
            		case 102:
            		case 106:
            			{
            				alt2=2;
            			}
            		    break;
            		case 31:
            			{
            				alt2=3;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return ;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 2 );
            		    ex->set_state( 11 );


            		    goto ruleblockStatementEx;

            		}

            	}
                break;
            case CharacterLiteral:
            case DecimalLiteral:
            case FloatingPointLiteral:
            case HexLiteral:
            case OctalLiteral:
            case StringLiteral:
            case 24:
            case 31:
            case 35:
            case 36:
            case 39:
            case 40:
            case 47:
            case 48:
            case 59:
            case 61:
            case 67:
            case 69:
            case 73:
            case 77:
            case 78:
            case 86:
            case 87:
            case 92:
            case 96:
            case 97:
            case 99:
            case 100:
            case 103:
            case 104:
            case 105:
            case 107:
            case 108:
            case 113:
            	{
            		alt2=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 2 );
                ex->set_state( 0 );


                goto ruleblockStatementEx;

            }

            switch (alt2)
            {
        	case 1:
        	    // JavaStat.g:20:4: localVariableDeclaration
        	    {
        	        this->followPush(FOLLOW_localVariableDeclaration_in_blockStatement59);
        	        localVariableDeclaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleblockStatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // JavaStat.g:21:4: classOrInterfaceDeclaration
        	    {
        	        this->followPush(FOLLOW_classOrInterfaceDeclaration_in_blockStatement64);
        	        m_gJava->classOrInterfaceDeclaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleblockStatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // JavaStat.g:22:8: statement
        	    {
        	        this->followPush(FOLLOW_statement_in_blockStatement73);
        	        statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleblockStatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleblockStatementEx; /* Prevent compiler warnings */
    ruleblockStatementEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(345, blockStatement_StartIndex); }

    return ;
}
/* $ANTLR end blockStatement */

/**
 * $ANTLR start localVariableDeclaration
 * JavaStat.g:25:1: localVariableDeclaration : ( variableModifier )* type variableDeclarators ';' ;
 */
void
Java_JavaStat::localVariableDeclaration()
{
        Java_JavaStatImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ANTLR_MARKER localVariableDeclaration_StartIndex;

    /* Initialize rule variables
     */
    localVariableDeclaration_StartIndex = this->index();


    if ( (this->get_backtracking()>0) && (this->haveParsedRule(346)) )
    {
        {
        }



        return ;
    }


 
    {
        // JavaStat.g:26:2: ( ( variableModifier )* type variableDeclarators ';' )
        // JavaStat.g:26:4: ( variableModifier )* type variableDeclarators ';'
        {
            // JavaStat.g:26:4: ( variableModifier )*

            for (;;)
            {
                int alt3=2;
                switch ( this->LA(1) )
                {
                case 53:
                case 74:
                	{
                		alt3=1;
                	}
                    break;

                }

                switch (alt3)
                {
            	case 1:
            	    // JavaStat.g:26:4: variableModifier
            	    {
            	        this->followPush(FOLLOW_variableModifier_in_localVariableDeclaration85);
            	        m_gJava->variableModifier();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelocalVariableDeclarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_type_in_localVariableDeclaration88);
            m_gJava->type();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelocalVariableDeclarationEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_variableDeclarators_in_localVariableDeclaration90);
            m_gJava->variableDeclarators();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelocalVariableDeclarationEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(47, &FOLLOW_47_in_localVariableDeclaration92);
            if  (this->hasException())
            {
                goto rulelocalVariableDeclarationEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelocalVariableDeclarationEx; /* Prevent compiler warnings */
    rulelocalVariableDeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(346, localVariableDeclaration_StartIndex); }

    return ;
}
/* $ANTLR end localVariableDeclaration */

/**
 * $ANTLR start statement
 * JavaStat.g:29:1: statement : ( block | 'assert' expression ( ':' expression )? ';' | 'if' parExpression statement ( options {k=1; backtrack=false; } : 'else' statement )? | 'for' '(' forControl ')' statement | 'while' parExpression statement | 'do' statement 'while' parExpression ';' | 'try' block ( catches 'finally' block | catches | 'finally' block ) | 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block | 'return' ( expression )? ';' | 'throw' expression ';' | 'break' ( Identifier )? ';' | 'continue' ( Identifier )? ';' | ';' | statementExpression ';' | Identifier ':' statement );
 */
void
Java_JavaStat::statement()
{
        Java_JavaStatImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ANTLR_MARKER statement_StartIndex;

    /* Initialize rule variables
     */
    statement_StartIndex = this->index();


    if ( (this->get_backtracking()>0) && (this->haveParsedRule(347)) )
    {
        {
        }



        return ;
    }


 
    {
        {
            //  JavaStat.g:30:2: ( block | 'assert' expression ( ':' expression )? ';' | 'if' parExpression statement ( options {k=1; backtrack=false; } : 'else' statement )? | 'for' '(' forControl ')' statement | 'while' parExpression statement | 'do' statement 'while' parExpression ';' | 'try' block ( catches 'finally' block | catches | 'finally' block ) | 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block | 'return' ( expression )? ';' | 'throw' expression ';' | 'break' ( Identifier )? ';' | 'continue' ( Identifier )? ';' | ';' | statementExpression ';' | Identifier ':' statement )

            ANTLR_UINT32 alt10;

            alt10=16;

            switch ( this->LA(1) )
            {
            case 108:
            	{
            		alt10=1;
            	}
                break;
            case 59:
            	{
            		alt10=2;
            	}
                break;
            case 78:
            	{
            		alt10=3;
            	}
                break;
            case 77:
            	{
            		alt10=4;
            	}
                break;
            case 107:
            	{
            		alt10=5;
            	}
                break;
            case 69:
            	{
            		alt10=6;
            	}
                break;
            case 104:
            	{
            		alt10=7;
            	}
                break;
            case 97:
            	{
            		alt10=8;
            	}
                break;
            case 98:
            	{
            		alt10=9;
            	}
                break;
            case 92:
            	{
            		alt10=10;
            	}
                break;
            case 100:
            	{
            		alt10=11;
            	}
                break;
            case 61:
            	{
            		alt10=12;
            	}
                break;
            case 67:
            	{
            		alt10=13;
            	}
                break;
            case 47:
            	{
            		alt10=14;
            	}
                break;
            case CharacterLiteral:
            case DecimalLiteral:
            case FloatingPointLiteral:
            case HexLiteral:
            case OctalLiteral:
            case StringLiteral:
            case 24:
            case 31:
            case 35:
            case 36:
            case 39:
            case 40:
            case 48:
            case 60:
            case 62:
            case 65:
            case 70:
            case 73:
            case 76:
            case 82:
            case 84:
            case 86:
            case 87:
            case 93:
            case 96:
            case 99:
            case 103:
            case 105:
            case 113:
            	{
            		alt10=15;
            	}
                break;
            case Identifier:
            	{
            		switch ( this->LA(2) )
            		{
            		case 46:
            			{
            				alt10=16;
            			}
            		    break;
            		case 25:
            		case 26:
            		case 27:
            		case 28:
            		case 29:
            		case 30:
            		case 31:
            		case 33:
            		case 34:
            		case 35:
            		case 36:
            		case 37:
            		case 39:
            		case 40:
            		case 41:
            		case 42:
            		case 44:
            		case 45:
            		case 47:
            		case 48:
            		case 49:
            		case 50:
            		case 51:
            		case 52:
            		case 54:
            		case 56:
            		case 57:
            		case 81:
            		case 109:
            		case 110:
            		case 111:
            			{
            				alt10=15;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return ;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 10 );
            		    ex->set_state( 32 );


            		    goto rulestatementEx;

            		}

            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 10 );
                ex->set_state( 0 );


                goto rulestatementEx;

            }

            switch (alt10)
            {
        	case 1:
        	    // JavaStat.g:30:4: block
        	    {
        	        this->followPush(FOLLOW_block_in_statement104);
        	        block();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // JavaStat.g:31:7: 'assert' expression ( ':' expression )? ';'
        	    {
        	         this->matchToken(59, &FOLLOW_59_in_statement112);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_expression_in_statement114);
        	        m_gJava->expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // JavaStat.g:31:27: ( ':' expression )?
        	        {
        	            int alt4=2;
        	            switch ( this->LA(1) )
        	            {
        	                case 46:
        	                	{
        	                		alt4=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt4)
        	            {
        	        	case 1:
        	        	    // JavaStat.g:31:28: ':' expression
        	        	    {
        	        	         this->matchToken(46, &FOLLOW_46_in_statement117);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        this->followPush(FOLLOW_expression_in_statement119);
        	        	        m_gJava->expression();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(47, &FOLLOW_47_in_statement123);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // JavaStat.g:32:7: 'if' parExpression statement ( options {k=1; backtrack=false; } : 'else' statement )?
        	    {
        	         this->matchToken(78, &FOLLOW_78_in_statement131);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_parExpression_in_statement133);
        	        m_gJava->parExpression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_statement_in_statement135);
        	        statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // JavaStat.g:32:36: ( options {k=1; backtrack=false; } : 'else' statement )?
        	        {
        	            int alt5=2;
        	            switch ( this->LA(1) )
        	            {
        	                case 71:
        	                	{
        	                		{
        	                		    int LA5_1 = this->LA(2);
        	                		    if ( (true))
        	                		    {
        	                		        alt5=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt5)
        	            {
        	        	case 1:
        	        	    // JavaStat.g:32:69: 'else' statement
        	        	    {
        	        	         this->matchToken(71, &FOLLOW_71_in_statement150);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        this->followPush(FOLLOW_statement_in_statement152);
        	        	        statement();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 4:
        	    // JavaStat.g:33:7: 'for' '(' forControl ')' statement
        	    {
        	         this->matchToken(77, &FOLLOW_77_in_statement162);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(31, &FOLLOW_31_in_statement164);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_forControl_in_statement166);
        	        forControl();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(32, &FOLLOW_32_in_statement168);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_statement_in_statement170);
        	        statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 5:
        	    // JavaStat.g:34:7: 'while' parExpression statement
        	    {
        	         this->matchToken(107, &FOLLOW_107_in_statement178);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_parExpression_in_statement180);
        	        m_gJava->parExpression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_statement_in_statement182);
        	        statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 6:
        	    // JavaStat.g:35:7: 'do' statement 'while' parExpression ';'
        	    {
        	         this->matchToken(69, &FOLLOW_69_in_statement190);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_statement_in_statement192);
        	        statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(107, &FOLLOW_107_in_statement194);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_parExpression_in_statement196);
        	        m_gJava->parExpression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(47, &FOLLOW_47_in_statement198);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 7:
        	    // JavaStat.g:36:7: 'try' block ( catches 'finally' block | catches | 'finally' block )
        	    {
        	         this->matchToken(104, &FOLLOW_104_in_statement206);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_block_in_statement208);
        	        block();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // JavaStat.g:37:7: ( catches 'finally' block | catches | 'finally' block )
        	        {
        	            int alt6=3;
        	            switch ( this->LA(1) )
        	            {
        	            case 64:
        	            	{
        	            		switch ( this->LA(2) )
        	            		{
        	            		case 31:
        	            			{
        	            				{
        	            				    int LA6_3 = this->LA(3);
        	            				    if ( (this->msynpred( antlr3::ClassForwarder<synpred12_JavaStat>() )))
        	            				    {
        	            				        alt6=1;
        	            				    }
        	            				    else if ( (this->msynpred( antlr3::ClassForwarder<synpred13_JavaStat>() )))
        	            				    {
        	            				        alt6=2;
        	            				    }
        	            				    else
        	            				    {
        	            				        if (this->get_backtracking()>0)
        	            				        {
        	            				            this->set_failedflag( true );
        	            				            return ;
        	            				        }


        	            				        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            				        ex->set_decisionNum( 6 );
        	            				        ex->set_state( 3 );


        	            				        goto rulestatementEx;

        	            				    }
        	            				}
        	            			}
        	            		    break;

        	            		default:
        	            		    if (this->get_backtracking()>0)
        	            		    {
        	            		        this->set_failedflag( true );
        	            		        return ;
        	            		    }

        	            		    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		    ex->set_decisionNum( 6 );
        	            		    ex->set_state( 1 );


        	            		    goto rulestatementEx;

        	            		}

        	            	}
        	                break;
        	            case 75:
        	            	{
        	            		alt6=3;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return ;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 6 );
        	                ex->set_state( 0 );


        	                goto rulestatementEx;

        	            }

        	            switch (alt6)
        	            {
        	        	case 1:
        	        	    // JavaStat.g:37:9: catches 'finally' block
        	        	    {
        	        	        this->followPush(FOLLOW_catches_in_statement218);
        	        	        catches();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	         this->matchToken(75, &FOLLOW_75_in_statement220);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        this->followPush(FOLLOW_block_in_statement222);
        	        	        block();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // JavaStat.g:38:9: catches
        	        	    {
        	        	        this->followPush(FOLLOW_catches_in_statement232);
        	        	        catches();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // JavaStat.g:39:9: 'finally' block
        	        	    {
        	        	         this->matchToken(75, &FOLLOW_75_in_statement242);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        this->followPush(FOLLOW_block_in_statement244);
        	        	        block();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 8:
        	    // JavaStat.g:41:7: 'switch' parExpression '{' switchBlockStatementGroups '}'
        	    {
        	         this->matchToken(97, &FOLLOW_97_in_statement260);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_parExpression_in_statement262);
        	        m_gJava->parExpression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(108, &FOLLOW_108_in_statement264);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_switchBlockStatementGroups_in_statement266);
        	        switchBlockStatementGroups();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(112, &FOLLOW_112_in_statement268);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 9:
        	    // JavaStat.g:42:7: 'synchronized' parExpression block
        	    {
        	         this->matchToken(98, &FOLLOW_98_in_statement276);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_parExpression_in_statement278);
        	        m_gJava->parExpression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_block_in_statement280);
        	        block();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 10:
        	    // JavaStat.g:43:7: 'return' ( expression )? ';'
        	    {
        	         this->matchToken(92, &FOLLOW_92_in_statement288);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // JavaStat.g:43:16: ( expression )?
        	        {
        	            int alt7=2;
        	            switch ( this->LA(1) )
        	            {
        	                case CharacterLiteral:
        	                case DecimalLiteral:
        	                case FloatingPointLiteral:
        	                case HexLiteral:
        	                case Identifier:
        	                case OctalLiteral:
        	                case StringLiteral:
        	                case 24:
        	                case 31:
        	                case 35:
        	                case 36:
        	                case 39:
        	                case 40:
        	                case 48:
        	                case 60:
        	                case 62:
        	                case 65:
        	                case 70:
        	                case 73:
        	                case 76:
        	                case 82:
        	                case 84:
        	                case 86:
        	                case 87:
        	                case 93:
        	                case 96:
        	                case 99:
        	                case 103:
        	                case 105:
        	                case 113:
        	                	{
        	                		alt7=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt7)
        	            {
        	        	case 1:
        	        	    // JavaStat.g:43:16: expression
        	        	    {
        	        	        this->followPush(FOLLOW_expression_in_statement290);
        	        	        m_gJava->expression();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(47, &FOLLOW_47_in_statement293);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 11:
        	    // JavaStat.g:44:7: 'throw' expression ';'
        	    {
        	         this->matchToken(100, &FOLLOW_100_in_statement301);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_expression_in_statement303);
        	        m_gJava->expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(47, &FOLLOW_47_in_statement305);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 12:
        	    // JavaStat.g:45:7: 'break' ( Identifier )? ';'
        	    {
        	         this->matchToken(61, &FOLLOW_61_in_statement313);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // JavaStat.g:45:15: ( Identifier )?
        	        {
        	            int alt8=2;
        	            switch ( this->LA(1) )
        	            {
        	                case Identifier:
        	                	{
        	                		alt8=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt8)
        	            {
        	        	case 1:
        	        	    // JavaStat.g:45:15: Identifier
        	        	    {
        	        	         this->matchToken(Identifier, &FOLLOW_Identifier_in_statement315);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(47, &FOLLOW_47_in_statement318);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 13:
        	    // JavaStat.g:46:7: 'continue' ( Identifier )? ';'
        	    {
        	         this->matchToken(67, &FOLLOW_67_in_statement326);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // JavaStat.g:46:18: ( Identifier )?
        	        {
        	            int alt9=2;
        	            switch ( this->LA(1) )
        	            {
        	                case Identifier:
        	                	{
        	                		alt9=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt9)
        	            {
        	        	case 1:
        	        	    // JavaStat.g:46:18: Identifier
        	        	    {
        	        	         this->matchToken(Identifier, &FOLLOW_Identifier_in_statement328);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(47, &FOLLOW_47_in_statement331);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 14:
        	    // JavaStat.g:47:7: ';'
        	    {
        	         this->matchToken(47, &FOLLOW_47_in_statement339);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 15:
        	    // JavaStat.g:48:7: statementExpression ';'
        	    {
        	        this->followPush(FOLLOW_statementExpression_in_statement347);
        	        m_gJava->statementExpression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(47, &FOLLOW_47_in_statement349);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 16:
        	    // JavaStat.g:49:7: Identifier ':' statement
        	    {
        	         this->matchToken(Identifier, &FOLLOW_Identifier_in_statement357);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(46, &FOLLOW_46_in_statement359);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_statement_in_statement361);
        	        statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(347, statement_StartIndex); }

    return ;
}
/* $ANTLR end statement */

/**
 * $ANTLR start catches
 * JavaStat.g:52:1: catches : catchClause ( catchClause )* ;
 */
void
Java_JavaStat::catches()
{
        Java_JavaStatImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ANTLR_MARKER catches_StartIndex;

    /* Initialize rule variables
     */
    catches_StartIndex = this->index();


    if ( (this->get_backtracking()>0) && (this->haveParsedRule(348)) )
    {
        {
        }



        return ;
    }


 
    {
        // JavaStat.g:53:2: ( catchClause ( catchClause )* )
        // JavaStat.g:53:4: catchClause ( catchClause )*
        {
            this->followPush(FOLLOW_catchClause_in_catches373);
            catchClause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecatchesEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // JavaStat.g:53:16: ( catchClause )*

            for (;;)
            {
                int alt11=2;
                switch ( this->LA(1) )
                {
                case 64:
                	{
                		alt11=1;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    // JavaStat.g:53:17: catchClause
            	    {
            	        this->followPush(FOLLOW_catchClause_in_catches376);
            	        catchClause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecatchesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecatchesEx; /* Prevent compiler warnings */
    rulecatchesEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(348, catches_StartIndex); }

    return ;
}
/* $ANTLR end catches */

/**
 * $ANTLR start catchClause
 * JavaStat.g:56:1: catchClause : 'catch' '(' formalParameter ')' block ;
 */
void
Java_JavaStat::catchClause()
{
        Java_JavaStatImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ANTLR_MARKER catchClause_StartIndex;

    /* Initialize rule variables
     */
    catchClause_StartIndex = this->index();


    if ( (this->get_backtracking()>0) && (this->haveParsedRule(349)) )
    {
        {
        }



        return ;
    }


 
    {
        // JavaStat.g:57:2: ( 'catch' '(' formalParameter ')' block )
        // JavaStat.g:57:4: 'catch' '(' formalParameter ')' block
        {
             this->matchToken(64, &FOLLOW_64_in_catchClause390);
            if  (this->hasException())
            {
                goto rulecatchClauseEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(31, &FOLLOW_31_in_catchClause392);
            if  (this->hasException())
            {
                goto rulecatchClauseEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_formalParameter_in_catchClause394);
            formalParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecatchClauseEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(32, &FOLLOW_32_in_catchClause396);
            if  (this->hasException())
            {
                goto rulecatchClauseEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_block_in_catchClause398);
            block();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecatchClauseEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecatchClauseEx; /* Prevent compiler warnings */
    rulecatchClauseEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(349, catchClause_StartIndex); }

    return ;
}
/* $ANTLR end catchClause */

/**
 * $ANTLR start formalParameter
 * JavaStat.g:60:1: formalParameter : ( variableModifier )* type variableDeclaratorId ;
 */
void
Java_JavaStat::formalParameter()
{
        Java_JavaStatImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ANTLR_MARKER formalParameter_StartIndex;

    /* Initialize rule variables
     */
    formalParameter_StartIndex = this->index();


    if ( (this->get_backtracking()>0) && (this->haveParsedRule(350)) )
    {
        {
        }



        return ;
    }


 
    {
        // JavaStat.g:61:2: ( ( variableModifier )* type variableDeclaratorId )
        // JavaStat.g:61:4: ( variableModifier )* type variableDeclaratorId
        {
            // JavaStat.g:61:4: ( variableModifier )*

            for (;;)
            {
                int alt12=2;
                switch ( this->LA(1) )
                {
                case 53:
                case 74:
                	{
                		alt12=1;
                	}
                    break;

                }

                switch (alt12)
                {
            	case 1:
            	    // JavaStat.g:61:4: variableModifier
            	    {
            	        this->followPush(FOLLOW_variableModifier_in_formalParameter409);
            	        m_gJava->variableModifier();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleformalParameterEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_type_in_formalParameter412);
            m_gJava->type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleformalParameterEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_variableDeclaratorId_in_formalParameter414);
            m_gJava->variableDeclaratorId();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleformalParameterEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleformalParameterEx; /* Prevent compiler warnings */
    ruleformalParameterEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(350, formalParameter_StartIndex); }

    return ;
}
/* $ANTLR end formalParameter */

/**
 * $ANTLR start switchBlockStatementGroups
 * JavaStat.g:64:1: switchBlockStatementGroups : ( switchBlockStatementGroup )* ;
 */
void
Java_JavaStat::switchBlockStatementGroups()
{
        Java_JavaStatImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ANTLR_MARKER switchBlockStatementGroups_StartIndex;

    /* Initialize rule variables
     */
    switchBlockStatementGroups_StartIndex = this->index();


    if ( (this->get_backtracking()>0) && (this->haveParsedRule(351)) )
    {
        {
        }



        return ;
    }


 
    {
        // JavaStat.g:65:2: ( ( switchBlockStatementGroup )* )
        // JavaStat.g:65:4: ( switchBlockStatementGroup )*
        {
            // JavaStat.g:65:4: ( switchBlockStatementGroup )*

            for (;;)
            {
                int alt13=2;
                switch ( this->LA(1) )
                {
                case 63:
                case 68:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    // JavaStat.g:65:5: switchBlockStatementGroup
            	    {
            	        this->followPush(FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups428);
            	        switchBlockStatementGroup();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleswitchBlockStatementGroupsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleswitchBlockStatementGroupsEx; /* Prevent compiler warnings */
    ruleswitchBlockStatementGroupsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(351, switchBlockStatementGroups_StartIndex); }

    return ;
}
/* $ANTLR end switchBlockStatementGroups */

/**
 * $ANTLR start switchBlockStatementGroup
 * JavaStat.g:68:1: switchBlockStatementGroup : switchLabel ( blockStatement )* ;
 */
void
Java_JavaStat::switchBlockStatementGroup()
{
        Java_JavaStatImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ANTLR_MARKER switchBlockStatementGroup_StartIndex;

    /* Initialize rule variables
     */
    switchBlockStatementGroup_StartIndex = this->index();


    if ( (this->get_backtracking()>0) && (this->haveParsedRule(352)) )
    {
        {
        }



        return ;
    }


 
    {
        // JavaStat.g:69:2: ( switchLabel ( blockStatement )* )
        // JavaStat.g:69:4: switchLabel ( blockStatement )*
        {
            this->followPush(FOLLOW_switchLabel_in_switchBlockStatementGroup442);
            switchLabel();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleswitchBlockStatementGroupEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // JavaStat.g:69:16: ( blockStatement )*

            for (;;)
            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                case CharacterLiteral:
                case DecimalLiteral:
                case ENUM:
                case FloatingPointLiteral:
                case HexLiteral:
                case Identifier:
                case OctalLiteral:
                case StringLiteral:
                case 24:
                case 31:
                case 35:
                case 36:
                case 39:
                case 40:
                case 47:
                case 48:
                case 53:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 65:
                case 66:
                case 67:
                case 69:
                case 70:
                case 73:
                case 74:
                case 76:
                case 77:
                case 78:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 113:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    // JavaStat.g:69:16: blockStatement
            	    {
            	        this->followPush(FOLLOW_blockStatement_in_switchBlockStatementGroup444);
            	        blockStatement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleswitchBlockStatementGroupEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleswitchBlockStatementGroupEx; /* Prevent compiler warnings */
    ruleswitchBlockStatementGroupEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(352, switchBlockStatementGroup_StartIndex); }

    return ;
}
/* $ANTLR end switchBlockStatementGroup */

/**
 * $ANTLR start switchLabel
 * JavaStat.g:72:1: switchLabel : ( 'case' constantExpression ':' | 'case' enumConstantName ':' | 'default' ':' );
 */
void
Java_JavaStat::switchLabel()
{
        Java_JavaStatImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ANTLR_MARKER switchLabel_StartIndex;

    /* Initialize rule variables
     */
    switchLabel_StartIndex = this->index();


    if ( (this->get_backtracking()>0) && (this->haveParsedRule(353)) )
    {
        {
        }



        return ;
    }


 
    {
        {
            //  JavaStat.g:73:2: ( 'case' constantExpression ':' | 'case' enumConstantName ':' | 'default' ':' )

            ANTLR_UINT32 alt15;

            alt15=3;

            switch ( this->LA(1) )
            {
            case 63:
            	{
            		switch ( this->LA(2) )
            		{
            		case CharacterLiteral:
            		case DecimalLiteral:
            		case FloatingPointLiteral:
            		case HexLiteral:
            		case OctalLiteral:
            		case StringLiteral:
            		case 24:
            		case 31:
            		case 35:
            		case 36:
            		case 39:
            		case 40:
            		case 48:
            		case 60:
            		case 62:
            		case 65:
            		case 70:
            		case 73:
            		case 76:
            		case 82:
            		case 84:
            		case 86:
            		case 87:
            		case 93:
            		case 96:
            		case 99:
            		case 103:
            		case 105:
            		case 113:
            			{
            				alt15=1;
            			}
            		    break;
            		case Identifier:
            			{
            				{
            				    int LA15_20 = this->LA(3);
            				    if ( (this->msynpred( antlr3::ClassForwarder<synpred30_JavaStat>() )))
            				    {
            				        alt15=1;
            				    }
            				    else if ( (this->msynpred( antlr3::ClassForwarder<synpred31_JavaStat>() )))
            				    {
            				        alt15=2;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            return ;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 15 );
            				        ex->set_state( 20 );


            				        goto ruleswitchLabelEx;

            				    }
            				}
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return ;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 15 );
            		    ex->set_state( 1 );


            		    goto ruleswitchLabelEx;

            		}

            	}
                break;
            case 68:
            	{
            		alt15=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 15 );
                ex->set_state( 0 );


                goto ruleswitchLabelEx;

            }

            switch (alt15)
            {
        	case 1:
        	    // JavaStat.g:73:4: 'case' constantExpression ':'
        	    {
        	         this->matchToken(63, &FOLLOW_63_in_switchLabel457);
        	        if  (this->hasException())
        	        {
        	            goto ruleswitchLabelEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_constantExpression_in_switchLabel459);
        	        m_gJava->constantExpression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleswitchLabelEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(46, &FOLLOW_46_in_switchLabel461);
        	        if  (this->hasException())
        	        {
        	            goto ruleswitchLabelEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // JavaStat.g:74:6: 'case' enumConstantName ':'
        	    {
        	         this->matchToken(63, &FOLLOW_63_in_switchLabel468);
        	        if  (this->hasException())
        	        {
        	            goto ruleswitchLabelEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_enumConstantName_in_switchLabel470);
        	        m_gJava->enumConstantName();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleswitchLabelEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(46, &FOLLOW_46_in_switchLabel472);
        	        if  (this->hasException())
        	        {
        	            goto ruleswitchLabelEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // JavaStat.g:75:6: 'default' ':'
        	    {
        	         this->matchToken(68, &FOLLOW_68_in_switchLabel479);
        	        if  (this->hasException())
        	        {
        	            goto ruleswitchLabelEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(46, &FOLLOW_46_in_switchLabel481);
        	        if  (this->hasException())
        	        {
        	            goto ruleswitchLabelEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleswitchLabelEx; /* Prevent compiler warnings */
    ruleswitchLabelEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(353, switchLabel_StartIndex); }

    return ;
}
/* $ANTLR end switchLabel */

/**
 * $ANTLR start moreStatementExpressions
 * JavaStat.g:78:1: moreStatementExpressions : ( ',' statementExpression )* ;
 */
void
Java_JavaStat::moreStatementExpressions()
{
        Java_JavaStatImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ANTLR_MARKER moreStatementExpressions_StartIndex;

    /* Initialize rule variables
     */
    moreStatementExpressions_StartIndex = this->index();


    if ( (this->get_backtracking()>0) && (this->haveParsedRule(354)) )
    {
        {
        }



        return ;
    }


 
    {
        // JavaStat.g:79:2: ( ( ',' statementExpression )* )
        // JavaStat.g:79:4: ( ',' statementExpression )*
        {
            // JavaStat.g:79:4: ( ',' statementExpression )*

            for (;;)
            {
                int alt16=2;
                switch ( this->LA(1) )
                {
                case 38:
                	{
                		alt16=1;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    // JavaStat.g:79:5: ',' statementExpression
            	    {
            	         this->matchToken(38, &FOLLOW_38_in_moreStatementExpressions494);
            	        if  (this->hasException())
            	        {
            	            goto rulemoreStatementExpressionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_statementExpression_in_moreStatementExpressions496);
            	        m_gJava->statementExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemoreStatementExpressionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemoreStatementExpressionsEx; /* Prevent compiler warnings */
    rulemoreStatementExpressionsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(354, moreStatementExpressions_StartIndex); }

    return ;
}
/* $ANTLR end moreStatementExpressions */

/**
 * $ANTLR start forControl
 * JavaStat.g:82:1: forControl options {k=3; } : ( forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? );
 */
void
Java_JavaStat::forControl()
{
        Java_JavaStatImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ANTLR_MARKER forControl_StartIndex;

    /* Initialize rule variables
     */
    forControl_StartIndex = this->index();


    if ( (this->get_backtracking()>0) && (this->haveParsedRule(355)) )
    {
        {
        }



        return ;
    }


 
    {
        {
            //  JavaStat.g:84:2: ( forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? )

            ANTLR_UINT32 alt20;

            alt20=2;

            switch ( this->LA(1) )
            {
            case 74:
            	{
            		switch ( this->LA(2) )
            		{
            		case Identifier:
            			{
            				switch ( this->LA(3) )
            				{
            				case 48:
            					{
            						{
            						    int LA20_60 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 60 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;
            				case 42:
            					{
            						{
            						    int LA20_61 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 61 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;
            				case 54:
            					{
            						{
            						    int LA20_62 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 62 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;
            				case Identifier:
            					{
            						{
            						    int LA20_63 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 63 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return ;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 20 );
            				    ex->set_state( 24 );


            				    goto ruleforControlEx;

            				}

            			}
            		    break;
            		case 60:
            		case 62:
            		case 65:
            		case 70:
            		case 76:
            		case 82:
            		case 84:
            		case 93:
            			{
            				switch ( this->LA(3) )
            				{
            				case 54:
            					{
            						{
            						    int LA20_64 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 64 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;
            				case Identifier:
            					{
            						{
            						    int LA20_65 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 65 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return ;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 20 );
            				    ex->set_state( 25 );


            				    goto ruleforControlEx;

            				}

            			}
            		    break;
            		case 74:
            			{
            				switch ( this->LA(3) )
            				{
            				case Identifier:
            					{
            						{
            						    int LA20_66 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 66 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;
            				case 60:
            				case 62:
            				case 65:
            				case 70:
            				case 76:
            				case 82:
            				case 84:
            				case 93:
            					{
            						{
            						    int LA20_67 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 67 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;
            				case 74:
            					{
            						{
            						    int LA20_68 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 68 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;
            				case 53:
            					{
            						{
            						    int LA20_69 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 69 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return ;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 20 );
            				    ex->set_state( 26 );


            				    goto ruleforControlEx;

            				}

            			}
            		    break;
            		case 53:
            			{
            				switch ( this->LA(3) )
            				{
            				case Identifier:
            					{
            						{
            						    int LA20_70 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 70 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return ;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 20 );
            				    ex->set_state( 27 );


            				    goto ruleforControlEx;

            				}

            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return ;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 20 );
            		    ex->set_state( 1 );


            		    goto ruleforControlEx;

            		}

            	}
                break;
            case 53:
            	{
            		switch ( this->LA(2) )
            		{
            		case Identifier:
            			{
            				switch ( this->LA(3) )
            				{
            				case 42:
            					{
            						{
            						    int LA20_71 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 71 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;
            				case 31:
            					{
            						{
            						    int LA20_72 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 72 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;
            				case Identifier:
            					{
            						{
            						    int LA20_73 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 73 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;
            				case 60:
            				case 62:
            				case 65:
            				case 70:
            				case 76:
            				case 82:
            				case 84:
            				case 93:
            					{
            						{
            						    int LA20_74 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 74 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;
            				case 74:
            					{
            						{
            						    int LA20_75 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 75 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;
            				case 53:
            					{
            						{
            						    int LA20_76 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 76 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return ;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 20 );
            				    ex->set_state( 28 );


            				    goto ruleforControlEx;

            				}

            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return ;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 20 );
            		    ex->set_state( 2 );


            		    goto ruleforControlEx;

            		}

            	}
                break;
            case Identifier:
            	{
            		switch ( this->LA(2) )
            		{
            		case 48:
            			{
            				switch ( this->LA(3) )
            				{
            				case CharacterLiteral:
            				case DecimalLiteral:
            				case FloatingPointLiteral:
            				case HexLiteral:
            				case OctalLiteral:
            				case StringLiteral:
            				case 24:
            				case 31:
            				case 35:
            				case 36:
            				case 39:
            				case 40:
            				case 48:
            				case 49:
            				case 73:
            				case 86:
            				case 87:
            				case 96:
            				case 99:
            				case 103:
            				case 105:
            				case 113:
            					{
            						alt20=2;
            					}
            				    break;
            				case Identifier:
            					{
            						{
            						    int LA20_79 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 79 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;
            				case 60:
            				case 62:
            				case 65:
            				case 70:
            				case 76:
            				case 82:
            				case 84:
            				case 93:
            					{
            						{
            						    int LA20_80 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 80 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;
            				case 52:
            					{
            						{
            						    int LA20_81 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 81 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return ;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 20 );
            				    ex->set_state( 29 );


            				    goto ruleforControlEx;

            				}

            			}
            		    break;
            		case 42:
            			{
            				switch ( this->LA(3) )
            				{
            				case Identifier:
            					{
            						{
            						    int LA20_99 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 99 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;
            				case 48:
            				case 66:
            				case 86:
            				case 96:
            				case 99:
            					{
            						alt20=2;
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return ;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 20 );
            				    ex->set_state( 30 );


            				    goto ruleforControlEx;

            				}

            			}
            		    break;
            		case 54:
            			{
            				switch ( this->LA(3) )
            				{
            				case 55:
            					{
            						{
            						    int LA20_105 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 105 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;
            				case CharacterLiteral:
            				case DecimalLiteral:
            				case FloatingPointLiteral:
            				case HexLiteral:
            				case Identifier:
            				case OctalLiteral:
            				case StringLiteral:
            				case 24:
            				case 31:
            				case 35:
            				case 36:
            				case 39:
            				case 40:
            				case 48:
            				case 60:
            				case 62:
            				case 65:
            				case 70:
            				case 73:
            				case 76:
            				case 82:
            				case 84:
            				case 86:
            				case 87:
            				case 93:
            				case 96:
            				case 99:
            				case 103:
            				case 105:
            				case 113:
            					{
            						alt20=2;
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return ;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 20 );
            				    ex->set_state( 31 );


            				    goto ruleforControlEx;

            				}

            			}
            		    break;
            		case Identifier:
            			{
            				switch ( this->LA(3) )
            				{
            				case 46:
            					{
            						alt20=1;
            					}
            				    break;
            				case 38:
            				case 47:
            				case 49:
            				case 54:
            					{
            						alt20=2;
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return ;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 20 );
            				    ex->set_state( 32 );


            				    goto ruleforControlEx;

            				}

            			}
            		    break;
            		case 25:
            		case 26:
            		case 27:
            		case 28:
            		case 29:
            		case 30:
            		case 31:
            		case 33:
            		case 34:
            		case 35:
            		case 36:
            		case 37:
            		case 38:
            		case 39:
            		case 40:
            		case 41:
            		case 44:
            		case 45:
            		case 47:
            		case 49:
            		case 50:
            		case 51:
            		case 52:
            		case 56:
            		case 57:
            		case 81:
            		case 109:
            		case 110:
            		case 111:
            			{
            				alt20=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return ;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 20 );
            		    ex->set_state( 3 );


            		    goto ruleforControlEx;

            		}

            	}
                break;
            case 60:
            case 62:
            case 65:
            case 70:
            case 76:
            case 82:
            case 84:
            case 93:
            	{
            		switch ( this->LA(2) )
            		{
            		case 54:
            			{
            				switch ( this->LA(3) )
            				{
            				case 55:
            					{
            						{
            						    int LA20_131 = this->LA(4);
            						    if ( (this->msynpred( antlr3::ClassForwarder<synpred33_JavaStat>() )))
            						    {
            						        alt20=1;
            						    }
            						    else if ( (true))
            						    {
            						        alt20=2;
            						    }
            						    else
            						    {
            						        if (this->get_backtracking()>0)
            						        {
            						            this->set_failedflag( true );
            						            return ;
            						        }


            						        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						        ex->set_decisionNum( 20 );
            						        ex->set_state( 131 );


            						        goto ruleforControlEx;

            						    }
            						}
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return ;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 20 );
            				    ex->set_state( 57 );


            				    goto ruleforControlEx;

            				}

            			}
            		    break;
            		case Identifier:
            			{
            				switch ( this->LA(3) )
            				{
            				case 46:
            					{
            						alt20=1;
            					}
            				    break;
            				case 38:
            				case 47:
            				case 49:
            				case 54:
            					{
            						alt20=2;
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return ;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 20 );
            				    ex->set_state( 58 );


            				    goto ruleforControlEx;

            				}

            			}
            		    break;
            		case 42:
            			{
            				alt20=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return ;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 20 );
            		    ex->set_state( 4 );


            		    goto ruleforControlEx;

            		}

            	}
                break;
            case CharacterLiteral:
            case DecimalLiteral:
            case FloatingPointLiteral:
            case HexLiteral:
            case OctalLiteral:
            case StringLiteral:
            case 24:
            case 31:
            case 35:
            case 36:
            case 39:
            case 40:
            case 47:
            case 48:
            case 73:
            case 86:
            case 87:
            case 96:
            case 99:
            case 103:
            case 105:
            case 113:
            	{
            		alt20=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 20 );
                ex->set_state( 0 );


                goto ruleforControlEx;

            }

            switch (alt20)
            {
        	case 1:
        	    // JavaStat.g:84:4: forVarControl
        	    {
        	        this->followPush(FOLLOW_forVarControl_in_forControl517);
        	        forVarControl();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleforControlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // JavaStat.g:85:4: ( forInit )? ';' ( expression )? ';' ( forUpdate )?
        	    {
        	        // JavaStat.g:85:4: ( forInit )?
        	        {
        	            int alt17=2;
        	            switch ( this->LA(1) )
        	            {
        	                case CharacterLiteral:
        	                case DecimalLiteral:
        	                case FloatingPointLiteral:
        	                case HexLiteral:
        	                case Identifier:
        	                case OctalLiteral:
        	                case StringLiteral:
        	                case 24:
        	                case 31:
        	                case 35:
        	                case 36:
        	                case 39:
        	                case 40:
        	                case 48:
        	                case 53:
        	                case 60:
        	                case 62:
        	                case 65:
        	                case 70:
        	                case 73:
        	                case 74:
        	                case 76:
        	                case 82:
        	                case 84:
        	                case 86:
        	                case 87:
        	                case 93:
        	                case 96:
        	                case 99:
        	                case 103:
        	                case 105:
        	                case 113:
        	                	{
        	                		alt17=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt17)
        	            {
        	        	case 1:
        	        	    // JavaStat.g:85:4: forInit
        	        	    {
        	        	        this->followPush(FOLLOW_forInit_in_forControl522);
        	        	        forInit();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleforControlEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(47, &FOLLOW_47_in_forControl525);
        	        if  (this->hasException())
        	        {
        	            goto ruleforControlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // JavaStat.g:85:17: ( expression )?
        	        {
        	            int alt18=2;
        	            switch ( this->LA(1) )
        	            {
        	                case CharacterLiteral:
        	                case DecimalLiteral:
        	                case FloatingPointLiteral:
        	                case HexLiteral:
        	                case Identifier:
        	                case OctalLiteral:
        	                case StringLiteral:
        	                case 24:
        	                case 31:
        	                case 35:
        	                case 36:
        	                case 39:
        	                case 40:
        	                case 48:
        	                case 60:
        	                case 62:
        	                case 65:
        	                case 70:
        	                case 73:
        	                case 76:
        	                case 82:
        	                case 84:
        	                case 86:
        	                case 87:
        	                case 93:
        	                case 96:
        	                case 99:
        	                case 103:
        	                case 105:
        	                case 113:
        	                	{
        	                		alt18=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt18)
        	            {
        	        	case 1:
        	        	    // JavaStat.g:85:17: expression
        	        	    {
        	        	        this->followPush(FOLLOW_expression_in_forControl527);
        	        	        m_gJava->expression();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleforControlEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(47, &FOLLOW_47_in_forControl530);
        	        if  (this->hasException())
        	        {
        	            goto ruleforControlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // JavaStat.g:85:33: ( forUpdate )?
        	        {
        	            int alt19=2;
        	            switch ( this->LA(1) )
        	            {
        	                case CharacterLiteral:
        	                case DecimalLiteral:
        	                case FloatingPointLiteral:
        	                case HexLiteral:
        	                case Identifier:
        	                case OctalLiteral:
        	                case StringLiteral:
        	                case 24:
        	                case 31:
        	                case 35:
        	                case 36:
        	                case 39:
        	                case 40:
        	                case 48:
        	                case 60:
        	                case 62:
        	                case 65:
        	                case 70:
        	                case 73:
        	                case 76:
        	                case 82:
        	                case 84:
        	                case 86:
        	                case 87:
        	                case 93:
        	                case 96:
        	                case 99:
        	                case 103:
        	                case 105:
        	                case 113:
        	                	{
        	                		alt19=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt19)
        	            {
        	        	case 1:
        	        	    // JavaStat.g:85:33: forUpdate
        	        	    {
        	        	        this->followPush(FOLLOW_forUpdate_in_forControl532);
        	        	        forUpdate();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleforControlEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleforControlEx; /* Prevent compiler warnings */
    ruleforControlEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(355, forControl_StartIndex); }

    return ;
}
/* $ANTLR end forControl */

/**
 * $ANTLR start forInit
 * JavaStat.g:88:1: forInit : ( ( variableModifier )* type variableDeclarators | expressionList );
 */
void
Java_JavaStat::forInit()
{
        Java_JavaStatImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ANTLR_MARKER forInit_StartIndex;

    /* Initialize rule variables
     */
    forInit_StartIndex = this->index();


    if ( (this->get_backtracking()>0) && (this->haveParsedRule(356)) )
    {
        {
        }



        return ;
    }


 
    {
        {
            //  JavaStat.g:89:2: ( ( variableModifier )* type variableDeclarators | expressionList )

            ANTLR_UINT32 alt22;

            alt22=2;

            switch ( this->LA(1) )
            {
            case 53:
            case 74:
            	{
            		alt22=1;
            	}
                break;
            case Identifier:
            	{
            		switch ( this->LA(2) )
            		{
            		case 48:
            			{
            				{
            				    int LA22_23 = this->LA(3);
            				    if ( (this->msynpred( antlr3::ClassForwarder<synpred38_JavaStat>() )))
            				    {
            				        alt22=1;
            				    }
            				    else if ( (true))
            				    {
            				        alt22=2;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            return ;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 22 );
            				        ex->set_state( 23 );


            				        goto ruleforInitEx;

            				    }
            				}
            			}
            		    break;
            		case 42:
            			{
            				{
            				    int LA22_24 = this->LA(3);
            				    if ( (this->msynpred( antlr3::ClassForwarder<synpred38_JavaStat>() )))
            				    {
            				        alt22=1;
            				    }
            				    else if ( (true))
            				    {
            				        alt22=2;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            return ;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 22 );
            				        ex->set_state( 24 );


            				        goto ruleforInitEx;

            				    }
            				}
            			}
            		    break;
            		case 54:
            			{
            				{
            				    int LA22_25 = this->LA(3);
            				    if ( (this->msynpred( antlr3::ClassForwarder<synpred38_JavaStat>() )))
            				    {
            				        alt22=1;
            				    }
            				    else if ( (true))
            				    {
            				        alt22=2;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            return ;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 22 );
            				        ex->set_state( 25 );


            				        goto ruleforInitEx;

            				    }
            				}
            			}
            		    break;
            		case Identifier:
            			{
            				alt22=1;
            			}
            		    break;
            		case EOF:
            		case 25:
            		case 26:
            		case 27:
            		case 28:
            		case 29:
            		case 30:
            		case 31:
            		case 33:
            		case 34:
            		case 35:
            		case 36:
            		case 37:
            		case 38:
            		case 39:
            		case 40:
            		case 41:
            		case 44:
            		case 45:
            		case 47:
            		case 49:
            		case 50:
            		case 51:
            		case 52:
            		case 56:
            		case 57:
            		case 81:
            		case 109:
            		case 110:
            		case 111:
            			{
            				alt22=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return ;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 22 );
            		    ex->set_state( 3 );


            		    goto ruleforInitEx;

            		}

            	}
                break;
            case 60:
            case 62:
            case 65:
            case 70:
            case 76:
            case 82:
            case 84:
            case 93:
            	{
            		switch ( this->LA(2) )
            		{
            		case 54:
            			{
            				{
            				    int LA22_52 = this->LA(3);
            				    if ( (this->msynpred( antlr3::ClassForwarder<synpred38_JavaStat>() )))
            				    {
            				        alt22=1;
            				    }
            				    else if ( (true))
            				    {
            				        alt22=2;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            return ;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 22 );
            				        ex->set_state( 52 );


            				        goto ruleforInitEx;

            				    }
            				}
            			}
            		    break;
            		case Identifier:
            			{
            				alt22=1;
            			}
            		    break;
            		case 42:
            			{
            				alt22=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return ;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 22 );
            		    ex->set_state( 4 );


            		    goto ruleforInitEx;

            		}

            	}
                break;
            case CharacterLiteral:
            case DecimalLiteral:
            case FloatingPointLiteral:
            case HexLiteral:
            case OctalLiteral:
            case StringLiteral:
            case 24:
            case 31:
            case 35:
            case 36:
            case 39:
            case 40:
            case 48:
            case 73:
            case 86:
            case 87:
            case 96:
            case 99:
            case 103:
            case 105:
            case 113:
            	{
            		alt22=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< Java_JavaStatImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 22 );
                ex->set_state( 0 );


                goto ruleforInitEx;

            }

            switch (alt22)
            {
        	case 1:
        	    // JavaStat.g:89:4: ( variableModifier )* type variableDeclarators
        	    {
        	        // JavaStat.g:89:4: ( variableModifier )*

        	        for (;;)
        	        {
        	            int alt21=2;
        	            switch ( this->LA(1) )
        	            {
        	            case 53:
        	            case 74:
        	            	{
        	            		alt21=1;
        	            	}
        	                break;

        	            }

        	            switch (alt21)
        	            {
        	        	case 1:
        	        	    // JavaStat.g:89:4: variableModifier
        	        	    {
        	        	        this->followPush(FOLLOW_variableModifier_in_forInit544);
        	        	        m_gJava->variableModifier();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleforInitEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop21;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop21: ; /* Jump out to here if this rule does not match */


        	        this->followPush(FOLLOW_type_in_forInit547);
        	        m_gJava->type();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleforInitEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_variableDeclarators_in_forInit549);
        	        m_gJava->variableDeclarators();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleforInitEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // JavaStat.g:90:4: expressionList
        	    {
        	        this->followPush(FOLLOW_expressionList_in_forInit554);
        	        m_gJava->expressionList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleforInitEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleforInitEx; /* Prevent compiler warnings */
    ruleforInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(356, forInit_StartIndex); }

    return ;
}
/* $ANTLR end forInit */

/**
 * $ANTLR start forVarControl
 * JavaStat.g:93:1: forVarControl : ( variableModifier )* type Identifier ':' expression ;
 */
void
Java_JavaStat::forVarControl()
{
        Java_JavaStatImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ANTLR_MARKER forVarControl_StartIndex;

    /* Initialize rule variables
     */
    forVarControl_StartIndex = this->index();


    if ( (this->get_backtracking()>0) && (this->haveParsedRule(357)) )
    {
        {
        }



        return ;
    }


 
    {
        // JavaStat.g:94:2: ( ( variableModifier )* type Identifier ':' expression )
        // JavaStat.g:94:4: ( variableModifier )* type Identifier ':' expression
        {
            // JavaStat.g:94:4: ( variableModifier )*

            for (;;)
            {
                int alt23=2;
                switch ( this->LA(1) )
                {
                case 53:
                case 74:
                	{
                		alt23=1;
                	}
                    break;

                }

                switch (alt23)
                {
            	case 1:
            	    // JavaStat.g:94:4: variableModifier
            	    {
            	        this->followPush(FOLLOW_variableModifier_in_forVarControl566);
            	        m_gJava->variableModifier();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforVarControlEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop23;	/* break out of the loop */
            	    break;
                }
            }
            loop23: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_type_in_forVarControl569);
            m_gJava->type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleforVarControlEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(Identifier, &FOLLOW_Identifier_in_forVarControl571);
            if  (this->hasException())
            {
                goto ruleforVarControlEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(46, &FOLLOW_46_in_forVarControl573);
            if  (this->hasException())
            {
                goto ruleforVarControlEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_expression_in_forVarControl575);
            m_gJava->expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleforVarControlEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleforVarControlEx; /* Prevent compiler warnings */
    ruleforVarControlEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(357, forVarControl_StartIndex); }

    return ;
}
/* $ANTLR end forVarControl */

/**
 * $ANTLR start forUpdate
 * JavaStat.g:97:1: forUpdate : expressionList ;
 */
void
Java_JavaStat::forUpdate()
{
        Java_JavaStatImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ANTLR_MARKER forUpdate_StartIndex;

    /* Initialize rule variables
     */
    forUpdate_StartIndex = this->index();


    if ( (this->get_backtracking()>0) && (this->haveParsedRule(358)) )
    {
        {
        }



        return ;
    }


 
    {
        // JavaStat.g:98:2: ( expressionList )
        // JavaStat.g:98:4: expressionList
        {
            this->followPush(FOLLOW_expressionList_in_forUpdate586);
            m_gJava->expressionList();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleforUpdateEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleforUpdateEx; /* Prevent compiler warnings */
    ruleforUpdateEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(358, forUpdate_StartIndex); }

    return ;
}
/* $ANTLR end forUpdate */

// $ANTLR start synpred2_JavaStat
void Java_JavaStat::msynpred2_JavaStat_fragment(  )
{
    // JavaStat.g:20:4: ( localVariableDeclaration )
    // JavaStat.g:20:4: localVariableDeclaration
    {
        this->followPush(FOLLOW_localVariableDeclaration_in_synpred2_JavaStat59);
        localVariableDeclaration();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred2_JavaStatEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred2_JavaStatEx; /* Prevent compiler warnings */
rulesynpred2_JavaStatEx: ;

}
// $ANTLR end synpred2_JavaStat

// $ANTLR start synpred3_JavaStat
void Java_JavaStat::msynpred3_JavaStat_fragment(  )
{
    // JavaStat.g:21:4: ( classOrInterfaceDeclaration )
    // JavaStat.g:21:4: classOrInterfaceDeclaration
    {
        this->followPush(FOLLOW_classOrInterfaceDeclaration_in_synpred3_JavaStat64);
        m_gJava->classOrInterfaceDeclaration();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred3_JavaStatEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred3_JavaStatEx; /* Prevent compiler warnings */
rulesynpred3_JavaStatEx: ;

}
// $ANTLR end synpred3_JavaStat

// $ANTLR start synpred12_JavaStat
void Java_JavaStat::msynpred12_JavaStat_fragment(  )
{
    // JavaStat.g:37:9: ( catches 'finally' block )
    // JavaStat.g:37:9: catches 'finally' block
    {
        this->followPush(FOLLOW_catches_in_synpred12_JavaStat218);
        catches();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred12_JavaStatEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(75, &FOLLOW_75_in_synpred12_JavaStat220);
        if  (this->hasException())
        {
            goto rulesynpred12_JavaStatEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_block_in_synpred12_JavaStat222);
        block();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred12_JavaStatEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred12_JavaStatEx; /* Prevent compiler warnings */
rulesynpred12_JavaStatEx: ;

}
// $ANTLR end synpred12_JavaStat

// $ANTLR start synpred13_JavaStat
void Java_JavaStat::msynpred13_JavaStat_fragment(  )
{
    // JavaStat.g:38:9: ( catches )
    // JavaStat.g:38:9: catches
    {
        this->followPush(FOLLOW_catches_in_synpred13_JavaStat232);
        catches();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred13_JavaStatEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred13_JavaStatEx; /* Prevent compiler warnings */
rulesynpred13_JavaStatEx: ;

}
// $ANTLR end synpred13_JavaStat

// $ANTLR start synpred30_JavaStat
void Java_JavaStat::msynpred30_JavaStat_fragment(  )
{
    // JavaStat.g:73:4: ( 'case' constantExpression ':' )
    // JavaStat.g:73:4: 'case' constantExpression ':'
    {
         this->matchToken(63, &FOLLOW_63_in_synpred30_JavaStat457);
        if  (this->hasException())
        {
            goto rulesynpred30_JavaStatEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_constantExpression_in_synpred30_JavaStat459);
        m_gJava->constantExpression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred30_JavaStatEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(46, &FOLLOW_46_in_synpred30_JavaStat461);
        if  (this->hasException())
        {
            goto rulesynpred30_JavaStatEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred30_JavaStatEx; /* Prevent compiler warnings */
rulesynpred30_JavaStatEx: ;

}
// $ANTLR end synpred30_JavaStat

// $ANTLR start synpred31_JavaStat
void Java_JavaStat::msynpred31_JavaStat_fragment(  )
{
    // JavaStat.g:74:6: ( 'case' enumConstantName ':' )
    // JavaStat.g:74:6: 'case' enumConstantName ':'
    {
         this->matchToken(63, &FOLLOW_63_in_synpred31_JavaStat468);
        if  (this->hasException())
        {
            goto rulesynpred31_JavaStatEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_enumConstantName_in_synpred31_JavaStat470);
        m_gJava->enumConstantName();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred31_JavaStatEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(46, &FOLLOW_46_in_synpred31_JavaStat472);
        if  (this->hasException())
        {
            goto rulesynpred31_JavaStatEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred31_JavaStatEx; /* Prevent compiler warnings */
rulesynpred31_JavaStatEx: ;

}
// $ANTLR end synpred31_JavaStat

// $ANTLR start synpred33_JavaStat
void Java_JavaStat::msynpred33_JavaStat_fragment(  )
{
    // JavaStat.g:84:4: ( forVarControl )
    // JavaStat.g:84:4: forVarControl
    {
        this->followPush(FOLLOW_forVarControl_in_synpred33_JavaStat517);
        forVarControl();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred33_JavaStatEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred33_JavaStatEx; /* Prevent compiler warnings */
rulesynpred33_JavaStatEx: ;

}
// $ANTLR end synpred33_JavaStat

// $ANTLR start synpred38_JavaStat
void Java_JavaStat::msynpred38_JavaStat_fragment(  )
{
    // JavaStat.g:89:4: ( ( variableModifier )* type variableDeclarators )
    // JavaStat.g:89:4: ( variableModifier )* type variableDeclarators
    {
        // JavaStat.g:89:4: ( variableModifier )*

        for (;;)
        {
            int alt30=2;
            switch ( this->LA(1) )
            {
            case 53:
            case 74:
            	{
            		alt30=1;
            	}
                break;

            }

            switch (alt30)
            {
        	case 1:
        	    // JavaStat.g:89:4: variableModifier
        	    {
        	        this->followPush(FOLLOW_variableModifier_in_synpred38_JavaStat544);
        	        m_gJava->variableModifier();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred38_JavaStatEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop30;	/* break out of the loop */
        	    break;
            }
        }
        loop30: ; /* Jump out to here if this rule does not match */


        this->followPush(FOLLOW_type_in_synpred38_JavaStat547);
        m_gJava->type();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred38_JavaStatEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_variableDeclarators_in_synpred38_JavaStat549);
        m_gJava->variableDeclarators();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred38_JavaStatEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred38_JavaStatEx; /* Prevent compiler warnings */
rulesynpred38_JavaStatEx: ;

}
// $ANTLR end synpred38_JavaStat
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool Java_JavaStat::msynpred( antlr3::ClassForwarder< synpred2_JavaStat >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred2_JavaStat_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool Java_JavaStat::msynpred( antlr3::ClassForwarder< synpred13_JavaStat >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred13_JavaStat_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool Java_JavaStat::msynpred( antlr3::ClassForwarder< synpred38_JavaStat >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred38_JavaStat_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool Java_JavaStat::msynpred( antlr3::ClassForwarder< synpred31_JavaStat >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred31_JavaStat_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool Java_JavaStat::msynpred( antlr3::ClassForwarder< synpred12_JavaStat >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred12_JavaStat_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool Java_JavaStat::msynpred( antlr3::ClassForwarder< synpred30_JavaStat >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred30_JavaStat_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool Java_JavaStat::msynpred( antlr3::ClassForwarder< synpred33_JavaStat >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred33_JavaStat_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool Java_JavaStat::msynpred( antlr3::ClassForwarder< synpred3_JavaStat >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred3_JavaStat_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
