/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : Java__.g
 *     -                            On : 2012-02-26 10:38:17
 *     -                 for the lexer : JavaLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "JavaLexer.hpp"
/* ----------------------------------------- */



	namespace  User  {


/** String literals used by JavaLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR_UCHAR	lit_1[]  = { 0x21, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_2[]  = { 0x25, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_3[]  = { 0x26, 0x26,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_4[]  = { 0x26, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_5[]  = { 0x2A, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_6[]  = { 0x2B, 0x2B,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_7[]  = { 0x2B, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_8[]  = { 0x2D, 0x2D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_9[]  = { 0x2D, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_10[]  = { 0x2E, 0x2E, 0x2E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_11[]  = { 0x2F, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_12[]  = { 0x3D, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_13[]  = { 0x5E, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_14[]  = { 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_15[]  = { 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_16[]  = { 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_17[]  = { 0x62, 0x72, 0x65, 0x61, 0x6B,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_18[]  = { 0x62, 0x79, 0x74, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_19[]  = { 0x63, 0x61, 0x73, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_20[]  = { 0x63, 0x61, 0x74, 0x63, 0x68,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_21[]  = { 0x63, 0x68, 0x61, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_22[]  = { 0x63, 0x6C, 0x61, 0x73, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_23[]  = { 0x63, 0x6F, 0x6E, 0x74, 0x69, 0x6E, 0x75, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_24[]  = { 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_25[]  = { 0x64, 0x6F,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_26[]  = { 0x64, 0x6F, 0x75, 0x62, 0x6C, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_27[]  = { 0x65, 0x6C, 0x73, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_28[]  = { 0x65, 0x78, 0x74, 0x65, 0x6E, 0x64, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_29[]  = { 0x66, 0x61, 0x6C, 0x73, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_30[]  = { 0x66, 0x69, 0x6E, 0x61, 0x6C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_31[]  = { 0x66, 0x69, 0x6E, 0x61, 0x6C, 0x6C, 0x79,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_32[]  = { 0x66, 0x6C, 0x6F, 0x61, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_33[]  = { 0x66, 0x6F, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_34[]  = { 0x69, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_35[]  = { 0x69, 0x6D, 0x70, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_36[]  = { 0x69, 0x6D, 0x70, 0x6F, 0x72, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_37[]  = { 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x6F, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_38[]  = { 0x69, 0x6E, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_39[]  = { 0x69, 0x6E, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_40[]  = { 0x6C, 0x6F, 0x6E, 0x67,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_41[]  = { 0x6E, 0x61, 0x74, 0x69, 0x76, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_42[]  = { 0x6E, 0x65, 0x77,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_43[]  = { 0x6E, 0x75, 0x6C, 0x6C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_44[]  = { 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_45[]  = { 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_46[]  = { 0x70, 0x72, 0x6F, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_47[]  = { 0x70, 0x75, 0x62, 0x6C, 0x69, 0x63,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_48[]  = { 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_49[]  = { 0x73, 0x68, 0x6F, 0x72, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_50[]  = { 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_51[]  = { 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x66, 0x70,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_52[]  = { 0x73, 0x75, 0x70, 0x65, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_53[]  = { 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_54[]  = { 0x73, 0x79, 0x6E, 0x63, 0x68, 0x72, 0x6F, 0x6E, 0x69, 0x7A, 0x65, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_55[]  = { 0x74, 0x68, 0x69, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_56[]  = { 0x74, 0x68, 0x72, 0x6F, 0x77,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_57[]  = { 0x74, 0x68, 0x72, 0x6F, 0x77, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_58[]  = { 0x74, 0x72, 0x61, 0x6E, 0x73, 0x69, 0x65, 0x6E, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_59[]  = { 0x74, 0x72, 0x75, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_60[]  = { 0x74, 0x72, 0x79,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_61[]  = { 0x76, 0x6F, 0x69, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_62[]  = { 0x76, 0x6F, 0x6C, 0x61, 0x74, 0x69, 0x6C, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_63[]  = { 0x77, 0x68, 0x69, 0x6C, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_64[]  = { 0x7C, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_65[]  = { 0x7C, 0x7C,  antlr3::ANTLR_STRING_TERMINATOR};

	}



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;

	namespace  User  {


/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



JavaLexer::~JavaLexer()
{
	// Free the lexers that we delegated to
	// functions to. NULL the state so we only free it once.
	//
	m_gJavaLexerRules->set_lexstate(NULL);
	         delete m_gJavaLexerRules; 
}

void
JavaLexer::reset()
{
    this->get_rec()->reset();
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "Java__.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* JavaLexer::getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called JavaLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pJavaLexer initialized for the lex start
 *     - Fail NULL
 */
JavaLexer::JavaLexer(StreamType* instream)
:JavaLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	// See if we can create a new lexer with the standard constructor
	//
	this->init(instream );
}

/** \brief Create a new lexer called JavaLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pJavaLexer initialized for the lex start
 *     - Fail NULL
 */
JavaLexer::JavaLexer(StreamType* instream, RecognizerSharedStateType* state)
:JavaLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void JavaLexer::init(StreamType* instream)
{
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in JavaLexer.h here so you can get a sense
     * of what goes where.
     */

	// Initialize the lexers that we are going to delegate some
	// functions to.
	//
	m_gJavaLexerRules = new Java_JavaLexerRules(instream, this->get_lexstate(), this);
}

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 13:7: ( '!' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__24
 *
 * Looks to match the characters the constitute the token T__24
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__24()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__24;


    // Java__.g:13:7: ( '!' )
    // Java__.g:13:9: '!'
    {
         this->matchc('!');
        if  (this->hasException())
        {
            goto ruleT__24Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__24Ex; /* Prevent compiler warnings */
    ruleT__24Ex: ;

}
// $ANTLR end T__24

//   Comes from: 14:7: ( '!=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__25
 *
 * Looks to match the characters the constitute the token T__25
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__25()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__25;


    // Java__.g:14:7: ( '!=' )
    // Java__.g:14:9: '!='
    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleT__25Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__25Ex; /* Prevent compiler warnings */
    ruleT__25Ex: ;

}
// $ANTLR end T__25

//   Comes from: 15:7: ( '%' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__26
 *
 * Looks to match the characters the constitute the token T__26
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__26()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__26;


    // Java__.g:15:7: ( '%' )
    // Java__.g:15:9: '%'
    {
         this->matchc('%');
        if  (this->hasException())
        {
            goto ruleT__26Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__26Ex; /* Prevent compiler warnings */
    ruleT__26Ex: ;

}
// $ANTLR end T__26

//   Comes from: 16:7: ( '%=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__27
 *
 * Looks to match the characters the constitute the token T__27
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__27()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__27;


    // Java__.g:16:7: ( '%=' )
    // Java__.g:16:9: '%='
    {
        this->matchs(lit_2);
        if  (this->hasException())
        {
            goto ruleT__27Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__27Ex; /* Prevent compiler warnings */
    ruleT__27Ex: ;

}
// $ANTLR end T__27

//   Comes from: 17:7: ( '&&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__28
 *
 * Looks to match the characters the constitute the token T__28
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__28()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__28;


    // Java__.g:17:7: ( '&&' )
    // Java__.g:17:9: '&&'
    {
        this->matchs(lit_3);
        if  (this->hasException())
        {
            goto ruleT__28Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__28Ex; /* Prevent compiler warnings */
    ruleT__28Ex: ;

}
// $ANTLR end T__28

//   Comes from: 18:7: ( '&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__29
 *
 * Looks to match the characters the constitute the token T__29
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__29()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__29;


    // Java__.g:18:7: ( '&' )
    // Java__.g:18:9: '&'
    {
         this->matchc('&');
        if  (this->hasException())
        {
            goto ruleT__29Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__29Ex; /* Prevent compiler warnings */
    ruleT__29Ex: ;

}
// $ANTLR end T__29

//   Comes from: 19:7: ( '&=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__30
 *
 * Looks to match the characters the constitute the token T__30
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__30()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__30;


    // Java__.g:19:7: ( '&=' )
    // Java__.g:19:9: '&='
    {
        this->matchs(lit_4);
        if  (this->hasException())
        {
            goto ruleT__30Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__30Ex; /* Prevent compiler warnings */
    ruleT__30Ex: ;

}
// $ANTLR end T__30

//   Comes from: 20:7: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__31
 *
 * Looks to match the characters the constitute the token T__31
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__31()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__31;


    // Java__.g:20:7: ( '(' )
    // Java__.g:20:9: '('
    {
         this->matchc('(');
        if  (this->hasException())
        {
            goto ruleT__31Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__31Ex; /* Prevent compiler warnings */
    ruleT__31Ex: ;

}
// $ANTLR end T__31

//   Comes from: 21:7: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__32
 *
 * Looks to match the characters the constitute the token T__32
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__32()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__32;


    // Java__.g:21:7: ( ')' )
    // Java__.g:21:9: ')'
    {
         this->matchc(')');
        if  (this->hasException())
        {
            goto ruleT__32Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__32Ex; /* Prevent compiler warnings */
    ruleT__32Ex: ;

}
// $ANTLR end T__32

//   Comes from: 22:7: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__33
 *
 * Looks to match the characters the constitute the token T__33
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__33()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__33;


    // Java__.g:22:7: ( '*' )
    // Java__.g:22:9: '*'
    {
         this->matchc('*');
        if  (this->hasException())
        {
            goto ruleT__33Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__33Ex; /* Prevent compiler warnings */
    ruleT__33Ex: ;

}
// $ANTLR end T__33

//   Comes from: 23:7: ( '*=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__34
 *
 * Looks to match the characters the constitute the token T__34
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__34()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__34;


    // Java__.g:23:7: ( '*=' )
    // Java__.g:23:9: '*='
    {
        this->matchs(lit_5);
        if  (this->hasException())
        {
            goto ruleT__34Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__34Ex; /* Prevent compiler warnings */
    ruleT__34Ex: ;

}
// $ANTLR end T__34

//   Comes from: 24:7: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__35
 *
 * Looks to match the characters the constitute the token T__35
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__35()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__35;


    // Java__.g:24:7: ( '+' )
    // Java__.g:24:9: '+'
    {
         this->matchc('+');
        if  (this->hasException())
        {
            goto ruleT__35Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__35Ex; /* Prevent compiler warnings */
    ruleT__35Ex: ;

}
// $ANTLR end T__35

//   Comes from: 25:7: ( '++' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__36
 *
 * Looks to match the characters the constitute the token T__36
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__36()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__36;


    // Java__.g:25:7: ( '++' )
    // Java__.g:25:9: '++'
    {
        this->matchs(lit_6);
        if  (this->hasException())
        {
            goto ruleT__36Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__36Ex; /* Prevent compiler warnings */
    ruleT__36Ex: ;

}
// $ANTLR end T__36

//   Comes from: 26:7: ( '+=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__37
 *
 * Looks to match the characters the constitute the token T__37
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__37()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__37;


    // Java__.g:26:7: ( '+=' )
    // Java__.g:26:9: '+='
    {
        this->matchs(lit_7);
        if  (this->hasException())
        {
            goto ruleT__37Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__37Ex; /* Prevent compiler warnings */
    ruleT__37Ex: ;

}
// $ANTLR end T__37

//   Comes from: 27:7: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__38
 *
 * Looks to match the characters the constitute the token T__38
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__38()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__38;


    // Java__.g:27:7: ( ',' )
    // Java__.g:27:9: ','
    {
         this->matchc(',');
        if  (this->hasException())
        {
            goto ruleT__38Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__38Ex; /* Prevent compiler warnings */
    ruleT__38Ex: ;

}
// $ANTLR end T__38

//   Comes from: 28:7: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__39
 *
 * Looks to match the characters the constitute the token T__39
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__39()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__39;


    // Java__.g:28:7: ( '-' )
    // Java__.g:28:9: '-'
    {
         this->matchc('-');
        if  (this->hasException())
        {
            goto ruleT__39Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__39Ex; /* Prevent compiler warnings */
    ruleT__39Ex: ;

}
// $ANTLR end T__39

//   Comes from: 29:7: ( '--' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__40
 *
 * Looks to match the characters the constitute the token T__40
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__40()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__40;


    // Java__.g:29:7: ( '--' )
    // Java__.g:29:9: '--'
    {
        this->matchs(lit_8);
        if  (this->hasException())
        {
            goto ruleT__40Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__40Ex; /* Prevent compiler warnings */
    ruleT__40Ex: ;

}
// $ANTLR end T__40

//   Comes from: 30:7: ( '-=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__41
 *
 * Looks to match the characters the constitute the token T__41
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__41()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__41;


    // Java__.g:30:7: ( '-=' )
    // Java__.g:30:9: '-='
    {
        this->matchs(lit_9);
        if  (this->hasException())
        {
            goto ruleT__41Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__41Ex; /* Prevent compiler warnings */
    ruleT__41Ex: ;

}
// $ANTLR end T__41

//   Comes from: 31:7: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__42
 *
 * Looks to match the characters the constitute the token T__42
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__42()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__42;


    // Java__.g:31:7: ( '.' )
    // Java__.g:31:9: '.'
    {
         this->matchc('.');
        if  (this->hasException())
        {
            goto ruleT__42Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__42Ex; /* Prevent compiler warnings */
    ruleT__42Ex: ;

}
// $ANTLR end T__42

//   Comes from: 32:7: ( '...' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__43
 *
 * Looks to match the characters the constitute the token T__43
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__43()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__43;


    // Java__.g:32:7: ( '...' )
    // Java__.g:32:9: '...'
    {
        this->matchs(lit_10);
        if  (this->hasException())
        {
            goto ruleT__43Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__43Ex; /* Prevent compiler warnings */
    ruleT__43Ex: ;

}
// $ANTLR end T__43

//   Comes from: 33:7: ( '/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__44
 *
 * Looks to match the characters the constitute the token T__44
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__44()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__44;


    // Java__.g:33:7: ( '/' )
    // Java__.g:33:9: '/'
    {
         this->matchc('/');
        if  (this->hasException())
        {
            goto ruleT__44Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__44Ex; /* Prevent compiler warnings */
    ruleT__44Ex: ;

}
// $ANTLR end T__44

//   Comes from: 34:7: ( '/=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__45
 *
 * Looks to match the characters the constitute the token T__45
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__45()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__45;


    // Java__.g:34:7: ( '/=' )
    // Java__.g:34:9: '/='
    {
        this->matchs(lit_11);
        if  (this->hasException())
        {
            goto ruleT__45Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__45Ex; /* Prevent compiler warnings */
    ruleT__45Ex: ;

}
// $ANTLR end T__45

//   Comes from: 35:7: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__46
 *
 * Looks to match the characters the constitute the token T__46
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__46()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__46;


    // Java__.g:35:7: ( ':' )
    // Java__.g:35:9: ':'
    {
         this->matchc(':');
        if  (this->hasException())
        {
            goto ruleT__46Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__46Ex; /* Prevent compiler warnings */
    ruleT__46Ex: ;

}
// $ANTLR end T__46

//   Comes from: 36:7: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__47
 *
 * Looks to match the characters the constitute the token T__47
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__47()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__47;


    // Java__.g:36:7: ( ';' )
    // Java__.g:36:9: ';'
    {
         this->matchc(';');
        if  (this->hasException())
        {
            goto ruleT__47Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__47Ex; /* Prevent compiler warnings */
    ruleT__47Ex: ;

}
// $ANTLR end T__47

//   Comes from: 37:7: ( '<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__48
 *
 * Looks to match the characters the constitute the token T__48
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__48()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__48;


    // Java__.g:37:7: ( '<' )
    // Java__.g:37:9: '<'
    {
         this->matchc('<');
        if  (this->hasException())
        {
            goto ruleT__48Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__48Ex; /* Prevent compiler warnings */
    ruleT__48Ex: ;

}
// $ANTLR end T__48

//   Comes from: 38:7: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__49
 *
 * Looks to match the characters the constitute the token T__49
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__49()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__49;


    // Java__.g:38:7: ( '=' )
    // Java__.g:38:9: '='
    {
         this->matchc('=');
        if  (this->hasException())
        {
            goto ruleT__49Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__49Ex; /* Prevent compiler warnings */
    ruleT__49Ex: ;

}
// $ANTLR end T__49

//   Comes from: 39:7: ( '==' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__50
 *
 * Looks to match the characters the constitute the token T__50
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__50()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__50;


    // Java__.g:39:7: ( '==' )
    // Java__.g:39:9: '=='
    {
        this->matchs(lit_12);
        if  (this->hasException())
        {
            goto ruleT__50Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__50Ex; /* Prevent compiler warnings */
    ruleT__50Ex: ;

}
// $ANTLR end T__50

//   Comes from: 40:7: ( '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__51
 *
 * Looks to match the characters the constitute the token T__51
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__51()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__51;


    // Java__.g:40:7: ( '>' )
    // Java__.g:40:9: '>'
    {
         this->matchc('>');
        if  (this->hasException())
        {
            goto ruleT__51Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__51Ex; /* Prevent compiler warnings */
    ruleT__51Ex: ;

}
// $ANTLR end T__51

//   Comes from: 41:7: ( '?' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__52
 *
 * Looks to match the characters the constitute the token T__52
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__52()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__52;


    // Java__.g:41:7: ( '?' )
    // Java__.g:41:9: '?'
    {
         this->matchc('?');
        if  (this->hasException())
        {
            goto ruleT__52Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__52Ex; /* Prevent compiler warnings */
    ruleT__52Ex: ;

}
// $ANTLR end T__52

//   Comes from: 42:7: ( '@' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__53
 *
 * Looks to match the characters the constitute the token T__53
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__53()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__53;


    // Java__.g:42:7: ( '@' )
    // Java__.g:42:9: '@'
    {
         this->matchc('@');
        if  (this->hasException())
        {
            goto ruleT__53Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__53Ex; /* Prevent compiler warnings */
    ruleT__53Ex: ;

}
// $ANTLR end T__53

//   Comes from: 43:7: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__54
 *
 * Looks to match the characters the constitute the token T__54
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__54()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__54;


    // Java__.g:43:7: ( '[' )
    // Java__.g:43:9: '['
    {
         this->matchc('[');
        if  (this->hasException())
        {
            goto ruleT__54Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__54Ex; /* Prevent compiler warnings */
    ruleT__54Ex: ;

}
// $ANTLR end T__54

//   Comes from: 44:7: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__55
 *
 * Looks to match the characters the constitute the token T__55
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__55()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__55;


    // Java__.g:44:7: ( ']' )
    // Java__.g:44:9: ']'
    {
         this->matchc(']');
        if  (this->hasException())
        {
            goto ruleT__55Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__55Ex; /* Prevent compiler warnings */
    ruleT__55Ex: ;

}
// $ANTLR end T__55

//   Comes from: 45:7: ( '^' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__56
 *
 * Looks to match the characters the constitute the token T__56
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__56()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__56;


    // Java__.g:45:7: ( '^' )
    // Java__.g:45:9: '^'
    {
         this->matchc('^');
        if  (this->hasException())
        {
            goto ruleT__56Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__56Ex; /* Prevent compiler warnings */
    ruleT__56Ex: ;

}
// $ANTLR end T__56

//   Comes from: 46:7: ( '^=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__57
 *
 * Looks to match the characters the constitute the token T__57
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__57()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__57;


    // Java__.g:46:7: ( '^=' )
    // Java__.g:46:9: '^='
    {
        this->matchs(lit_13);
        if  (this->hasException())
        {
            goto ruleT__57Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__57Ex; /* Prevent compiler warnings */
    ruleT__57Ex: ;

}
// $ANTLR end T__57

//   Comes from: 47:7: ( 'abstract' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__58
 *
 * Looks to match the characters the constitute the token T__58
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__58()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__58;


    // Java__.g:47:7: ( 'abstract' )
    // Java__.g:47:9: 'abstract'
    {
        this->matchs(lit_14);
        if  (this->hasException())
        {
            goto ruleT__58Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__58Ex; /* Prevent compiler warnings */
    ruleT__58Ex: ;

}
// $ANTLR end T__58

//   Comes from: 48:7: ( 'assert' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__59
 *
 * Looks to match the characters the constitute the token T__59
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__59()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__59;


    // Java__.g:48:7: ( 'assert' )
    // Java__.g:48:9: 'assert'
    {
        this->matchs(lit_15);
        if  (this->hasException())
        {
            goto ruleT__59Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__59Ex; /* Prevent compiler warnings */
    ruleT__59Ex: ;

}
// $ANTLR end T__59

//   Comes from: 49:7: ( 'boolean' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__60
 *
 * Looks to match the characters the constitute the token T__60
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__60()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__60;


    // Java__.g:49:7: ( 'boolean' )
    // Java__.g:49:9: 'boolean'
    {
        this->matchs(lit_16);
        if  (this->hasException())
        {
            goto ruleT__60Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__60Ex; /* Prevent compiler warnings */
    ruleT__60Ex: ;

}
// $ANTLR end T__60

//   Comes from: 50:7: ( 'break' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__61
 *
 * Looks to match the characters the constitute the token T__61
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__61()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__61;


    // Java__.g:50:7: ( 'break' )
    // Java__.g:50:9: 'break'
    {
        this->matchs(lit_17);
        if  (this->hasException())
        {
            goto ruleT__61Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__61Ex; /* Prevent compiler warnings */
    ruleT__61Ex: ;

}
// $ANTLR end T__61

//   Comes from: 51:7: ( 'byte' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__62
 *
 * Looks to match the characters the constitute the token T__62
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__62()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__62;


    // Java__.g:51:7: ( 'byte' )
    // Java__.g:51:9: 'byte'
    {
        this->matchs(lit_18);
        if  (this->hasException())
        {
            goto ruleT__62Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__62Ex; /* Prevent compiler warnings */
    ruleT__62Ex: ;

}
// $ANTLR end T__62

//   Comes from: 52:7: ( 'case' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__63
 *
 * Looks to match the characters the constitute the token T__63
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__63()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__63;


    // Java__.g:52:7: ( 'case' )
    // Java__.g:52:9: 'case'
    {
        this->matchs(lit_19);
        if  (this->hasException())
        {
            goto ruleT__63Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__63Ex; /* Prevent compiler warnings */
    ruleT__63Ex: ;

}
// $ANTLR end T__63

//   Comes from: 53:7: ( 'catch' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__64
 *
 * Looks to match the characters the constitute the token T__64
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__64()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__64;


    // Java__.g:53:7: ( 'catch' )
    // Java__.g:53:9: 'catch'
    {
        this->matchs(lit_20);
        if  (this->hasException())
        {
            goto ruleT__64Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__64Ex; /* Prevent compiler warnings */
    ruleT__64Ex: ;

}
// $ANTLR end T__64

//   Comes from: 54:7: ( 'char' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__65
 *
 * Looks to match the characters the constitute the token T__65
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__65()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__65;


    // Java__.g:54:7: ( 'char' )
    // Java__.g:54:9: 'char'
    {
        this->matchs(lit_21);
        if  (this->hasException())
        {
            goto ruleT__65Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__65Ex; /* Prevent compiler warnings */
    ruleT__65Ex: ;

}
// $ANTLR end T__65

//   Comes from: 55:7: ( 'class' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__66
 *
 * Looks to match the characters the constitute the token T__66
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__66()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__66;


    // Java__.g:55:7: ( 'class' )
    // Java__.g:55:9: 'class'
    {
        this->matchs(lit_22);
        if  (this->hasException())
        {
            goto ruleT__66Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__66Ex; /* Prevent compiler warnings */
    ruleT__66Ex: ;

}
// $ANTLR end T__66

//   Comes from: 56:7: ( 'continue' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__67
 *
 * Looks to match the characters the constitute the token T__67
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__67()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__67;


    // Java__.g:56:7: ( 'continue' )
    // Java__.g:56:9: 'continue'
    {
        this->matchs(lit_23);
        if  (this->hasException())
        {
            goto ruleT__67Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__67Ex; /* Prevent compiler warnings */
    ruleT__67Ex: ;

}
// $ANTLR end T__67

//   Comes from: 57:7: ( 'default' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__68
 *
 * Looks to match the characters the constitute the token T__68
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__68()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__68;


    // Java__.g:57:7: ( 'default' )
    // Java__.g:57:9: 'default'
    {
        this->matchs(lit_24);
        if  (this->hasException())
        {
            goto ruleT__68Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__68Ex; /* Prevent compiler warnings */
    ruleT__68Ex: ;

}
// $ANTLR end T__68

//   Comes from: 58:7: ( 'do' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__69
 *
 * Looks to match the characters the constitute the token T__69
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__69()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__69;


    // Java__.g:58:7: ( 'do' )
    // Java__.g:58:9: 'do'
    {
        this->matchs(lit_25);
        if  (this->hasException())
        {
            goto ruleT__69Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__69Ex; /* Prevent compiler warnings */
    ruleT__69Ex: ;

}
// $ANTLR end T__69

//   Comes from: 59:7: ( 'double' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__70
 *
 * Looks to match the characters the constitute the token T__70
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__70()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__70;


    // Java__.g:59:7: ( 'double' )
    // Java__.g:59:9: 'double'
    {
        this->matchs(lit_26);
        if  (this->hasException())
        {
            goto ruleT__70Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__70Ex; /* Prevent compiler warnings */
    ruleT__70Ex: ;

}
// $ANTLR end T__70

//   Comes from: 60:7: ( 'else' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__71
 *
 * Looks to match the characters the constitute the token T__71
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__71()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__71;


    // Java__.g:60:7: ( 'else' )
    // Java__.g:60:9: 'else'
    {
        this->matchs(lit_27);
        if  (this->hasException())
        {
            goto ruleT__71Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__71Ex; /* Prevent compiler warnings */
    ruleT__71Ex: ;

}
// $ANTLR end T__71

//   Comes from: 61:7: ( 'extends' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__72
 *
 * Looks to match the characters the constitute the token T__72
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__72()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__72;


    // Java__.g:61:7: ( 'extends' )
    // Java__.g:61:9: 'extends'
    {
        this->matchs(lit_28);
        if  (this->hasException())
        {
            goto ruleT__72Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__72Ex; /* Prevent compiler warnings */
    ruleT__72Ex: ;

}
// $ANTLR end T__72

//   Comes from: 62:7: ( 'false' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__73
 *
 * Looks to match the characters the constitute the token T__73
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__73()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__73;


    // Java__.g:62:7: ( 'false' )
    // Java__.g:62:9: 'false'
    {
        this->matchs(lit_29);
        if  (this->hasException())
        {
            goto ruleT__73Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__73Ex; /* Prevent compiler warnings */
    ruleT__73Ex: ;

}
// $ANTLR end T__73

//   Comes from: 63:7: ( 'final' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__74
 *
 * Looks to match the characters the constitute the token T__74
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__74()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__74;


    // Java__.g:63:7: ( 'final' )
    // Java__.g:63:9: 'final'
    {
        this->matchs(lit_30);
        if  (this->hasException())
        {
            goto ruleT__74Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__74Ex; /* Prevent compiler warnings */
    ruleT__74Ex: ;

}
// $ANTLR end T__74

//   Comes from: 64:7: ( 'finally' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__75
 *
 * Looks to match the characters the constitute the token T__75
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__75()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__75;


    // Java__.g:64:7: ( 'finally' )
    // Java__.g:64:9: 'finally'
    {
        this->matchs(lit_31);
        if  (this->hasException())
        {
            goto ruleT__75Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__75Ex; /* Prevent compiler warnings */
    ruleT__75Ex: ;

}
// $ANTLR end T__75

//   Comes from: 65:7: ( 'float' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__76
 *
 * Looks to match the characters the constitute the token T__76
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__76()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__76;


    // Java__.g:65:7: ( 'float' )
    // Java__.g:65:9: 'float'
    {
        this->matchs(lit_32);
        if  (this->hasException())
        {
            goto ruleT__76Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__76Ex; /* Prevent compiler warnings */
    ruleT__76Ex: ;

}
// $ANTLR end T__76

//   Comes from: 66:7: ( 'for' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__77
 *
 * Looks to match the characters the constitute the token T__77
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__77()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__77;


    // Java__.g:66:7: ( 'for' )
    // Java__.g:66:9: 'for'
    {
        this->matchs(lit_33);
        if  (this->hasException())
        {
            goto ruleT__77Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__77Ex; /* Prevent compiler warnings */
    ruleT__77Ex: ;

}
// $ANTLR end T__77

//   Comes from: 67:7: ( 'if' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__78
 *
 * Looks to match the characters the constitute the token T__78
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__78()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__78;


    // Java__.g:67:7: ( 'if' )
    // Java__.g:67:9: 'if'
    {
        this->matchs(lit_34);
        if  (this->hasException())
        {
            goto ruleT__78Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__78Ex; /* Prevent compiler warnings */
    ruleT__78Ex: ;

}
// $ANTLR end T__78

//   Comes from: 68:7: ( 'implements' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__79
 *
 * Looks to match the characters the constitute the token T__79
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__79()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__79;


    // Java__.g:68:7: ( 'implements' )
    // Java__.g:68:9: 'implements'
    {
        this->matchs(lit_35);
        if  (this->hasException())
        {
            goto ruleT__79Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__79Ex; /* Prevent compiler warnings */
    ruleT__79Ex: ;

}
// $ANTLR end T__79

//   Comes from: 69:7: ( 'import' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__80
 *
 * Looks to match the characters the constitute the token T__80
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__80()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__80;


    // Java__.g:69:7: ( 'import' )
    // Java__.g:69:9: 'import'
    {
        this->matchs(lit_36);
        if  (this->hasException())
        {
            goto ruleT__80Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__80Ex; /* Prevent compiler warnings */
    ruleT__80Ex: ;

}
// $ANTLR end T__80

//   Comes from: 70:7: ( 'instanceof' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__81
 *
 * Looks to match the characters the constitute the token T__81
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__81()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__81;


    // Java__.g:70:7: ( 'instanceof' )
    // Java__.g:70:9: 'instanceof'
    {
        this->matchs(lit_37);
        if  (this->hasException())
        {
            goto ruleT__81Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__81Ex; /* Prevent compiler warnings */
    ruleT__81Ex: ;

}
// $ANTLR end T__81

//   Comes from: 71:7: ( 'int' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__82
 *
 * Looks to match the characters the constitute the token T__82
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__82()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__82;


    // Java__.g:71:7: ( 'int' )
    // Java__.g:71:9: 'int'
    {
        this->matchs(lit_38);
        if  (this->hasException())
        {
            goto ruleT__82Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__82Ex; /* Prevent compiler warnings */
    ruleT__82Ex: ;

}
// $ANTLR end T__82

//   Comes from: 72:7: ( 'interface' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__83
 *
 * Looks to match the characters the constitute the token T__83
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__83()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__83;


    // Java__.g:72:7: ( 'interface' )
    // Java__.g:72:9: 'interface'
    {
        this->matchs(lit_39);
        if  (this->hasException())
        {
            goto ruleT__83Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__83Ex; /* Prevent compiler warnings */
    ruleT__83Ex: ;

}
// $ANTLR end T__83

//   Comes from: 73:7: ( 'long' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__84
 *
 * Looks to match the characters the constitute the token T__84
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__84()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__84;


    // Java__.g:73:7: ( 'long' )
    // Java__.g:73:9: 'long'
    {
        this->matchs(lit_40);
        if  (this->hasException())
        {
            goto ruleT__84Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__84Ex; /* Prevent compiler warnings */
    ruleT__84Ex: ;

}
// $ANTLR end T__84

//   Comes from: 74:7: ( 'native' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__85
 *
 * Looks to match the characters the constitute the token T__85
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__85()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__85;


    // Java__.g:74:7: ( 'native' )
    // Java__.g:74:9: 'native'
    {
        this->matchs(lit_41);
        if  (this->hasException())
        {
            goto ruleT__85Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__85Ex; /* Prevent compiler warnings */
    ruleT__85Ex: ;

}
// $ANTLR end T__85

//   Comes from: 75:7: ( 'new' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__86
 *
 * Looks to match the characters the constitute the token T__86
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__86()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__86;


    // Java__.g:75:7: ( 'new' )
    // Java__.g:75:9: 'new'
    {
        this->matchs(lit_42);
        if  (this->hasException())
        {
            goto ruleT__86Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__86Ex; /* Prevent compiler warnings */
    ruleT__86Ex: ;

}
// $ANTLR end T__86

//   Comes from: 76:7: ( 'null' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__87
 *
 * Looks to match the characters the constitute the token T__87
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__87()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__87;


    // Java__.g:76:7: ( 'null' )
    // Java__.g:76:9: 'null'
    {
        this->matchs(lit_43);
        if  (this->hasException())
        {
            goto ruleT__87Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__87Ex; /* Prevent compiler warnings */
    ruleT__87Ex: ;

}
// $ANTLR end T__87

//   Comes from: 77:7: ( 'package' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__88
 *
 * Looks to match the characters the constitute the token T__88
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__88()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__88;


    // Java__.g:77:7: ( 'package' )
    // Java__.g:77:9: 'package'
    {
        this->matchs(lit_44);
        if  (this->hasException())
        {
            goto ruleT__88Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__88Ex; /* Prevent compiler warnings */
    ruleT__88Ex: ;

}
// $ANTLR end T__88

//   Comes from: 78:7: ( 'private' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__89
 *
 * Looks to match the characters the constitute the token T__89
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__89()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__89;


    // Java__.g:78:7: ( 'private' )
    // Java__.g:78:9: 'private'
    {
        this->matchs(lit_45);
        if  (this->hasException())
        {
            goto ruleT__89Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__89Ex; /* Prevent compiler warnings */
    ruleT__89Ex: ;

}
// $ANTLR end T__89

//   Comes from: 79:7: ( 'protected' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__90
 *
 * Looks to match the characters the constitute the token T__90
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__90()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__90;


    // Java__.g:79:7: ( 'protected' )
    // Java__.g:79:9: 'protected'
    {
        this->matchs(lit_46);
        if  (this->hasException())
        {
            goto ruleT__90Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__90Ex; /* Prevent compiler warnings */
    ruleT__90Ex: ;

}
// $ANTLR end T__90

//   Comes from: 80:7: ( 'public' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__91
 *
 * Looks to match the characters the constitute the token T__91
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__91()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__91;


    // Java__.g:80:7: ( 'public' )
    // Java__.g:80:9: 'public'
    {
        this->matchs(lit_47);
        if  (this->hasException())
        {
            goto ruleT__91Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__91Ex; /* Prevent compiler warnings */
    ruleT__91Ex: ;

}
// $ANTLR end T__91

//   Comes from: 81:7: ( 'return' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__92
 *
 * Looks to match the characters the constitute the token T__92
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__92()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__92;


    // Java__.g:81:7: ( 'return' )
    // Java__.g:81:9: 'return'
    {
        this->matchs(lit_48);
        if  (this->hasException())
        {
            goto ruleT__92Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__92Ex; /* Prevent compiler warnings */
    ruleT__92Ex: ;

}
// $ANTLR end T__92

//   Comes from: 82:7: ( 'short' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__93
 *
 * Looks to match the characters the constitute the token T__93
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__93()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__93;


    // Java__.g:82:7: ( 'short' )
    // Java__.g:82:9: 'short'
    {
        this->matchs(lit_49);
        if  (this->hasException())
        {
            goto ruleT__93Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__93Ex; /* Prevent compiler warnings */
    ruleT__93Ex: ;

}
// $ANTLR end T__93

//   Comes from: 83:7: ( 'static' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__94
 *
 * Looks to match the characters the constitute the token T__94
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__94()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__94;


    // Java__.g:83:7: ( 'static' )
    // Java__.g:83:9: 'static'
    {
        this->matchs(lit_50);
        if  (this->hasException())
        {
            goto ruleT__94Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__94Ex; /* Prevent compiler warnings */
    ruleT__94Ex: ;

}
// $ANTLR end T__94

//   Comes from: 84:7: ( 'strictfp' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__95
 *
 * Looks to match the characters the constitute the token T__95
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__95()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__95;


    // Java__.g:84:7: ( 'strictfp' )
    // Java__.g:84:9: 'strictfp'
    {
        this->matchs(lit_51);
        if  (this->hasException())
        {
            goto ruleT__95Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__95Ex; /* Prevent compiler warnings */
    ruleT__95Ex: ;

}
// $ANTLR end T__95

//   Comes from: 85:7: ( 'super' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__96
 *
 * Looks to match the characters the constitute the token T__96
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__96()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__96;


    // Java__.g:85:7: ( 'super' )
    // Java__.g:85:9: 'super'
    {
        this->matchs(lit_52);
        if  (this->hasException())
        {
            goto ruleT__96Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__96Ex; /* Prevent compiler warnings */
    ruleT__96Ex: ;

}
// $ANTLR end T__96

//   Comes from: 86:7: ( 'switch' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__97
 *
 * Looks to match the characters the constitute the token T__97
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__97()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__97;


    // Java__.g:86:7: ( 'switch' )
    // Java__.g:86:9: 'switch'
    {
        this->matchs(lit_53);
        if  (this->hasException())
        {
            goto ruleT__97Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__97Ex; /* Prevent compiler warnings */
    ruleT__97Ex: ;

}
// $ANTLR end T__97

//   Comes from: 87:7: ( 'synchronized' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__98
 *
 * Looks to match the characters the constitute the token T__98
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__98()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__98;


    // Java__.g:87:7: ( 'synchronized' )
    // Java__.g:87:9: 'synchronized'
    {
        this->matchs(lit_54);
        if  (this->hasException())
        {
            goto ruleT__98Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__98Ex; /* Prevent compiler warnings */
    ruleT__98Ex: ;

}
// $ANTLR end T__98

//   Comes from: 88:7: ( 'this' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__99
 *
 * Looks to match the characters the constitute the token T__99
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__99()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__99;


    // Java__.g:88:7: ( 'this' )
    // Java__.g:88:9: 'this'
    {
        this->matchs(lit_55);
        if  (this->hasException())
        {
            goto ruleT__99Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__99Ex; /* Prevent compiler warnings */
    ruleT__99Ex: ;

}
// $ANTLR end T__99

//   Comes from: 89:8: ( 'throw' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__100
 *
 * Looks to match the characters the constitute the token T__100
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__100()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__100;


    // Java__.g:89:8: ( 'throw' )
    // Java__.g:89:10: 'throw'
    {
        this->matchs(lit_56);
        if  (this->hasException())
        {
            goto ruleT__100Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__100Ex; /* Prevent compiler warnings */
    ruleT__100Ex: ;

}
// $ANTLR end T__100

//   Comes from: 90:8: ( 'throws' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__101
 *
 * Looks to match the characters the constitute the token T__101
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__101()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__101;


    // Java__.g:90:8: ( 'throws' )
    // Java__.g:90:10: 'throws'
    {
        this->matchs(lit_57);
        if  (this->hasException())
        {
            goto ruleT__101Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__101Ex; /* Prevent compiler warnings */
    ruleT__101Ex: ;

}
// $ANTLR end T__101

//   Comes from: 91:8: ( 'transient' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__102
 *
 * Looks to match the characters the constitute the token T__102
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__102()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__102;


    // Java__.g:91:8: ( 'transient' )
    // Java__.g:91:10: 'transient'
    {
        this->matchs(lit_58);
        if  (this->hasException())
        {
            goto ruleT__102Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__102Ex; /* Prevent compiler warnings */
    ruleT__102Ex: ;

}
// $ANTLR end T__102

//   Comes from: 92:8: ( 'true' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__103
 *
 * Looks to match the characters the constitute the token T__103
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__103()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__103;


    // Java__.g:92:8: ( 'true' )
    // Java__.g:92:10: 'true'
    {
        this->matchs(lit_59);
        if  (this->hasException())
        {
            goto ruleT__103Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__103Ex; /* Prevent compiler warnings */
    ruleT__103Ex: ;

}
// $ANTLR end T__103

//   Comes from: 93:8: ( 'try' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__104
 *
 * Looks to match the characters the constitute the token T__104
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__104()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__104;


    // Java__.g:93:8: ( 'try' )
    // Java__.g:93:10: 'try'
    {
        this->matchs(lit_60);
        if  (this->hasException())
        {
            goto ruleT__104Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__104Ex; /* Prevent compiler warnings */
    ruleT__104Ex: ;

}
// $ANTLR end T__104

//   Comes from: 94:8: ( 'void' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__105
 *
 * Looks to match the characters the constitute the token T__105
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__105()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__105;


    // Java__.g:94:8: ( 'void' )
    // Java__.g:94:10: 'void'
    {
        this->matchs(lit_61);
        if  (this->hasException())
        {
            goto ruleT__105Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__105Ex; /* Prevent compiler warnings */
    ruleT__105Ex: ;

}
// $ANTLR end T__105

//   Comes from: 95:8: ( 'volatile' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__106
 *
 * Looks to match the characters the constitute the token T__106
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__106()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__106;


    // Java__.g:95:8: ( 'volatile' )
    // Java__.g:95:10: 'volatile'
    {
        this->matchs(lit_62);
        if  (this->hasException())
        {
            goto ruleT__106Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__106Ex; /* Prevent compiler warnings */
    ruleT__106Ex: ;

}
// $ANTLR end T__106

//   Comes from: 96:8: ( 'while' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__107
 *
 * Looks to match the characters the constitute the token T__107
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__107()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__107;


    // Java__.g:96:8: ( 'while' )
    // Java__.g:96:10: 'while'
    {
        this->matchs(lit_63);
        if  (this->hasException())
        {
            goto ruleT__107Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__107Ex; /* Prevent compiler warnings */
    ruleT__107Ex: ;

}
// $ANTLR end T__107

//   Comes from: 97:8: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__108
 *
 * Looks to match the characters the constitute the token T__108
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__108()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__108;


    // Java__.g:97:8: ( '{' )
    // Java__.g:97:10: '{'
    {
         this->matchc('{');
        if  (this->hasException())
        {
            goto ruleT__108Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__108Ex; /* Prevent compiler warnings */
    ruleT__108Ex: ;

}
// $ANTLR end T__108

//   Comes from: 98:8: ( '|' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__109
 *
 * Looks to match the characters the constitute the token T__109
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__109()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__109;


    // Java__.g:98:8: ( '|' )
    // Java__.g:98:10: '|'
    {
         this->matchc('|');
        if  (this->hasException())
        {
            goto ruleT__109Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__109Ex; /* Prevent compiler warnings */
    ruleT__109Ex: ;

}
// $ANTLR end T__109

//   Comes from: 99:8: ( '|=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__110
 *
 * Looks to match the characters the constitute the token T__110
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__110()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__110;


    // Java__.g:99:8: ( '|=' )
    // Java__.g:99:10: '|='
    {
        this->matchs(lit_64);
        if  (this->hasException())
        {
            goto ruleT__110Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__110Ex; /* Prevent compiler warnings */
    ruleT__110Ex: ;

}
// $ANTLR end T__110

//   Comes from: 100:8: ( '||' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__111
 *
 * Looks to match the characters the constitute the token T__111
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__111()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__111;


    // Java__.g:100:8: ( '||' )
    // Java__.g:100:10: '||'
    {
        this->matchs(lit_65);
        if  (this->hasException())
        {
            goto ruleT__111Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__111Ex; /* Prevent compiler warnings */
    ruleT__111Ex: ;

}
// $ANTLR end T__111

//   Comes from: 101:8: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__112
 *
 * Looks to match the characters the constitute the token T__112
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__112()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__112;


    // Java__.g:101:8: ( '}' )
    // Java__.g:101:10: '}'
    {
         this->matchc('}');
        if  (this->hasException())
        {
            goto ruleT__112Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__112Ex; /* Prevent compiler warnings */
    ruleT__112Ex: ;

}
// $ANTLR end T__112

//   Comes from: 102:8: ( '~' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__113
 *
 * Looks to match the characters the constitute the token T__113
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void JavaLexer::mT__113()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__113;


    // Java__.g:102:8: ( '~' )
    // Java__.g:102:10: '~'
    {
         this->matchc('~');
        if  (this->hasException())
        {
            goto ruleT__113Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__113Ex; /* Prevent compiler warnings */
    ruleT__113Ex: ;

}
// $ANTLR end T__113

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
void
JavaLexer::mTokens()
{
    {
        //  Java__.g:1:8: ( T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | JavaLexerRules. Tokens )

        ANTLR_UINT32 alt1;

        alt1=91;

        {
            int LA1_0 = this->LA(1);
            if ( (LA1_0 == '!'))
            {
                switch ( this->LA(2) )
                {
                case '=':
                	{
                		alt1=2;
                	}
                    break;

                default:
                    alt1=1;
                }

            }
            else if ( (LA1_0 == '%'))
            {
                switch ( this->LA(2) )
                {
                case '=':
                	{
                		alt1=4;
                	}
                    break;

                default:
                    alt1=3;
                }

            }
            else if ( (LA1_0 == '&'))
            {
                switch ( this->LA(2) )
                {
                case '&':
                	{
                		alt1=5;
                	}
                    break;
                case '=':
                	{
                		alt1=7;
                	}
                    break;

                default:
                    alt1=6;
                }

            }
            else if ( (LA1_0 == '('))
            {
                alt1=8;
            }
            else if ( (LA1_0 == ')'))
            {
                alt1=9;
            }
            else if ( (LA1_0 == '*'))
            {
                switch ( this->LA(2) )
                {
                case '=':
                	{
                		alt1=11;
                	}
                    break;

                default:
                    alt1=10;
                }

            }
            else if ( (LA1_0 == '+'))
            {
                switch ( this->LA(2) )
                {
                case '+':
                	{
                		alt1=13;
                	}
                    break;
                case '=':
                	{
                		alt1=14;
                	}
                    break;

                default:
                    alt1=12;
                }

            }
            else if ( (LA1_0 == ','))
            {
                alt1=15;
            }
            else if ( (LA1_0 == '-'))
            {
                switch ( this->LA(2) )
                {
                case '-':
                	{
                		alt1=17;
                	}
                    break;
                case '=':
                	{
                		alt1=18;
                	}
                    break;

                default:
                    alt1=16;
                }

            }
            else if ( (LA1_0 == '.'))
            {
                switch ( this->LA(2) )
                {
                case '.':
                	{
                		alt1=20;
                	}
                    break;
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                	{
                		alt1=91;
                	}
                    break;

                default:
                    alt1=19;
                }

            }
            else if ( (LA1_0 == '/'))
            {
                switch ( this->LA(2) )
                {
                case '=':
                	{
                		alt1=22;
                	}
                    break;
                case '*':
                case '/':
                	{
                		alt1=91;
                	}
                    break;

                default:
                    alt1=21;
                }

            }
            else if ( (LA1_0 == ':'))
            {
                alt1=23;
            }
            else if ( (LA1_0 == ';'))
            {
                alt1=24;
            }
            else if ( (LA1_0 == '<'))
            {
                alt1=25;
            }
            else if ( (LA1_0 == '='))
            {
                switch ( this->LA(2) )
                {
                case '=':
                	{
                		alt1=27;
                	}
                    break;

                default:
                    alt1=26;
                }

            }
            else if ( (LA1_0 == '>'))
            {
                alt1=28;
            }
            else if ( (LA1_0 == '?'))
            {
                alt1=29;
            }
            else if ( (LA1_0 == '@'))
            {
                alt1=30;
            }
            else if ( (LA1_0 == '['))
            {
                alt1=31;
            }
            else if ( (LA1_0 == ']'))
            {
                alt1=32;
            }
            else if ( (LA1_0 == '^'))
            {
                switch ( this->LA(2) )
                {
                case '=':
                	{
                		alt1=34;
                	}
                    break;

                default:
                    alt1=33;
                }

            }
            else if ( (LA1_0 == 'a'))
            {
                switch ( this->LA(2) )
                {
                case 'b':
                	{
                		switch ( this->LA(3) )
                		{
                		case 's':
                			{
                				switch ( this->LA(4) )
                				{
                				case 't':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'r':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'a':
                									{
                										switch ( this->LA(7) )
                										{
                										case 'c':
                											{
                												switch ( this->LA(8) )
                												{
                												case 't':
                													{
                														{
                														    int LA1_299 = this->LA(9);
                														    if ( (LA1_299 == '$' || ((LA1_299 >= '0') && (LA1_299 <= '9')) || ((LA1_299 >= 'A') && (LA1_299 <= 'Z')) || LA1_299 == '_' || ((LA1_299 >= 'a') && (LA1_299 <= 'z')) || ((LA1_299 >= 0x00C0) && (LA1_299 <= 0x00D6)) || ((LA1_299 >= 0x00D8) && (LA1_299 <= 0x00F6)) || ((LA1_299 >= 0x00F8) && (LA1_299 <= 0x1FFF)) || ((LA1_299 >= 0x3040) && (LA1_299 <= 0x318F)) || ((LA1_299 >= 0x3300) && (LA1_299 <= 0x337F)) || ((LA1_299 >= 0x3400) && (LA1_299 <= 0x3D2D)) || ((LA1_299 >= 0x4E00) && (LA1_299 <= 0x9FFF)) || ((LA1_299 >= 0xF900) && (LA1_299 <= 0xFAFF))))
                														    {
                														        alt1=91;
                														    }
                														    else
                														    {
                														        alt1=35;
                														    }
                														}
                													}
                												    break;

                												default:
                												    alt1=91;
                												}

                											}
                										    break;

                										default:
                										    alt1=91;
                										}

                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 's':
                	{
                		switch ( this->LA(3) )
                		{
                		case 's':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'e':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'r':
                							{
                								switch ( this->LA(6) )
                								{
                								case 't':
                									{
                										{
                										    int LA1_240 = this->LA(7);
                										    if ( (LA1_240 == '$' || ((LA1_240 >= '0') && (LA1_240 <= '9')) || ((LA1_240 >= 'A') && (LA1_240 <= 'Z')) || LA1_240 == '_' || ((LA1_240 >= 'a') && (LA1_240 <= 'z')) || ((LA1_240 >= 0x00C0) && (LA1_240 <= 0x00D6)) || ((LA1_240 >= 0x00D8) && (LA1_240 <= 0x00F6)) || ((LA1_240 >= 0x00F8) && (LA1_240 <= 0x1FFF)) || ((LA1_240 >= 0x3040) && (LA1_240 <= 0x318F)) || ((LA1_240 >= 0x3300) && (LA1_240 <= 0x337F)) || ((LA1_240 >= 0x3400) && (LA1_240 <= 0x3D2D)) || ((LA1_240 >= 0x4E00) && (LA1_240 <= 0x9FFF)) || ((LA1_240 >= 0xF900) && (LA1_240 <= 0xFAFF))))
                										    {
                										        alt1=91;
                										    }
                										    else
                										    {
                										        alt1=36;
                										    }
                										}
                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;

                default:
                    alt1=91;
                }

            }
            else if ( (LA1_0 == 'b'))
            {
                switch ( this->LA(2) )
                {
                case 'o':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'o':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'l':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'e':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'a':
                									{
                										switch ( this->LA(7) )
                										{
                										case 'n':
                											{
                												{
                												    int LA1_276 = this->LA(8);
                												    if ( (LA1_276 == '$' || ((LA1_276 >= '0') && (LA1_276 <= '9')) || ((LA1_276 >= 'A') && (LA1_276 <= 'Z')) || LA1_276 == '_' || ((LA1_276 >= 'a') && (LA1_276 <= 'z')) || ((LA1_276 >= 0x00C0) && (LA1_276 <= 0x00D6)) || ((LA1_276 >= 0x00D8) && (LA1_276 <= 0x00F6)) || ((LA1_276 >= 0x00F8) && (LA1_276 <= 0x1FFF)) || ((LA1_276 >= 0x3040) && (LA1_276 <= 0x318F)) || ((LA1_276 >= 0x3300) && (LA1_276 <= 0x337F)) || ((LA1_276 >= 0x3400) && (LA1_276 <= 0x3D2D)) || ((LA1_276 >= 0x4E00) && (LA1_276 <= 0x9FFF)) || ((LA1_276 >= 0xF900) && (LA1_276 <= 0xFAFF))))
                												    {
                												        alt1=91;
                												    }
                												    else
                												    {
                												        alt1=37;
                												    }
                												}
                											}
                										    break;

                										default:
                										    alt1=91;
                										}

                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'r':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'e':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'a':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'k':
                							{
                								{
                								    int LA1_200 = this->LA(6);
                								    if ( (LA1_200 == '$' || ((LA1_200 >= '0') && (LA1_200 <= '9')) || ((LA1_200 >= 'A') && (LA1_200 <= 'Z')) || LA1_200 == '_' || ((LA1_200 >= 'a') && (LA1_200 <= 'z')) || ((LA1_200 >= 0x00C0) && (LA1_200 <= 0x00D6)) || ((LA1_200 >= 0x00D8) && (LA1_200 <= 0x00F6)) || ((LA1_200 >= 0x00F8) && (LA1_200 <= 0x1FFF)) || ((LA1_200 >= 0x3040) && (LA1_200 <= 0x318F)) || ((LA1_200 >= 0x3300) && (LA1_200 <= 0x337F)) || ((LA1_200 >= 0x3400) && (LA1_200 <= 0x3D2D)) || ((LA1_200 >= 0x4E00) && (LA1_200 <= 0x9FFF)) || ((LA1_200 >= 0xF900) && (LA1_200 <= 0xFAFF))))
                								    {
                								        alt1=91;
                								    }
                								    else
                								    {
                								        alt1=38;
                								    }
                								}
                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'y':
                	{
                		switch ( this->LA(3) )
                		{
                		case 't':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'e':
                					{
                						{
                						    int LA1_155 = this->LA(5);
                						    if ( (LA1_155 == '$' || ((LA1_155 >= '0') && (LA1_155 <= '9')) || ((LA1_155 >= 'A') && (LA1_155 <= 'Z')) || LA1_155 == '_' || ((LA1_155 >= 'a') && (LA1_155 <= 'z')) || ((LA1_155 >= 0x00C0) && (LA1_155 <= 0x00D6)) || ((LA1_155 >= 0x00D8) && (LA1_155 <= 0x00F6)) || ((LA1_155 >= 0x00F8) && (LA1_155 <= 0x1FFF)) || ((LA1_155 >= 0x3040) && (LA1_155 <= 0x318F)) || ((LA1_155 >= 0x3300) && (LA1_155 <= 0x337F)) || ((LA1_155 >= 0x3400) && (LA1_155 <= 0x3D2D)) || ((LA1_155 >= 0x4E00) && (LA1_155 <= 0x9FFF)) || ((LA1_155 >= 0xF900) && (LA1_155 <= 0xFAFF))))
                						    {
                						        alt1=91;
                						    }
                						    else
                						    {
                						        alt1=39;
                						    }
                						}
                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;

                default:
                    alt1=91;
                }

            }
            else if ( (LA1_0 == 'c'))
            {
                switch ( this->LA(2) )
                {
                case 'a':
                	{
                		switch ( this->LA(3) )
                		{
                		case 's':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'e':
                					{
                						{
                						    int LA1_156 = this->LA(5);
                						    if ( (LA1_156 == '$' || ((LA1_156 >= '0') && (LA1_156 <= '9')) || ((LA1_156 >= 'A') && (LA1_156 <= 'Z')) || LA1_156 == '_' || ((LA1_156 >= 'a') && (LA1_156 <= 'z')) || ((LA1_156 >= 0x00C0) && (LA1_156 <= 0x00D6)) || ((LA1_156 >= 0x00D8) && (LA1_156 <= 0x00F6)) || ((LA1_156 >= 0x00F8) && (LA1_156 <= 0x1FFF)) || ((LA1_156 >= 0x3040) && (LA1_156 <= 0x318F)) || ((LA1_156 >= 0x3300) && (LA1_156 <= 0x337F)) || ((LA1_156 >= 0x3400) && (LA1_156 <= 0x3D2D)) || ((LA1_156 >= 0x4E00) && (LA1_156 <= 0x9FFF)) || ((LA1_156 >= 0xF900) && (LA1_156 <= 0xFAFF))))
                						    {
                						        alt1=91;
                						    }
                						    else
                						    {
                						        alt1=40;
                						    }
                						}
                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;
                		case 't':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'c':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'h':
                							{
                								{
                								    int LA1_203 = this->LA(6);
                								    if ( (LA1_203 == '$' || ((LA1_203 >= '0') && (LA1_203 <= '9')) || ((LA1_203 >= 'A') && (LA1_203 <= 'Z')) || LA1_203 == '_' || ((LA1_203 >= 'a') && (LA1_203 <= 'z')) || ((LA1_203 >= 0x00C0) && (LA1_203 <= 0x00D6)) || ((LA1_203 >= 0x00D8) && (LA1_203 <= 0x00F6)) || ((LA1_203 >= 0x00F8) && (LA1_203 <= 0x1FFF)) || ((LA1_203 >= 0x3040) && (LA1_203 <= 0x318F)) || ((LA1_203 >= 0x3300) && (LA1_203 <= 0x337F)) || ((LA1_203 >= 0x3400) && (LA1_203 <= 0x3D2D)) || ((LA1_203 >= 0x4E00) && (LA1_203 <= 0x9FFF)) || ((LA1_203 >= 0xF900) && (LA1_203 <= 0xFAFF))))
                								    {
                								        alt1=91;
                								    }
                								    else
                								    {
                								        alt1=41;
                								    }
                								}
                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'h':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'a':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'r':
                					{
                						{
                						    int LA1_158 = this->LA(5);
                						    if ( (LA1_158 == '$' || ((LA1_158 >= '0') && (LA1_158 <= '9')) || ((LA1_158 >= 'A') && (LA1_158 <= 'Z')) || LA1_158 == '_' || ((LA1_158 >= 'a') && (LA1_158 <= 'z')) || ((LA1_158 >= 0x00C0) && (LA1_158 <= 0x00D6)) || ((LA1_158 >= 0x00D8) && (LA1_158 <= 0x00F6)) || ((LA1_158 >= 0x00F8) && (LA1_158 <= 0x1FFF)) || ((LA1_158 >= 0x3040) && (LA1_158 <= 0x318F)) || ((LA1_158 >= 0x3300) && (LA1_158 <= 0x337F)) || ((LA1_158 >= 0x3400) && (LA1_158 <= 0x3D2D)) || ((LA1_158 >= 0x4E00) && (LA1_158 <= 0x9FFF)) || ((LA1_158 >= 0xF900) && (LA1_158 <= 0xFAFF))))
                						    {
                						        alt1=91;
                						    }
                						    else
                						    {
                						        alt1=42;
                						    }
                						}
                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'l':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'a':
                			{
                				switch ( this->LA(4) )
                				{
                				case 's':
                					{
                						switch ( this->LA(5) )
                						{
                						case 's':
                							{
                								{
                								    int LA1_205 = this->LA(6);
                								    if ( (LA1_205 == '$' || ((LA1_205 >= '0') && (LA1_205 <= '9')) || ((LA1_205 >= 'A') && (LA1_205 <= 'Z')) || LA1_205 == '_' || ((LA1_205 >= 'a') && (LA1_205 <= 'z')) || ((LA1_205 >= 0x00C0) && (LA1_205 <= 0x00D6)) || ((LA1_205 >= 0x00D8) && (LA1_205 <= 0x00F6)) || ((LA1_205 >= 0x00F8) && (LA1_205 <= 0x1FFF)) || ((LA1_205 >= 0x3040) && (LA1_205 <= 0x318F)) || ((LA1_205 >= 0x3300) && (LA1_205 <= 0x337F)) || ((LA1_205 >= 0x3400) && (LA1_205 <= 0x3D2D)) || ((LA1_205 >= 0x4E00) && (LA1_205 <= 0x9FFF)) || ((LA1_205 >= 0xF900) && (LA1_205 <= 0xFAFF))))
                								    {
                								        alt1=91;
                								    }
                								    else
                								    {
                								        alt1=43;
                								    }
                								}
                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'o':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'n':
                			{
                				switch ( this->LA(4) )
                				{
                				case 't':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'i':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'n':
                									{
                										switch ( this->LA(7) )
                										{
                										case 'u':
                											{
                												switch ( this->LA(8) )
                												{
                												case 'e':
                													{
                														{
                														    int LA1_301 = this->LA(9);
                														    if ( (LA1_301 == '$' || ((LA1_301 >= '0') && (LA1_301 <= '9')) || ((LA1_301 >= 'A') && (LA1_301 <= 'Z')) || LA1_301 == '_' || ((LA1_301 >= 'a') && (LA1_301 <= 'z')) || ((LA1_301 >= 0x00C0) && (LA1_301 <= 0x00D6)) || ((LA1_301 >= 0x00D8) && (LA1_301 <= 0x00F6)) || ((LA1_301 >= 0x00F8) && (LA1_301 <= 0x1FFF)) || ((LA1_301 >= 0x3040) && (LA1_301 <= 0x318F)) || ((LA1_301 >= 0x3300) && (LA1_301 <= 0x337F)) || ((LA1_301 >= 0x3400) && (LA1_301 <= 0x3D2D)) || ((LA1_301 >= 0x4E00) && (LA1_301 <= 0x9FFF)) || ((LA1_301 >= 0xF900) && (LA1_301 <= 0xFAFF))))
                														    {
                														        alt1=91;
                														    }
                														    else
                														    {
                														        alt1=44;
                														    }
                														}
                													}
                												    break;

                												default:
                												    alt1=91;
                												}

                											}
                										    break;

                										default:
                										    alt1=91;
                										}

                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;

                default:
                    alt1=91;
                }

            }
            else if ( (LA1_0 == 'd'))
            {
                switch ( this->LA(2) )
                {
                case 'e':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'f':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'a':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'u':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'l':
                									{
                										switch ( this->LA(7) )
                										{
                										case 't':
                											{
                												{
                												    int LA1_278 = this->LA(8);
                												    if ( (LA1_278 == '$' || ((LA1_278 >= '0') && (LA1_278 <= '9')) || ((LA1_278 >= 'A') && (LA1_278 <= 'Z')) || LA1_278 == '_' || ((LA1_278 >= 'a') && (LA1_278 <= 'z')) || ((LA1_278 >= 0x00C0) && (LA1_278 <= 0x00D6)) || ((LA1_278 >= 0x00D8) && (LA1_278 <= 0x00F6)) || ((LA1_278 >= 0x00F8) && (LA1_278 <= 0x1FFF)) || ((LA1_278 >= 0x3040) && (LA1_278 <= 0x318F)) || ((LA1_278 >= 0x3300) && (LA1_278 <= 0x337F)) || ((LA1_278 >= 0x3400) && (LA1_278 <= 0x3D2D)) || ((LA1_278 >= 0x4E00) && (LA1_278 <= 0x9FFF)) || ((LA1_278 >= 0xF900) && (LA1_278 <= 0xFAFF))))
                												    {
                												        alt1=91;
                												    }
                												    else
                												    {
                												        alt1=45;
                												    }
                												}
                											}
                										    break;

                										default:
                										    alt1=91;
                										}

                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'o':
                	{
                		{
                		    int LA1_75 = this->LA(3);
                		    if ( (LA1_75 == 'u'))
                		    {
                		        switch ( this->LA(4) )
                		        {
                		        case 'b':
                		        	{
                		        		switch ( this->LA(5) )
                		        		{
                		        		case 'l':
                		        			{
                		        				switch ( this->LA(6) )
                		        				{
                		        				case 'e':
                		        					{
                		        						{
                		        						    int LA1_247 = this->LA(7);
                		        						    if ( (LA1_247 == '$' || ((LA1_247 >= '0') && (LA1_247 <= '9')) || ((LA1_247 >= 'A') && (LA1_247 <= 'Z')) || LA1_247 == '_' || ((LA1_247 >= 'a') && (LA1_247 <= 'z')) || ((LA1_247 >= 0x00C0) && (LA1_247 <= 0x00D6)) || ((LA1_247 >= 0x00D8) && (LA1_247 <= 0x00F6)) || ((LA1_247 >= 0x00F8) && (LA1_247 <= 0x1FFF)) || ((LA1_247 >= 0x3040) && (LA1_247 <= 0x318F)) || ((LA1_247 >= 0x3300) && (LA1_247 <= 0x337F)) || ((LA1_247 >= 0x3400) && (LA1_247 <= 0x3D2D)) || ((LA1_247 >= 0x4E00) && (LA1_247 <= 0x9FFF)) || ((LA1_247 >= 0xF900) && (LA1_247 <= 0xFAFF))))
                		        						    {
                		        						        alt1=91;
                		        						    }
                		        						    else
                		        						    {
                		        						        alt1=47;
                		        						    }
                		        						}
                		        					}
                		        				    break;

                		        				default:
                		        				    alt1=91;
                		        				}

                		        			}
                		        		    break;

                		        		default:
                		        		    alt1=91;
                		        		}

                		        	}
                		            break;

                		        default:
                		            alt1=91;
                		        }

                		    }
                		    else if ( (LA1_75 == '$' || ((LA1_75 >= '0') && (LA1_75 <= '9')) || ((LA1_75 >= 'A') && (LA1_75 <= 'Z')) || LA1_75 == '_' || ((LA1_75 >= 'a') && (LA1_75 <= 't')) || ((LA1_75 >= 'v') && (LA1_75 <= 'z')) || ((LA1_75 >= 0x00C0) && (LA1_75 <= 0x00D6)) || ((LA1_75 >= 0x00D8) && (LA1_75 <= 0x00F6)) || ((LA1_75 >= 0x00F8) && (LA1_75 <= 0x1FFF)) || ((LA1_75 >= 0x3040) && (LA1_75 <= 0x318F)) || ((LA1_75 >= 0x3300) && (LA1_75 <= 0x337F)) || ((LA1_75 >= 0x3400) && (LA1_75 <= 0x3D2D)) || ((LA1_75 >= 0x4E00) && (LA1_75 <= 0x9FFF)) || ((LA1_75 >= 0xF900) && (LA1_75 <= 0xFAFF))))
                		    {
                		        alt1=91;
                		    }
                		    else
                		    {
                		        alt1=46;
                		    }
                		}
                	}
                    break;

                default:
                    alt1=91;
                }

            }
            else if ( (LA1_0 == 'e'))
            {
                switch ( this->LA(2) )
                {
                case 'l':
                	{
                		switch ( this->LA(3) )
                		{
                		case 's':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'e':
                					{
                						{
                						    int LA1_163 = this->LA(5);
                						    if ( (LA1_163 == '$' || ((LA1_163 >= '0') && (LA1_163 <= '9')) || ((LA1_163 >= 'A') && (LA1_163 <= 'Z')) || LA1_163 == '_' || ((LA1_163 >= 'a') && (LA1_163 <= 'z')) || ((LA1_163 >= 0x00C0) && (LA1_163 <= 0x00D6)) || ((LA1_163 >= 0x00D8) && (LA1_163 <= 0x00F6)) || ((LA1_163 >= 0x00F8) && (LA1_163 <= 0x1FFF)) || ((LA1_163 >= 0x3040) && (LA1_163 <= 0x318F)) || ((LA1_163 >= 0x3300) && (LA1_163 <= 0x337F)) || ((LA1_163 >= 0x3400) && (LA1_163 <= 0x3D2D)) || ((LA1_163 >= 0x4E00) && (LA1_163 <= 0x9FFF)) || ((LA1_163 >= 0xF900) && (LA1_163 <= 0xFAFF))))
                						    {
                						        alt1=91;
                						    }
                						    else
                						    {
                						        alt1=48;
                						    }
                						}
                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'x':
                	{
                		switch ( this->LA(3) )
                		{
                		case 't':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'e':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'n':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'd':
                									{
                										switch ( this->LA(7) )
                										{
                										case 's':
                											{
                												{
                												    int LA1_280 = this->LA(8);
                												    if ( (LA1_280 == '$' || ((LA1_280 >= '0') && (LA1_280 <= '9')) || ((LA1_280 >= 'A') && (LA1_280 <= 'Z')) || LA1_280 == '_' || ((LA1_280 >= 'a') && (LA1_280 <= 'z')) || ((LA1_280 >= 0x00C0) && (LA1_280 <= 0x00D6)) || ((LA1_280 >= 0x00D8) && (LA1_280 <= 0x00F6)) || ((LA1_280 >= 0x00F8) && (LA1_280 <= 0x1FFF)) || ((LA1_280 >= 0x3040) && (LA1_280 <= 0x318F)) || ((LA1_280 >= 0x3300) && (LA1_280 <= 0x337F)) || ((LA1_280 >= 0x3400) && (LA1_280 <= 0x3D2D)) || ((LA1_280 >= 0x4E00) && (LA1_280 <= 0x9FFF)) || ((LA1_280 >= 0xF900) && (LA1_280 <= 0xFAFF))))
                												    {
                												        alt1=91;
                												    }
                												    else
                												    {
                												        alt1=49;
                												    }
                												}
                											}
                										    break;

                										default:
                										    alt1=91;
                										}

                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;

                default:
                    alt1=91;
                }

            }
            else if ( (LA1_0 == 'f'))
            {
                switch ( this->LA(2) )
                {
                case 'a':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'l':
                			{
                				switch ( this->LA(4) )
                				{
                				case 's':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'e':
                							{
                								{
                								    int LA1_211 = this->LA(6);
                								    if ( (LA1_211 == '$' || ((LA1_211 >= '0') && (LA1_211 <= '9')) || ((LA1_211 >= 'A') && (LA1_211 <= 'Z')) || LA1_211 == '_' || ((LA1_211 >= 'a') && (LA1_211 <= 'z')) || ((LA1_211 >= 0x00C0) && (LA1_211 <= 0x00D6)) || ((LA1_211 >= 0x00D8) && (LA1_211 <= 0x00F6)) || ((LA1_211 >= 0x00F8) && (LA1_211 <= 0x1FFF)) || ((LA1_211 >= 0x3040) && (LA1_211 <= 0x318F)) || ((LA1_211 >= 0x3300) && (LA1_211 <= 0x337F)) || ((LA1_211 >= 0x3400) && (LA1_211 <= 0x3D2D)) || ((LA1_211 >= 0x4E00) && (LA1_211 <= 0x9FFF)) || ((LA1_211 >= 0xF900) && (LA1_211 <= 0xFAFF))))
                								    {
                								        alt1=91;
                								    }
                								    else
                								    {
                								        alt1=50;
                								    }
                								}
                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'i':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'n':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'a':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'l':
                							{
                								{
                								    int LA1_212 = this->LA(6);
                								    if ( (LA1_212 == 'l'))
                								    {
                								        switch ( this->LA(7) )
                								        {
                								        case 'y':
                								        	{
                								        		{
                								        		    int LA1_281 = this->LA(8);
                								        		    if ( (LA1_281 == '$' || ((LA1_281 >= '0') && (LA1_281 <= '9')) || ((LA1_281 >= 'A') && (LA1_281 <= 'Z')) || LA1_281 == '_' || ((LA1_281 >= 'a') && (LA1_281 <= 'z')) || ((LA1_281 >= 0x00C0) && (LA1_281 <= 0x00D6)) || ((LA1_281 >= 0x00D8) && (LA1_281 <= 0x00F6)) || ((LA1_281 >= 0x00F8) && (LA1_281 <= 0x1FFF)) || ((LA1_281 >= 0x3040) && (LA1_281 <= 0x318F)) || ((LA1_281 >= 0x3300) && (LA1_281 <= 0x337F)) || ((LA1_281 >= 0x3400) && (LA1_281 <= 0x3D2D)) || ((LA1_281 >= 0x4E00) && (LA1_281 <= 0x9FFF)) || ((LA1_281 >= 0xF900) && (LA1_281 <= 0xFAFF))))
                								        		    {
                								        		        alt1=91;
                								        		    }
                								        		    else
                								        		    {
                								        		        alt1=52;
                								        		    }
                								        		}
                								        	}
                								            break;

                								        default:
                								            alt1=91;
                								        }

                								    }
                								    else if ( (LA1_212 == '$' || ((LA1_212 >= '0') && (LA1_212 <= '9')) || ((LA1_212 >= 'A') && (LA1_212 <= 'Z')) || LA1_212 == '_' || ((LA1_212 >= 'a') && (LA1_212 <= 'k')) || ((LA1_212 >= 'm') && (LA1_212 <= 'z')) || ((LA1_212 >= 0x00C0) && (LA1_212 <= 0x00D6)) || ((LA1_212 >= 0x00D8) && (LA1_212 <= 0x00F6)) || ((LA1_212 >= 0x00F8) && (LA1_212 <= 0x1FFF)) || ((LA1_212 >= 0x3040) && (LA1_212 <= 0x318F)) || ((LA1_212 >= 0x3300) && (LA1_212 <= 0x337F)) || ((LA1_212 >= 0x3400) && (LA1_212 <= 0x3D2D)) || ((LA1_212 >= 0x4E00) && (LA1_212 <= 0x9FFF)) || ((LA1_212 >= 0xF900) && (LA1_212 <= 0xFAFF))))
                								    {
                								        alt1=91;
                								    }
                								    else
                								    {
                								        alt1=51;
                								    }
                								}
                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'l':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'o':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'a':
                					{
                						switch ( this->LA(5) )
                						{
                						case 't':
                							{
                								{
                								    int LA1_213 = this->LA(6);
                								    if ( (LA1_213 == '$' || ((LA1_213 >= '0') && (LA1_213 <= '9')) || ((LA1_213 >= 'A') && (LA1_213 <= 'Z')) || LA1_213 == '_' || ((LA1_213 >= 'a') && (LA1_213 <= 'z')) || ((LA1_213 >= 0x00C0) && (LA1_213 <= 0x00D6)) || ((LA1_213 >= 0x00D8) && (LA1_213 <= 0x00F6)) || ((LA1_213 >= 0x00F8) && (LA1_213 <= 0x1FFF)) || ((LA1_213 >= 0x3040) && (LA1_213 <= 0x318F)) || ((LA1_213 >= 0x3300) && (LA1_213 <= 0x337F)) || ((LA1_213 >= 0x3400) && (LA1_213 <= 0x3D2D)) || ((LA1_213 >= 0x4E00) && (LA1_213 <= 0x9FFF)) || ((LA1_213 >= 0xF900) && (LA1_213 <= 0xFAFF))))
                								    {
                								        alt1=91;
                								    }
                								    else
                								    {
                								        alt1=53;
                								    }
                								}
                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'o':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'r':
                			{
                				{
                				    int LA1_123 = this->LA(4);
                				    if ( (LA1_123 == '$' || ((LA1_123 >= '0') && (LA1_123 <= '9')) || ((LA1_123 >= 'A') && (LA1_123 <= 'Z')) || LA1_123 == '_' || ((LA1_123 >= 'a') && (LA1_123 <= 'z')) || ((LA1_123 >= 0x00C0) && (LA1_123 <= 0x00D6)) || ((LA1_123 >= 0x00D8) && (LA1_123 <= 0x00F6)) || ((LA1_123 >= 0x00F8) && (LA1_123 <= 0x1FFF)) || ((LA1_123 >= 0x3040) && (LA1_123 <= 0x318F)) || ((LA1_123 >= 0x3300) && (LA1_123 <= 0x337F)) || ((LA1_123 >= 0x3400) && (LA1_123 <= 0x3D2D)) || ((LA1_123 >= 0x4E00) && (LA1_123 <= 0x9FFF)) || ((LA1_123 >= 0xF900) && (LA1_123 <= 0xFAFF))))
                				    {
                				        alt1=91;
                				    }
                				    else
                				    {
                				        alt1=54;
                				    }
                				}
                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;

                default:
                    alt1=91;
                }

            }
            else if ( (LA1_0 == 'i'))
            {
                switch ( this->LA(2) )
                {
                case 'f':
                	{
                		{
                		    int LA1_82 = this->LA(3);
                		    if ( (LA1_82 == '$' || ((LA1_82 >= '0') && (LA1_82 <= '9')) || ((LA1_82 >= 'A') && (LA1_82 <= 'Z')) || LA1_82 == '_' || ((LA1_82 >= 'a') && (LA1_82 <= 'z')) || ((LA1_82 >= 0x00C0) && (LA1_82 <= 0x00D6)) || ((LA1_82 >= 0x00D8) && (LA1_82 <= 0x00F6)) || ((LA1_82 >= 0x00F8) && (LA1_82 <= 0x1FFF)) || ((LA1_82 >= 0x3040) && (LA1_82 <= 0x318F)) || ((LA1_82 >= 0x3300) && (LA1_82 <= 0x337F)) || ((LA1_82 >= 0x3400) && (LA1_82 <= 0x3D2D)) || ((LA1_82 >= 0x4E00) && (LA1_82 <= 0x9FFF)) || ((LA1_82 >= 0xF900) && (LA1_82 <= 0xFAFF))))
                		    {
                		        alt1=91;
                		    }
                		    else
                		    {
                		        alt1=55;
                		    }
                		}
                	}
                    break;
                case 'm':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'p':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'l':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'e':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'm':
                									{
                										switch ( this->LA(7) )
                										{
                										case 'e':
                											{
                												switch ( this->LA(8) )
                												{
                												case 'n':
                													{
                														switch ( this->LA(9) )
                														{
                														case 't':
                															{
                																switch ( this->LA(10) )
                																{
                																case 's':
                																	{
                																		{
                																		    int LA1_325 = this->LA(11);
                																		    if ( (LA1_325 == '$' || ((LA1_325 >= '0') && (LA1_325 <= '9')) || ((LA1_325 >= 'A') && (LA1_325 <= 'Z')) || LA1_325 == '_' || ((LA1_325 >= 'a') && (LA1_325 <= 'z')) || ((LA1_325 >= 0x00C0) && (LA1_325 <= 0x00D6)) || ((LA1_325 >= 0x00D8) && (LA1_325 <= 0x00F6)) || ((LA1_325 >= 0x00F8) && (LA1_325 <= 0x1FFF)) || ((LA1_325 >= 0x3040) && (LA1_325 <= 0x318F)) || ((LA1_325 >= 0x3300) && (LA1_325 <= 0x337F)) || ((LA1_325 >= 0x3400) && (LA1_325 <= 0x3D2D)) || ((LA1_325 >= 0x4E00) && (LA1_325 <= 0x9FFF)) || ((LA1_325 >= 0xF900) && (LA1_325 <= 0xFAFF))))
                																		    {
                																		        alt1=91;
                																		    }
                																		    else
                																		    {
                																		        alt1=56;
                																		    }
                																		}
                																	}
                																    break;

                																default:
                																    alt1=91;
                																}

                															}
                														    break;

                														default:
                														    alt1=91;
                														}

                													}
                												    break;

                												default:
                												    alt1=91;
                												}

                											}
                										    break;

                										default:
                										    alt1=91;
                										}

                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;
                				case 'o':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'r':
                							{
                								switch ( this->LA(6) )
                								{
                								case 't':
                									{
                										{
                										    int LA1_254 = this->LA(7);
                										    if ( (LA1_254 == '$' || ((LA1_254 >= '0') && (LA1_254 <= '9')) || ((LA1_254 >= 'A') && (LA1_254 <= 'Z')) || LA1_254 == '_' || ((LA1_254 >= 'a') && (LA1_254 <= 'z')) || ((LA1_254 >= 0x00C0) && (LA1_254 <= 0x00D6)) || ((LA1_254 >= 0x00D8) && (LA1_254 <= 0x00F6)) || ((LA1_254 >= 0x00F8) && (LA1_254 <= 0x1FFF)) || ((LA1_254 >= 0x3040) && (LA1_254 <= 0x318F)) || ((LA1_254 >= 0x3300) && (LA1_254 <= 0x337F)) || ((LA1_254 >= 0x3400) && (LA1_254 <= 0x3D2D)) || ((LA1_254 >= 0x4E00) && (LA1_254 <= 0x9FFF)) || ((LA1_254 >= 0xF900) && (LA1_254 <= 0xFAFF))))
                										    {
                										        alt1=91;
                										    }
                										    else
                										    {
                										        alt1=57;
                										    }
                										}
                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'n':
                	{
                		switch ( this->LA(3) )
                		{
                		case 's':
                			{
                				switch ( this->LA(4) )
                				{
                				case 't':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'a':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'n':
                									{
                										switch ( this->LA(7) )
                										{
                										case 'c':
                											{
                												switch ( this->LA(8) )
                												{
                												case 'e':
                													{
                														switch ( this->LA(9) )
                														{
                														case 'o':
                															{
                																switch ( this->LA(10) )
                																{
                																case 'f':
                																	{
                																		{
                																		    int LA1_326 = this->LA(11);
                																		    if ( (LA1_326 == '$' || ((LA1_326 >= '0') && (LA1_326 <= '9')) || ((LA1_326 >= 'A') && (LA1_326 <= 'Z')) || LA1_326 == '_' || ((LA1_326 >= 'a') && (LA1_326 <= 'z')) || ((LA1_326 >= 0x00C0) && (LA1_326 <= 0x00D6)) || ((LA1_326 >= 0x00D8) && (LA1_326 <= 0x00F6)) || ((LA1_326 >= 0x00F8) && (LA1_326 <= 0x1FFF)) || ((LA1_326 >= 0x3040) && (LA1_326 <= 0x318F)) || ((LA1_326 >= 0x3300) && (LA1_326 <= 0x337F)) || ((LA1_326 >= 0x3400) && (LA1_326 <= 0x3D2D)) || ((LA1_326 >= 0x4E00) && (LA1_326 <= 0x9FFF)) || ((LA1_326 >= 0xF900) && (LA1_326 <= 0xFAFF))))
                																		    {
                																		        alt1=91;
                																		    }
                																		    else
                																		    {
                																		        alt1=58;
                																		    }
                																		}
                																	}
                																    break;

                																default:
                																    alt1=91;
                																}

                															}
                														    break;

                														default:
                														    alt1=91;
                														}

                													}
                												    break;

                												default:
                												    alt1=91;
                												}

                											}
                										    break;

                										default:
                										    alt1=91;
                										}

                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;
                		case 't':
                			{
                				{
                				    int LA1_127 = this->LA(4);
                				    if ( (LA1_127 == 'e'))
                				    {
                				        switch ( this->LA(5) )
                				        {
                				        case 'r':
                				        	{
                				        		switch ( this->LA(6) )
                				        		{
                				        		case 'f':
                				        			{
                				        				switch ( this->LA(7) )
                				        				{
                				        				case 'a':
                				        					{
                				        						switch ( this->LA(8) )
                				        						{
                				        						case 'c':
                				        							{
                				        								switch ( this->LA(9) )
                				        								{
                				        								case 'e':
                				        									{
                				        										{
                				        										    int LA1_319 = this->LA(10);
                				        										    if ( (LA1_319 == '$' || ((LA1_319 >= '0') && (LA1_319 <= '9')) || ((LA1_319 >= 'A') && (LA1_319 <= 'Z')) || LA1_319 == '_' || ((LA1_319 >= 'a') && (LA1_319 <= 'z')) || ((LA1_319 >= 0x00C0) && (LA1_319 <= 0x00D6)) || ((LA1_319 >= 0x00D8) && (LA1_319 <= 0x00F6)) || ((LA1_319 >= 0x00F8) && (LA1_319 <= 0x1FFF)) || ((LA1_319 >= 0x3040) && (LA1_319 <= 0x318F)) || ((LA1_319 >= 0x3300) && (LA1_319 <= 0x337F)) || ((LA1_319 >= 0x3400) && (LA1_319 <= 0x3D2D)) || ((LA1_319 >= 0x4E00) && (LA1_319 <= 0x9FFF)) || ((LA1_319 >= 0xF900) && (LA1_319 <= 0xFAFF))))
                				        										    {
                				        										        alt1=91;
                				        										    }
                				        										    else
                				        										    {
                				        										        alt1=60;
                				        										    }
                				        										}
                				        									}
                				        								    break;

                				        								default:
                				        								    alt1=91;
                				        								}

                				        							}
                				        						    break;

                				        						default:
                				        						    alt1=91;
                				        						}

                				        					}
                				        				    break;

                				        				default:
                				        				    alt1=91;
                				        				}

                				        			}
                				        		    break;

                				        		default:
                				        		    alt1=91;
                				        		}

                				        	}
                				            break;

                				        default:
                				            alt1=91;
                				        }

                				    }
                				    else if ( (LA1_127 == '$' || ((LA1_127 >= '0') && (LA1_127 <= '9')) || ((LA1_127 >= 'A') && (LA1_127 <= 'Z')) || LA1_127 == '_' || ((LA1_127 >= 'a') && (LA1_127 <= 'd')) || ((LA1_127 >= 'f') && (LA1_127 <= 'z')) || ((LA1_127 >= 0x00C0) && (LA1_127 <= 0x00D6)) || ((LA1_127 >= 0x00D8) && (LA1_127 <= 0x00F6)) || ((LA1_127 >= 0x00F8) && (LA1_127 <= 0x1FFF)) || ((LA1_127 >= 0x3040) && (LA1_127 <= 0x318F)) || ((LA1_127 >= 0x3300) && (LA1_127 <= 0x337F)) || ((LA1_127 >= 0x3400) && (LA1_127 <= 0x3D2D)) || ((LA1_127 >= 0x4E00) && (LA1_127 <= 0x9FFF)) || ((LA1_127 >= 0xF900) && (LA1_127 <= 0xFAFF))))
                				    {
                				        alt1=91;
                				    }
                				    else
                				    {
                				        alt1=59;
                				    }
                				}
                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;

                default:
                    alt1=91;
                }

            }
            else if ( (LA1_0 == 'l'))
            {
                switch ( this->LA(2) )
                {
                case 'o':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'n':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'g':
                					{
                						{
                						    int LA1_174 = this->LA(5);
                						    if ( (LA1_174 == '$' || ((LA1_174 >= '0') && (LA1_174 <= '9')) || ((LA1_174 >= 'A') && (LA1_174 <= 'Z')) || LA1_174 == '_' || ((LA1_174 >= 'a') && (LA1_174 <= 'z')) || ((LA1_174 >= 0x00C0) && (LA1_174 <= 0x00D6)) || ((LA1_174 >= 0x00D8) && (LA1_174 <= 0x00F6)) || ((LA1_174 >= 0x00F8) && (LA1_174 <= 0x1FFF)) || ((LA1_174 >= 0x3040) && (LA1_174 <= 0x318F)) || ((LA1_174 >= 0x3300) && (LA1_174 <= 0x337F)) || ((LA1_174 >= 0x3400) && (LA1_174 <= 0x3D2D)) || ((LA1_174 >= 0x4E00) && (LA1_174 <= 0x9FFF)) || ((LA1_174 >= 0xF900) && (LA1_174 <= 0xFAFF))))
                						    {
                						        alt1=91;
                						    }
                						    else
                						    {
                						        alt1=61;
                						    }
                						}
                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;

                default:
                    alt1=91;
                }

            }
            else if ( (LA1_0 == 'n'))
            {
                switch ( this->LA(2) )
                {
                case 'a':
                	{
                		switch ( this->LA(3) )
                		{
                		case 't':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'i':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'v':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'e':
                									{
                										{
                										    int LA1_257 = this->LA(7);
                										    if ( (LA1_257 == '$' || ((LA1_257 >= '0') && (LA1_257 <= '9')) || ((LA1_257 >= 'A') && (LA1_257 <= 'Z')) || LA1_257 == '_' || ((LA1_257 >= 'a') && (LA1_257 <= 'z')) || ((LA1_257 >= 0x00C0) && (LA1_257 <= 0x00D6)) || ((LA1_257 >= 0x00D8) && (LA1_257 <= 0x00F6)) || ((LA1_257 >= 0x00F8) && (LA1_257 <= 0x1FFF)) || ((LA1_257 >= 0x3040) && (LA1_257 <= 0x318F)) || ((LA1_257 >= 0x3300) && (LA1_257 <= 0x337F)) || ((LA1_257 >= 0x3400) && (LA1_257 <= 0x3D2D)) || ((LA1_257 >= 0x4E00) && (LA1_257 <= 0x9FFF)) || ((LA1_257 >= 0xF900) && (LA1_257 <= 0xFAFF))))
                										    {
                										        alt1=91;
                										    }
                										    else
                										    {
                										        alt1=62;
                										    }
                										}
                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'e':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'w':
                			{
                				{
                				    int LA1_130 = this->LA(4);
                				    if ( (LA1_130 == '$' || ((LA1_130 >= '0') && (LA1_130 <= '9')) || ((LA1_130 >= 'A') && (LA1_130 <= 'Z')) || LA1_130 == '_' || ((LA1_130 >= 'a') && (LA1_130 <= 'z')) || ((LA1_130 >= 0x00C0) && (LA1_130 <= 0x00D6)) || ((LA1_130 >= 0x00D8) && (LA1_130 <= 0x00F6)) || ((LA1_130 >= 0x00F8) && (LA1_130 <= 0x1FFF)) || ((LA1_130 >= 0x3040) && (LA1_130 <= 0x318F)) || ((LA1_130 >= 0x3300) && (LA1_130 <= 0x337F)) || ((LA1_130 >= 0x3400) && (LA1_130 <= 0x3D2D)) || ((LA1_130 >= 0x4E00) && (LA1_130 <= 0x9FFF)) || ((LA1_130 >= 0xF900) && (LA1_130 <= 0xFAFF))))
                				    {
                				        alt1=91;
                				    }
                				    else
                				    {
                				        alt1=63;
                				    }
                				}
                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'u':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'l':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'l':
                					{
                						{
                						    int LA1_177 = this->LA(5);
                						    if ( (LA1_177 == '$' || ((LA1_177 >= '0') && (LA1_177 <= '9')) || ((LA1_177 >= 'A') && (LA1_177 <= 'Z')) || LA1_177 == '_' || ((LA1_177 >= 'a') && (LA1_177 <= 'z')) || ((LA1_177 >= 0x00C0) && (LA1_177 <= 0x00D6)) || ((LA1_177 >= 0x00D8) && (LA1_177 <= 0x00F6)) || ((LA1_177 >= 0x00F8) && (LA1_177 <= 0x1FFF)) || ((LA1_177 >= 0x3040) && (LA1_177 <= 0x318F)) || ((LA1_177 >= 0x3300) && (LA1_177 <= 0x337F)) || ((LA1_177 >= 0x3400) && (LA1_177 <= 0x3D2D)) || ((LA1_177 >= 0x4E00) && (LA1_177 <= 0x9FFF)) || ((LA1_177 >= 0xF900) && (LA1_177 <= 0xFAFF))))
                						    {
                						        alt1=91;
                						    }
                						    else
                						    {
                						        alt1=64;
                						    }
                						}
                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;

                default:
                    alt1=91;
                }

            }
            else if ( (LA1_0 == 'p'))
            {
                switch ( this->LA(2) )
                {
                case 'a':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'c':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'k':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'a':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'g':
                									{
                										switch ( this->LA(7) )
                										{
                										case 'e':
                											{
                												{
                												    int LA1_287 = this->LA(8);
                												    if ( (LA1_287 == '$' || ((LA1_287 >= '0') && (LA1_287 <= '9')) || ((LA1_287 >= 'A') && (LA1_287 <= 'Z')) || LA1_287 == '_' || ((LA1_287 >= 'a') && (LA1_287 <= 'z')) || ((LA1_287 >= 0x00C0) && (LA1_287 <= 0x00D6)) || ((LA1_287 >= 0x00D8) && (LA1_287 <= 0x00F6)) || ((LA1_287 >= 0x00F8) && (LA1_287 <= 0x1FFF)) || ((LA1_287 >= 0x3040) && (LA1_287 <= 0x318F)) || ((LA1_287 >= 0x3300) && (LA1_287 <= 0x337F)) || ((LA1_287 >= 0x3400) && (LA1_287 <= 0x3D2D)) || ((LA1_287 >= 0x4E00) && (LA1_287 <= 0x9FFF)) || ((LA1_287 >= 0xF900) && (LA1_287 <= 0xFAFF))))
                												    {
                												        alt1=91;
                												    }
                												    else
                												    {
                												        alt1=65;
                												    }
                												}
                											}
                										    break;

                										default:
                										    alt1=91;
                										}

                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'r':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'i':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'v':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'a':
                							{
                								switch ( this->LA(6) )
                								{
                								case 't':
                									{
                										switch ( this->LA(7) )
                										{
                										case 'e':
                											{
                												{
                												    int LA1_288 = this->LA(8);
                												    if ( (LA1_288 == '$' || ((LA1_288 >= '0') && (LA1_288 <= '9')) || ((LA1_288 >= 'A') && (LA1_288 <= 'Z')) || LA1_288 == '_' || ((LA1_288 >= 'a') && (LA1_288 <= 'z')) || ((LA1_288 >= 0x00C0) && (LA1_288 <= 0x00D6)) || ((LA1_288 >= 0x00D8) && (LA1_288 <= 0x00F6)) || ((LA1_288 >= 0x00F8) && (LA1_288 <= 0x1FFF)) || ((LA1_288 >= 0x3040) && (LA1_288 <= 0x318F)) || ((LA1_288 >= 0x3300) && (LA1_288 <= 0x337F)) || ((LA1_288 >= 0x3400) && (LA1_288 <= 0x3D2D)) || ((LA1_288 >= 0x4E00) && (LA1_288 <= 0x9FFF)) || ((LA1_288 >= 0xF900) && (LA1_288 <= 0xFAFF))))
                												    {
                												        alt1=91;
                												    }
                												    else
                												    {
                												        alt1=66;
                												    }
                												}
                											}
                										    break;

                										default:
                										    alt1=91;
                										}

                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;
                		case 'o':
                			{
                				switch ( this->LA(4) )
                				{
                				case 't':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'e':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'c':
                									{
                										switch ( this->LA(7) )
                										{
                										case 't':
                											{
                												switch ( this->LA(8) )
                												{
                												case 'e':
                													{
                														switch ( this->LA(9) )
                														{
                														case 'd':
                															{
                																{
                																    int LA1_320 = this->LA(10);
                																    if ( (LA1_320 == '$' || ((LA1_320 >= '0') && (LA1_320 <= '9')) || ((LA1_320 >= 'A') && (LA1_320 <= 'Z')) || LA1_320 == '_' || ((LA1_320 >= 'a') && (LA1_320 <= 'z')) || ((LA1_320 >= 0x00C0) && (LA1_320 <= 0x00D6)) || ((LA1_320 >= 0x00D8) && (LA1_320 <= 0x00F6)) || ((LA1_320 >= 0x00F8) && (LA1_320 <= 0x1FFF)) || ((LA1_320 >= 0x3040) && (LA1_320 <= 0x318F)) || ((LA1_320 >= 0x3300) && (LA1_320 <= 0x337F)) || ((LA1_320 >= 0x3400) && (LA1_320 <= 0x3D2D)) || ((LA1_320 >= 0x4E00) && (LA1_320 <= 0x9FFF)) || ((LA1_320 >= 0xF900) && (LA1_320 <= 0xFAFF))))
                																    {
                																        alt1=91;
                																    }
                																    else
                																    {
                																        alt1=67;
                																    }
                																}
                															}
                														    break;

                														default:
                														    alt1=91;
                														}

                													}
                												    break;

                												default:
                												    alt1=91;
                												}

                											}
                										    break;

                										default:
                										    alt1=91;
                										}

                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'u':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'b':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'l':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'i':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'c':
                									{
                										{
                										    int LA1_261 = this->LA(7);
                										    if ( (LA1_261 == '$' || ((LA1_261 >= '0') && (LA1_261 <= '9')) || ((LA1_261 >= 'A') && (LA1_261 <= 'Z')) || LA1_261 == '_' || ((LA1_261 >= 'a') && (LA1_261 <= 'z')) || ((LA1_261 >= 0x00C0) && (LA1_261 <= 0x00D6)) || ((LA1_261 >= 0x00D8) && (LA1_261 <= 0x00F6)) || ((LA1_261 >= 0x00F8) && (LA1_261 <= 0x1FFF)) || ((LA1_261 >= 0x3040) && (LA1_261 <= 0x318F)) || ((LA1_261 >= 0x3300) && (LA1_261 <= 0x337F)) || ((LA1_261 >= 0x3400) && (LA1_261 <= 0x3D2D)) || ((LA1_261 >= 0x4E00) && (LA1_261 <= 0x9FFF)) || ((LA1_261 >= 0xF900) && (LA1_261 <= 0xFAFF))))
                										    {
                										        alt1=91;
                										    }
                										    else
                										    {
                										        alt1=68;
                										    }
                										}
                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;

                default:
                    alt1=91;
                }

            }
            else if ( (LA1_0 == 'r'))
            {
                switch ( this->LA(2) )
                {
                case 'e':
                	{
                		switch ( this->LA(3) )
                		{
                		case 't':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'u':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'r':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'n':
                									{
                										{
                										    int LA1_262 = this->LA(7);
                										    if ( (LA1_262 == '$' || ((LA1_262 >= '0') && (LA1_262 <= '9')) || ((LA1_262 >= 'A') && (LA1_262 <= 'Z')) || LA1_262 == '_' || ((LA1_262 >= 'a') && (LA1_262 <= 'z')) || ((LA1_262 >= 0x00C0) && (LA1_262 <= 0x00D6)) || ((LA1_262 >= 0x00D8) && (LA1_262 <= 0x00F6)) || ((LA1_262 >= 0x00F8) && (LA1_262 <= 0x1FFF)) || ((LA1_262 >= 0x3040) && (LA1_262 <= 0x318F)) || ((LA1_262 >= 0x3300) && (LA1_262 <= 0x337F)) || ((LA1_262 >= 0x3400) && (LA1_262 <= 0x3D2D)) || ((LA1_262 >= 0x4E00) && (LA1_262 <= 0x9FFF)) || ((LA1_262 >= 0xF900) && (LA1_262 <= 0xFAFF))))
                										    {
                										        alt1=91;
                										    }
                										    else
                										    {
                										        alt1=69;
                										    }
                										}
                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;

                default:
                    alt1=91;
                }

            }
            else if ( (LA1_0 == 's'))
            {
                switch ( this->LA(2) )
                {
                case 'h':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'o':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'r':
                					{
                						switch ( this->LA(5) )
                						{
                						case 't':
                							{
                								{
                								    int LA1_226 = this->LA(6);
                								    if ( (LA1_226 == '$' || ((LA1_226 >= '0') && (LA1_226 <= '9')) || ((LA1_226 >= 'A') && (LA1_226 <= 'Z')) || LA1_226 == '_' || ((LA1_226 >= 'a') && (LA1_226 <= 'z')) || ((LA1_226 >= 0x00C0) && (LA1_226 <= 0x00D6)) || ((LA1_226 >= 0x00D8) && (LA1_226 <= 0x00F6)) || ((LA1_226 >= 0x00F8) && (LA1_226 <= 0x1FFF)) || ((LA1_226 >= 0x3040) && (LA1_226 <= 0x318F)) || ((LA1_226 >= 0x3300) && (LA1_226 <= 0x337F)) || ((LA1_226 >= 0x3400) && (LA1_226 <= 0x3D2D)) || ((LA1_226 >= 0x4E00) && (LA1_226 <= 0x9FFF)) || ((LA1_226 >= 0xF900) && (LA1_226 <= 0xFAFF))))
                								    {
                								        alt1=91;
                								    }
                								    else
                								    {
                								        alt1=70;
                								    }
                								}
                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 't':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'a':
                			{
                				switch ( this->LA(4) )
                				{
                				case 't':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'i':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'c':
                									{
                										{
                										    int LA1_264 = this->LA(7);
                										    if ( (LA1_264 == '$' || ((LA1_264 >= '0') && (LA1_264 <= '9')) || ((LA1_264 >= 'A') && (LA1_264 <= 'Z')) || LA1_264 == '_' || ((LA1_264 >= 'a') && (LA1_264 <= 'z')) || ((LA1_264 >= 0x00C0) && (LA1_264 <= 0x00D6)) || ((LA1_264 >= 0x00D8) && (LA1_264 <= 0x00F6)) || ((LA1_264 >= 0x00F8) && (LA1_264 <= 0x1FFF)) || ((LA1_264 >= 0x3040) && (LA1_264 <= 0x318F)) || ((LA1_264 >= 0x3300) && (LA1_264 <= 0x337F)) || ((LA1_264 >= 0x3400) && (LA1_264 <= 0x3D2D)) || ((LA1_264 >= 0x4E00) && (LA1_264 <= 0x9FFF)) || ((LA1_264 >= 0xF900) && (LA1_264 <= 0xFAFF))))
                										    {
                										        alt1=91;
                										    }
                										    else
                										    {
                										        alt1=71;
                										    }
                										}
                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;
                		case 'r':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'i':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'c':
                							{
                								switch ( this->LA(6) )
                								{
                								case 't':
                									{
                										switch ( this->LA(7) )
                										{
                										case 'f':
                											{
                												switch ( this->LA(8) )
                												{
                												case 'p':
                													{
                														{
                														    int LA1_311 = this->LA(9);
                														    if ( (LA1_311 == '$' || ((LA1_311 >= '0') && (LA1_311 <= '9')) || ((LA1_311 >= 'A') && (LA1_311 <= 'Z')) || LA1_311 == '_' || ((LA1_311 >= 'a') && (LA1_311 <= 'z')) || ((LA1_311 >= 0x00C0) && (LA1_311 <= 0x00D6)) || ((LA1_311 >= 0x00D8) && (LA1_311 <= 0x00F6)) || ((LA1_311 >= 0x00F8) && (LA1_311 <= 0x1FFF)) || ((LA1_311 >= 0x3040) && (LA1_311 <= 0x318F)) || ((LA1_311 >= 0x3300) && (LA1_311 <= 0x337F)) || ((LA1_311 >= 0x3400) && (LA1_311 <= 0x3D2D)) || ((LA1_311 >= 0x4E00) && (LA1_311 <= 0x9FFF)) || ((LA1_311 >= 0xF900) && (LA1_311 <= 0xFAFF))))
                														    {
                														        alt1=91;
                														    }
                														    else
                														    {
                														        alt1=72;
                														    }
                														}
                													}
                												    break;

                												default:
                												    alt1=91;
                												}

                											}
                										    break;

                										default:
                										    alt1=91;
                										}

                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'u':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'p':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'e':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'r':
                							{
                								{
                								    int LA1_229 = this->LA(6);
                								    if ( (LA1_229 == '$' || ((LA1_229 >= '0') && (LA1_229 <= '9')) || ((LA1_229 >= 'A') && (LA1_229 <= 'Z')) || LA1_229 == '_' || ((LA1_229 >= 'a') && (LA1_229 <= 'z')) || ((LA1_229 >= 0x00C0) && (LA1_229 <= 0x00D6)) || ((LA1_229 >= 0x00D8) && (LA1_229 <= 0x00F6)) || ((LA1_229 >= 0x00F8) && (LA1_229 <= 0x1FFF)) || ((LA1_229 >= 0x3040) && (LA1_229 <= 0x318F)) || ((LA1_229 >= 0x3300) && (LA1_229 <= 0x337F)) || ((LA1_229 >= 0x3400) && (LA1_229 <= 0x3D2D)) || ((LA1_229 >= 0x4E00) && (LA1_229 <= 0x9FFF)) || ((LA1_229 >= 0xF900) && (LA1_229 <= 0xFAFF))))
                								    {
                								        alt1=91;
                								    }
                								    else
                								    {
                								        alt1=73;
                								    }
                								}
                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'w':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'i':
                			{
                				switch ( this->LA(4) )
                				{
                				case 't':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'c':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'h':
                									{
                										{
                										    int LA1_267 = this->LA(7);
                										    if ( (LA1_267 == '$' || ((LA1_267 >= '0') && (LA1_267 <= '9')) || ((LA1_267 >= 'A') && (LA1_267 <= 'Z')) || LA1_267 == '_' || ((LA1_267 >= 'a') && (LA1_267 <= 'z')) || ((LA1_267 >= 0x00C0) && (LA1_267 <= 0x00D6)) || ((LA1_267 >= 0x00D8) && (LA1_267 <= 0x00F6)) || ((LA1_267 >= 0x00F8) && (LA1_267 <= 0x1FFF)) || ((LA1_267 >= 0x3040) && (LA1_267 <= 0x318F)) || ((LA1_267 >= 0x3300) && (LA1_267 <= 0x337F)) || ((LA1_267 >= 0x3400) && (LA1_267 <= 0x3D2D)) || ((LA1_267 >= 0x4E00) && (LA1_267 <= 0x9FFF)) || ((LA1_267 >= 0xF900) && (LA1_267 <= 0xFAFF))))
                										    {
                										        alt1=91;
                										    }
                										    else
                										    {
                										        alt1=74;
                										    }
                										}
                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'y':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'n':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'c':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'h':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'r':
                									{
                										switch ( this->LA(7) )
                										{
                										case 'o':
                											{
                												switch ( this->LA(8) )
                												{
                												case 'n':
                													{
                														switch ( this->LA(9) )
                														{
                														case 'i':
                															{
                																switch ( this->LA(10) )
                																{
                																case 'z':
                																	{
                																		switch ( this->LA(11) )
                																		{
                																		case 'e':
                																			{
                																				switch ( this->LA(12) )
                																				{
                																				case 'd':
                																					{
                																						{
                																						    int LA1_334 = this->LA(13);
                																						    if ( (LA1_334 == '$' || ((LA1_334 >= '0') && (LA1_334 <= '9')) || ((LA1_334 >= 'A') && (LA1_334 <= 'Z')) || LA1_334 == '_' || ((LA1_334 >= 'a') && (LA1_334 <= 'z')) || ((LA1_334 >= 0x00C0) && (LA1_334 <= 0x00D6)) || ((LA1_334 >= 0x00D8) && (LA1_334 <= 0x00F6)) || ((LA1_334 >= 0x00F8) && (LA1_334 <= 0x1FFF)) || ((LA1_334 >= 0x3040) && (LA1_334 <= 0x318F)) || ((LA1_334 >= 0x3300) && (LA1_334 <= 0x337F)) || ((LA1_334 >= 0x3400) && (LA1_334 <= 0x3D2D)) || ((LA1_334 >= 0x4E00) && (LA1_334 <= 0x9FFF)) || ((LA1_334 >= 0xF900) && (LA1_334 <= 0xFAFF))))
                																						    {
                																						        alt1=91;
                																						    }
                																						    else
                																						    {
                																						        alt1=75;
                																						    }
                																						}
                																					}
                																				    break;

                																				default:
                																				    alt1=91;
                																				}

                																			}
                																		    break;

                																		default:
                																		    alt1=91;
                																		}

                																	}
                																    break;

                																default:
                																    alt1=91;
                																}

                															}
                														    break;

                														default:
                														    alt1=91;
                														}

                													}
                												    break;

                												default:
                												    alt1=91;
                												}

                											}
                										    break;

                										default:
                										    alt1=91;
                										}

                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;

                default:
                    alt1=91;
                }

            }
            else if ( (LA1_0 == 't'))
            {
                switch ( this->LA(2) )
                {
                case 'h':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'i':
                			{
                				switch ( this->LA(4) )
                				{
                				case 's':
                					{
                						{
                						    int LA1_189 = this->LA(5);
                						    if ( (LA1_189 == '$' || ((LA1_189 >= '0') && (LA1_189 <= '9')) || ((LA1_189 >= 'A') && (LA1_189 <= 'Z')) || LA1_189 == '_' || ((LA1_189 >= 'a') && (LA1_189 <= 'z')) || ((LA1_189 >= 0x00C0) && (LA1_189 <= 0x00D6)) || ((LA1_189 >= 0x00D8) && (LA1_189 <= 0x00F6)) || ((LA1_189 >= 0x00F8) && (LA1_189 <= 0x1FFF)) || ((LA1_189 >= 0x3040) && (LA1_189 <= 0x318F)) || ((LA1_189 >= 0x3300) && (LA1_189 <= 0x337F)) || ((LA1_189 >= 0x3400) && (LA1_189 <= 0x3D2D)) || ((LA1_189 >= 0x4E00) && (LA1_189 <= 0x9FFF)) || ((LA1_189 >= 0xF900) && (LA1_189 <= 0xFAFF))))
                						    {
                						        alt1=91;
                						    }
                						    else
                						    {
                						        alt1=76;
                						    }
                						}
                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;
                		case 'r':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'o':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'w':
                							{
                								{
                								    int LA1_233 = this->LA(6);
                								    if ( (LA1_233 == 's'))
                								    {
                								        {
                								            int LA1_269 = this->LA(7);
                								            if ( (LA1_269 == '$' || ((LA1_269 >= '0') && (LA1_269 <= '9')) || ((LA1_269 >= 'A') && (LA1_269 <= 'Z')) || LA1_269 == '_' || ((LA1_269 >= 'a') && (LA1_269 <= 'z')) || ((LA1_269 >= 0x00C0) && (LA1_269 <= 0x00D6)) || ((LA1_269 >= 0x00D8) && (LA1_269 <= 0x00F6)) || ((LA1_269 >= 0x00F8) && (LA1_269 <= 0x1FFF)) || ((LA1_269 >= 0x3040) && (LA1_269 <= 0x318F)) || ((LA1_269 >= 0x3300) && (LA1_269 <= 0x337F)) || ((LA1_269 >= 0x3400) && (LA1_269 <= 0x3D2D)) || ((LA1_269 >= 0x4E00) && (LA1_269 <= 0x9FFF)) || ((LA1_269 >= 0xF900) && (LA1_269 <= 0xFAFF))))
                								            {
                								                alt1=91;
                								            }
                								            else
                								            {
                								                alt1=78;
                								            }
                								        }
                								    }
                								    else if ( (LA1_233 == '$' || ((LA1_233 >= '0') && (LA1_233 <= '9')) || ((LA1_233 >= 'A') && (LA1_233 <= 'Z')) || LA1_233 == '_' || ((LA1_233 >= 'a') && (LA1_233 <= 'r')) || ((LA1_233 >= 't') && (LA1_233 <= 'z')) || ((LA1_233 >= 0x00C0) && (LA1_233 <= 0x00D6)) || ((LA1_233 >= 0x00D8) && (LA1_233 <= 0x00F6)) || ((LA1_233 >= 0x00F8) && (LA1_233 <= 0x1FFF)) || ((LA1_233 >= 0x3040) && (LA1_233 <= 0x318F)) || ((LA1_233 >= 0x3300) && (LA1_233 <= 0x337F)) || ((LA1_233 >= 0x3400) && (LA1_233 <= 0x3D2D)) || ((LA1_233 >= 0x4E00) && (LA1_233 <= 0x9FFF)) || ((LA1_233 >= 0xF900) && (LA1_233 <= 0xFAFF))))
                								    {
                								        alt1=91;
                								    }
                								    else
                								    {
                								        alt1=77;
                								    }
                								}
                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;
                case 'r':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'a':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'n':
                					{
                						switch ( this->LA(5) )
                						{
                						case 's':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'i':
                									{
                										switch ( this->LA(7) )
                										{
                										case 'e':
                											{
                												switch ( this->LA(8) )
                												{
                												case 'n':
                													{
                														switch ( this->LA(9) )
                														{
                														case 't':
                															{
                																{
                																    int LA1_323 = this->LA(10);
                																    if ( (LA1_323 == '$' || ((LA1_323 >= '0') && (LA1_323 <= '9')) || ((LA1_323 >= 'A') && (LA1_323 <= 'Z')) || LA1_323 == '_' || ((LA1_323 >= 'a') && (LA1_323 <= 'z')) || ((LA1_323 >= 0x00C0) && (LA1_323 <= 0x00D6)) || ((LA1_323 >= 0x00D8) && (LA1_323 <= 0x00F6)) || ((LA1_323 >= 0x00F8) && (LA1_323 <= 0x1FFF)) || ((LA1_323 >= 0x3040) && (LA1_323 <= 0x318F)) || ((LA1_323 >= 0x3300) && (LA1_323 <= 0x337F)) || ((LA1_323 >= 0x3400) && (LA1_323 <= 0x3D2D)) || ((LA1_323 >= 0x4E00) && (LA1_323 <= 0x9FFF)) || ((LA1_323 >= 0xF900) && (LA1_323 <= 0xFAFF))))
                																    {
                																        alt1=91;
                																    }
                																    else
                																    {
                																        alt1=79;
                																    }
                																}
                															}
                														    break;

                														default:
                														    alt1=91;
                														}

                													}
                												    break;

                												default:
                												    alt1=91;
                												}

                											}
                										    break;

                										default:
                										    alt1=91;
                										}

                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;
                		case 'u':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'e':
                					{
                						{
                						    int LA1_192 = this->LA(5);
                						    if ( (LA1_192 == '$' || ((LA1_192 >= '0') && (LA1_192 <= '9')) || ((LA1_192 >= 'A') && (LA1_192 <= 'Z')) || LA1_192 == '_' || ((LA1_192 >= 'a') && (LA1_192 <= 'z')) || ((LA1_192 >= 0x00C0) && (LA1_192 <= 0x00D6)) || ((LA1_192 >= 0x00D8) && (LA1_192 <= 0x00F6)) || ((LA1_192 >= 0x00F8) && (LA1_192 <= 0x1FFF)) || ((LA1_192 >= 0x3040) && (LA1_192 <= 0x318F)) || ((LA1_192 >= 0x3300) && (LA1_192 <= 0x337F)) || ((LA1_192 >= 0x3400) && (LA1_192 <= 0x3D2D)) || ((LA1_192 >= 0x4E00) && (LA1_192 <= 0x9FFF)) || ((LA1_192 >= 0xF900) && (LA1_192 <= 0xFAFF))))
                						    {
                						        alt1=91;
                						    }
                						    else
                						    {
                						        alt1=80;
                						    }
                						}
                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;
                		case 'y':
                			{
                				{
                				    int LA1_147 = this->LA(4);
                				    if ( (LA1_147 == '$' || ((LA1_147 >= '0') && (LA1_147 <= '9')) || ((LA1_147 >= 'A') && (LA1_147 <= 'Z')) || LA1_147 == '_' || ((LA1_147 >= 'a') && (LA1_147 <= 'z')) || ((LA1_147 >= 0x00C0) && (LA1_147 <= 0x00D6)) || ((LA1_147 >= 0x00D8) && (LA1_147 <= 0x00F6)) || ((LA1_147 >= 0x00F8) && (LA1_147 <= 0x1FFF)) || ((LA1_147 >= 0x3040) && (LA1_147 <= 0x318F)) || ((LA1_147 >= 0x3300) && (LA1_147 <= 0x337F)) || ((LA1_147 >= 0x3400) && (LA1_147 <= 0x3D2D)) || ((LA1_147 >= 0x4E00) && (LA1_147 <= 0x9FFF)) || ((LA1_147 >= 0xF900) && (LA1_147 <= 0xFAFF))))
                				    {
                				        alt1=91;
                				    }
                				    else
                				    {
                				        alt1=81;
                				    }
                				}
                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;

                default:
                    alt1=91;
                }

            }
            else if ( (LA1_0 == 'v'))
            {
                switch ( this->LA(2) )
                {
                case 'o':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'i':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'd':
                					{
                						{
                						    int LA1_194 = this->LA(5);
                						    if ( (LA1_194 == '$' || ((LA1_194 >= '0') && (LA1_194 <= '9')) || ((LA1_194 >= 'A') && (LA1_194 <= 'Z')) || LA1_194 == '_' || ((LA1_194 >= 'a') && (LA1_194 <= 'z')) || ((LA1_194 >= 0x00C0) && (LA1_194 <= 0x00D6)) || ((LA1_194 >= 0x00D8) && (LA1_194 <= 0x00F6)) || ((LA1_194 >= 0x00F8) && (LA1_194 <= 0x1FFF)) || ((LA1_194 >= 0x3040) && (LA1_194 <= 0x318F)) || ((LA1_194 >= 0x3300) && (LA1_194 <= 0x337F)) || ((LA1_194 >= 0x3400) && (LA1_194 <= 0x3D2D)) || ((LA1_194 >= 0x4E00) && (LA1_194 <= 0x9FFF)) || ((LA1_194 >= 0xF900) && (LA1_194 <= 0xFAFF))))
                						    {
                						        alt1=91;
                						    }
                						    else
                						    {
                						        alt1=82;
                						    }
                						}
                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;
                		case 'l':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'a':
                					{
                						switch ( this->LA(5) )
                						{
                						case 't':
                							{
                								switch ( this->LA(6) )
                								{
                								case 'i':
                									{
                										switch ( this->LA(7) )
                										{
                										case 'l':
                											{
                												switch ( this->LA(8) )
                												{
                												case 'e':
                													{
                														{
                														    int LA1_314 = this->LA(9);
                														    if ( (LA1_314 == '$' || ((LA1_314 >= '0') && (LA1_314 <= '9')) || ((LA1_314 >= 'A') && (LA1_314 <= 'Z')) || LA1_314 == '_' || ((LA1_314 >= 'a') && (LA1_314 <= 'z')) || ((LA1_314 >= 0x00C0) && (LA1_314 <= 0x00D6)) || ((LA1_314 >= 0x00D8) && (LA1_314 <= 0x00F6)) || ((LA1_314 >= 0x00F8) && (LA1_314 <= 0x1FFF)) || ((LA1_314 >= 0x3040) && (LA1_314 <= 0x318F)) || ((LA1_314 >= 0x3300) && (LA1_314 <= 0x337F)) || ((LA1_314 >= 0x3400) && (LA1_314 <= 0x3D2D)) || ((LA1_314 >= 0x4E00) && (LA1_314 <= 0x9FFF)) || ((LA1_314 >= 0xF900) && (LA1_314 <= 0xFAFF))))
                														    {
                														        alt1=91;
                														    }
                														    else
                														    {
                														        alt1=83;
                														    }
                														}
                													}
                												    break;

                												default:
                												    alt1=91;
                												}

                											}
                										    break;

                										default:
                										    alt1=91;
                										}

                									}
                								    break;

                								default:
                								    alt1=91;
                								}

                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;

                default:
                    alt1=91;
                }

            }
            else if ( (LA1_0 == 'w'))
            {
                switch ( this->LA(2) )
                {
                case 'h':
                	{
                		switch ( this->LA(3) )
                		{
                		case 'i':
                			{
                				switch ( this->LA(4) )
                				{
                				case 'l':
                					{
                						switch ( this->LA(5) )
                						{
                						case 'e':
                							{
                								{
                								    int LA1_238 = this->LA(6);
                								    if ( (LA1_238 == '$' || ((LA1_238 >= '0') && (LA1_238 <= '9')) || ((LA1_238 >= 'A') && (LA1_238 <= 'Z')) || LA1_238 == '_' || ((LA1_238 >= 'a') && (LA1_238 <= 'z')) || ((LA1_238 >= 0x00C0) && (LA1_238 <= 0x00D6)) || ((LA1_238 >= 0x00D8) && (LA1_238 <= 0x00F6)) || ((LA1_238 >= 0x00F8) && (LA1_238 <= 0x1FFF)) || ((LA1_238 >= 0x3040) && (LA1_238 <= 0x318F)) || ((LA1_238 >= 0x3300) && (LA1_238 <= 0x337F)) || ((LA1_238 >= 0x3400) && (LA1_238 <= 0x3D2D)) || ((LA1_238 >= 0x4E00) && (LA1_238 <= 0x9FFF)) || ((LA1_238 >= 0xF900) && (LA1_238 <= 0xFAFF))))
                								    {
                								        alt1=91;
                								    }
                								    else
                								    {
                								        alt1=84;
                								    }
                								}
                							}
                						    break;

                						default:
                						    alt1=91;
                						}

                					}
                				    break;

                				default:
                				    alt1=91;
                				}

                			}
                		    break;

                		default:
                		    alt1=91;
                		}

                	}
                    break;

                default:
                    alt1=91;
                }

            }
            else if ( (LA1_0 == '{'))
            {
                alt1=85;
            }
            else if ( (LA1_0 == '|'))
            {
                switch ( this->LA(2) )
                {
                case '=':
                	{
                		alt1=87;
                	}
                    break;
                case '|':
                	{
                		alt1=88;
                	}
                    break;

                default:
                    alt1=86;
                }

            }
            else if ( (LA1_0 == '}'))
            {
                alt1=89;
            }
            else if ( (LA1_0 == '~'))
            {
                alt1=90;
            }
            else if ( (((LA1_0 >= '\t') && (LA1_0 <= '\n')) || ((LA1_0 >= '\f') && (LA1_0 <= '\r')) || LA1_0 == ' ' || LA1_0 == '"' || LA1_0 == '$' || LA1_0 == '\'' || ((LA1_0 >= '0') && (LA1_0 <= '9')) || ((LA1_0 >= 'A') && (LA1_0 <= 'Z')) || LA1_0 == '_' || ((LA1_0 >= 'g') && (LA1_0 <= 'h')) || ((LA1_0 >= 'j') && (LA1_0 <= 'k')) || LA1_0 == 'm' || LA1_0 == 'o' || LA1_0 == 'q' || LA1_0 == 'u' || ((LA1_0 >= 'x') && (LA1_0 <= 'z')) || ((LA1_0 >= 0x00C0) && (LA1_0 <= 0x00D6)) || ((LA1_0 >= 0x00D8) && (LA1_0 <= 0x00F6)) || ((LA1_0 >= 0x00F8) && (LA1_0 <= 0x1FFF)) || ((LA1_0 >= 0x3040) && (LA1_0 <= 0x318F)) || ((LA1_0 >= 0x3300) && (LA1_0 <= 0x337F)) || ((LA1_0 >= 0x3400) && (LA1_0 <= 0x3D2D)) || ((LA1_0 >= 0x4E00) && (LA1_0 <= 0x9FFF)) || ((LA1_0 >= 0xF900) && (LA1_0 <= 0xFAFF))))
            {
                alt1=91;
            }
            else
            {

                ExceptionBaseType* ex = new ANTLR_Exception< JavaLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 1 );
                ex->set_state( 0 );


                goto ruleTokensEx;

            }
        }
        switch (alt1)
        {
    	case 1:
    	    // Java__.g:1:10: T__24
    	    {
    	        /* 1:10: T__24 */
    	        mT__24();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // Java__.g:1:16: T__25
    	    {
    	        /* 1:16: T__25 */
    	        mT__25();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // Java__.g:1:22: T__26
    	    {
    	        /* 1:22: T__26 */
    	        mT__26();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // Java__.g:1:28: T__27
    	    {
    	        /* 1:28: T__27 */
    	        mT__27();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // Java__.g:1:34: T__28
    	    {
    	        /* 1:34: T__28 */
    	        mT__28();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // Java__.g:1:40: T__29
    	    {
    	        /* 1:40: T__29 */
    	        mT__29();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // Java__.g:1:46: T__30
    	    {
    	        /* 1:46: T__30 */
    	        mT__30();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // Java__.g:1:52: T__31
    	    {
    	        /* 1:52: T__31 */
    	        mT__31();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // Java__.g:1:58: T__32
    	    {
    	        /* 1:58: T__32 */
    	        mT__32();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // Java__.g:1:64: T__33
    	    {
    	        /* 1:64: T__33 */
    	        mT__33();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // Java__.g:1:70: T__34
    	    {
    	        /* 1:70: T__34 */
    	        mT__34();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // Java__.g:1:76: T__35
    	    {
    	        /* 1:76: T__35 */
    	        mT__35();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // Java__.g:1:82: T__36
    	    {
    	        /* 1:82: T__36 */
    	        mT__36();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // Java__.g:1:88: T__37
    	    {
    	        /* 1:88: T__37 */
    	        mT__37();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // Java__.g:1:94: T__38
    	    {
    	        /* 1:94: T__38 */
    	        mT__38();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // Java__.g:1:100: T__39
    	    {
    	        /* 1:100: T__39 */
    	        mT__39();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // Java__.g:1:106: T__40
    	    {
    	        /* 1:106: T__40 */
    	        mT__40();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // Java__.g:1:112: T__41
    	    {
    	        /* 1:112: T__41 */
    	        mT__41();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // Java__.g:1:118: T__42
    	    {
    	        /* 1:118: T__42 */
    	        mT__42();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // Java__.g:1:124: T__43
    	    {
    	        /* 1:124: T__43 */
    	        mT__43();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 21:
    	    // Java__.g:1:130: T__44
    	    {
    	        /* 1:130: T__44 */
    	        mT__44();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 22:
    	    // Java__.g:1:136: T__45
    	    {
    	        /* 1:136: T__45 */
    	        mT__45();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 23:
    	    // Java__.g:1:142: T__46
    	    {
    	        /* 1:142: T__46 */
    	        mT__46();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 24:
    	    // Java__.g:1:148: T__47
    	    {
    	        /* 1:148: T__47 */
    	        mT__47();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 25:
    	    // Java__.g:1:154: T__48
    	    {
    	        /* 1:154: T__48 */
    	        mT__48();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 26:
    	    // Java__.g:1:160: T__49
    	    {
    	        /* 1:160: T__49 */
    	        mT__49();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 27:
    	    // Java__.g:1:166: T__50
    	    {
    	        /* 1:166: T__50 */
    	        mT__50();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 28:
    	    // Java__.g:1:172: T__51
    	    {
    	        /* 1:172: T__51 */
    	        mT__51();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 29:
    	    // Java__.g:1:178: T__52
    	    {
    	        /* 1:178: T__52 */
    	        mT__52();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 30:
    	    // Java__.g:1:184: T__53
    	    {
    	        /* 1:184: T__53 */
    	        mT__53();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 31:
    	    // Java__.g:1:190: T__54
    	    {
    	        /* 1:190: T__54 */
    	        mT__54();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 32:
    	    // Java__.g:1:196: T__55
    	    {
    	        /* 1:196: T__55 */
    	        mT__55();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 33:
    	    // Java__.g:1:202: T__56
    	    {
    	        /* 1:202: T__56 */
    	        mT__56();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 34:
    	    // Java__.g:1:208: T__57
    	    {
    	        /* 1:208: T__57 */
    	        mT__57();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 35:
    	    // Java__.g:1:214: T__58
    	    {
    	        /* 1:214: T__58 */
    	        mT__58();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 36:
    	    // Java__.g:1:220: T__59
    	    {
    	        /* 1:220: T__59 */
    	        mT__59();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 37:
    	    // Java__.g:1:226: T__60
    	    {
    	        /* 1:226: T__60 */
    	        mT__60();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 38:
    	    // Java__.g:1:232: T__61
    	    {
    	        /* 1:232: T__61 */
    	        mT__61();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 39:
    	    // Java__.g:1:238: T__62
    	    {
    	        /* 1:238: T__62 */
    	        mT__62();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 40:
    	    // Java__.g:1:244: T__63
    	    {
    	        /* 1:244: T__63 */
    	        mT__63();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 41:
    	    // Java__.g:1:250: T__64
    	    {
    	        /* 1:250: T__64 */
    	        mT__64();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 42:
    	    // Java__.g:1:256: T__65
    	    {
    	        /* 1:256: T__65 */
    	        mT__65();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 43:
    	    // Java__.g:1:262: T__66
    	    {
    	        /* 1:262: T__66 */
    	        mT__66();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 44:
    	    // Java__.g:1:268: T__67
    	    {
    	        /* 1:268: T__67 */
    	        mT__67();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 45:
    	    // Java__.g:1:274: T__68
    	    {
    	        /* 1:274: T__68 */
    	        mT__68();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 46:
    	    // Java__.g:1:280: T__69
    	    {
    	        /* 1:280: T__69 */
    	        mT__69();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 47:
    	    // Java__.g:1:286: T__70
    	    {
    	        /* 1:286: T__70 */
    	        mT__70();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 48:
    	    // Java__.g:1:292: T__71
    	    {
    	        /* 1:292: T__71 */
    	        mT__71();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 49:
    	    // Java__.g:1:298: T__72
    	    {
    	        /* 1:298: T__72 */
    	        mT__72();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 50:
    	    // Java__.g:1:304: T__73
    	    {
    	        /* 1:304: T__73 */
    	        mT__73();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 51:
    	    // Java__.g:1:310: T__74
    	    {
    	        /* 1:310: T__74 */
    	        mT__74();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 52:
    	    // Java__.g:1:316: T__75
    	    {
    	        /* 1:316: T__75 */
    	        mT__75();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 53:
    	    // Java__.g:1:322: T__76
    	    {
    	        /* 1:322: T__76 */
    	        mT__76();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 54:
    	    // Java__.g:1:328: T__77
    	    {
    	        /* 1:328: T__77 */
    	        mT__77();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 55:
    	    // Java__.g:1:334: T__78
    	    {
    	        /* 1:334: T__78 */
    	        mT__78();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 56:
    	    // Java__.g:1:340: T__79
    	    {
    	        /* 1:340: T__79 */
    	        mT__79();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 57:
    	    // Java__.g:1:346: T__80
    	    {
    	        /* 1:346: T__80 */
    	        mT__80();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 58:
    	    // Java__.g:1:352: T__81
    	    {
    	        /* 1:352: T__81 */
    	        mT__81();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 59:
    	    // Java__.g:1:358: T__82
    	    {
    	        /* 1:358: T__82 */
    	        mT__82();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 60:
    	    // Java__.g:1:364: T__83
    	    {
    	        /* 1:364: T__83 */
    	        mT__83();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 61:
    	    // Java__.g:1:370: T__84
    	    {
    	        /* 1:370: T__84 */
    	        mT__84();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 62:
    	    // Java__.g:1:376: T__85
    	    {
    	        /* 1:376: T__85 */
    	        mT__85();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 63:
    	    // Java__.g:1:382: T__86
    	    {
    	        /* 1:382: T__86 */
    	        mT__86();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 64:
    	    // Java__.g:1:388: T__87
    	    {
    	        /* 1:388: T__87 */
    	        mT__87();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 65:
    	    // Java__.g:1:394: T__88
    	    {
    	        /* 1:394: T__88 */
    	        mT__88();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 66:
    	    // Java__.g:1:400: T__89
    	    {
    	        /* 1:400: T__89 */
    	        mT__89();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 67:
    	    // Java__.g:1:406: T__90
    	    {
    	        /* 1:406: T__90 */
    	        mT__90();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 68:
    	    // Java__.g:1:412: T__91
    	    {
    	        /* 1:412: T__91 */
    	        mT__91();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 69:
    	    // Java__.g:1:418: T__92
    	    {
    	        /* 1:418: T__92 */
    	        mT__92();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 70:
    	    // Java__.g:1:424: T__93
    	    {
    	        /* 1:424: T__93 */
    	        mT__93();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 71:
    	    // Java__.g:1:430: T__94
    	    {
    	        /* 1:430: T__94 */
    	        mT__94();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 72:
    	    // Java__.g:1:436: T__95
    	    {
    	        /* 1:436: T__95 */
    	        mT__95();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 73:
    	    // Java__.g:1:442: T__96
    	    {
    	        /* 1:442: T__96 */
    	        mT__96();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 74:
    	    // Java__.g:1:448: T__97
    	    {
    	        /* 1:448: T__97 */
    	        mT__97();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 75:
    	    // Java__.g:1:454: T__98
    	    {
    	        /* 1:454: T__98 */
    	        mT__98();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 76:
    	    // Java__.g:1:460: T__99
    	    {
    	        /* 1:460: T__99 */
    	        mT__99();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 77:
    	    // Java__.g:1:466: T__100
    	    {
    	        /* 1:466: T__100 */
    	        mT__100();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 78:
    	    // Java__.g:1:473: T__101
    	    {
    	        /* 1:473: T__101 */
    	        mT__101();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 79:
    	    // Java__.g:1:480: T__102
    	    {
    	        /* 1:480: T__102 */
    	        mT__102();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 80:
    	    // Java__.g:1:487: T__103
    	    {
    	        /* 1:487: T__103 */
    	        mT__103();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 81:
    	    // Java__.g:1:494: T__104
    	    {
    	        /* 1:494: T__104 */
    	        mT__104();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 82:
    	    // Java__.g:1:501: T__105
    	    {
    	        /* 1:501: T__105 */
    	        mT__105();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 83:
    	    // Java__.g:1:508: T__106
    	    {
    	        /* 1:508: T__106 */
    	        mT__106();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 84:
    	    // Java__.g:1:515: T__107
    	    {
    	        /* 1:515: T__107 */
    	        mT__107();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 85:
    	    // Java__.g:1:522: T__108
    	    {
    	        /* 1:522: T__108 */
    	        mT__108();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 86:
    	    // Java__.g:1:529: T__109
    	    {
    	        /* 1:529: T__109 */
    	        mT__109();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 87:
    	    // Java__.g:1:536: T__110
    	    {
    	        /* 1:536: T__110 */
    	        mT__110();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 88:
    	    // Java__.g:1:543: T__111
    	    {
    	        /* 1:543: T__111 */
    	        mT__111();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 89:
    	    // Java__.g:1:550: T__112
    	    {
    	        /* 1:550: T__112 */
    	        mT__112();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 90:
    	    // Java__.g:1:557: T__113
    	    {
    	        /* 1:557: T__113 */
    	        mT__113();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 91:
    	    // Java__.g:1:564: JavaLexerRules. Tokens
    	    {
    	        /* 1:564: JavaLexerRules. Tokens */
    	        m_gJavaLexerRules->mTokens();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */

	}



/* End of code
 * =============================================================================
 */
